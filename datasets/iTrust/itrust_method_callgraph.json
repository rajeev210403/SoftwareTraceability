{"BeanBuilder.build(Map,Object)": {"calls": ["BeanBuilder.checkOverloadedMethods(Object)"], "called_by": [], "class_name": "BeanBuilder", "method_name": "build", "params": ["Map", "Object"]}, "BeanBuilder.checkOverloadedMethods(Object)": {"calls": [], "called_by": ["BeanBuilder.build(Map,Object)"], "class_name": "BeanBuilder", "method_name": "checkOverloadedMethods", "params": ["Object"]}, "EmailUtil.sendEmail(Email)": {"calls": ["FakeEmailDAO.sendEmailRecord(Email)", "DAOFactory.getFakeEmailDAO()"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "MonitorAdverseEventAction.sendEmail(long,String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EditPatientAction.updateInformation(PatientBean)", "ReportAdverseEventAction.sendMails(List)", "EditPHRAction.updateAllergies(long,String)", "ResetPasswordAction.resetPassword(long,String,String,String,String,String)", "SendMessageAction.sendMessage(MessageBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "LabProcUAPAction.updateProcedure(LabProcedureBean)"], "class_name": "EmailUtil", "method_name": "sendEmail", "params": ["Email"]}, "DAOFactory.getFakeEmailDAO()": {"calls": [], "called_by": ["EmailUtil.sendEmail(Email)"], "class_name": "DAOFactory", "method_name": "getFakeEmailDAO", "params": []}, "FakeEmailDAO.sendEmailRecord(Email)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "EmailBeanLoader.loadParameters(PreparedStatement,Email)"], "called_by": ["EmailUtil.sendEmail(Email)"], "class_name": "FakeEmailDAO", "method_name": "sendEmailRecord", "params": ["Email"]}, "DateUtil.currentlyInMonthRange(int,int)": {"calls": ["DateUtil.isInMonthRange(Date,int,int)"], "called_by": ["VisitRemindersDAO.getFluShotDelinquents(long)"], "class_name": "DateUtil", "method_name": "currentlyInMonthRange", "params": ["int", "int"]}, "DateUtil.isInMonthRange(Date,int,int)": {"calls": [], "called_by": ["DateUtil.currentlyInMonthRange(int,int)"], "class_name": "DateUtil", "method_name": "isInMonthRange", "params": ["Date", "int", "int"]}, "DateUtil.getSQLdateXyearsAgoFromNow(int)": {"calls": ["DateUtil.getDateXyearsAgoFromNow(int)"], "called_by": [], "class_name": "DateUtil", "method_name": "getSQLdateXyearsAgoFromNow", "params": ["int"]}, "DateUtil.getDateXyearsAgoFromNow(int)": {"calls": [], "called_by": ["DateUtil.getSQLdateXyearsAgoFromNow(int)"], "class_name": "DateUtil", "method_name": "getDateXyearsAgoFromNow", "params": ["int"]}, "DateUtil.getSQLdateXDaysAgoFromNow(int)": {"calls": ["DateUtil.getDateXDaysAgoFromNow(int)"], "called_by": ["PatientDAO.getCurrentPrescriptions(long)", "PatientDAO.getExpiredPrescriptions(long)"], "class_name": "DateUtil", "method_name": "getSQLdateXDaysAgoFromNow", "params": ["int"]}, "DateUtil.getDateXDaysAgoFromNow(int)": {"calls": [], "called_by": ["DateUtil.getSQLdateXDaysAgoFromNow(int)"], "class_name": "DateUtil", "method_name": "getDateXDaysAgoFromNow", "params": ["int"]}, "Messages.<clinit>()": {"calls": ["Localization.getCurrentLocale()", "Localization.instance()"], "called_by": [], "class_name": "Messages", "method_name": "<clinit>", "params": []}, "Localization.instance()": {"calls": [], "called_by": ["Messages.<clinit>()"], "class_name": "Localization", "method_name": "instance", "params": []}, "Localization.getCurrentLocale()": {"calls": [], "called_by": ["Messages.<clinit>()"], "class_name": "Localization", "method_name": "getCurrentLocale", "params": []}, "DBUtil.canObtainProductionInstance()": {"calls": ["DAOFactory.getConnection()", "DAOFactory.getProductionInstance()"], "called_by": [], "class_name": "DBUtil", "method_name": "canObtainProductionInstance", "params": []}, "DAOFactory.getProductionInstance()": {"calls": [], "called_by": ["DBUtil.canObtainProductionInstance()"], "class_name": "DAOFactory", "method_name": "getProductionInstance", "params": []}, "DAOFactory.getConnection()": {"calls": ["IConnectionDriver.getConnection()"], "called_by": ["OfficeVisitDAO.getAllOfficeVisits(long)", "PatientDAO.getCurrentPrescriptions(long)", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)", "SurveyResultDAO.getSurveyResultsForHospital(String,String)", "NDCodesDAO.updateCode(MedicationBean)", "PatientDAO.declareHCP(long,long)", "RemoteMonitoringDAO.validatePR(long,long)", "LabProcedureDAO.getLabProceduresForPatient(long)", "CPTCodesDAO.getImmunizationCPTCodes()", "LabProcedureDAO.updateRights(LabProcedureBean)", "AuthDAO.addUser(Long,Role,String)", "PatientDAO.getPrescriptions(long)", "TransactionDAO.getTransactionsFor(String,String,Date,Date,TransactionType)", "OfficeVisitDAO.getPrescriptionReportsByDate(long,String,String)", "AdverseEventDAO.getPerscriptions(String,String)", "FakeEmailDAO.getEmailsByPerson(String)", "RiskDAO.hasSmoked(long)", "HealthRecordsDAO.getAllHealthRecords(long)", "PatientDAO.removeRepresentative(long,long)", "AdverseEventDAO.getImmunizations(String,String)", "NDCodesDAO.addNDCode(MedicationBean)", "HospitalsDAO.updateHospital(HospitalBean)", "PatientDAO.checkDeclaredHCP(long,long)", "RiskDAO.hadChildhoodInfection(long,double[])", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "MessageDAO.getMessagesNameAscending(long)", "AllergyDAO.getAllergies(long)", "PatientDAO.getExpiredPrescriptions(long)", "DrugInteractionDAO.deleteInteraction(String,String)", "OfficeVisitDAO.addPrescription(PrescriptionBean)", "TransactionDAO.getAllTransactions()", "OfficeVisitDAO.removeProcedureFromOfficeVisit(long)", "OfficeVisitDAO.addProcedureToOfficeVisit(String,long,String)", "MessageDAO.getMessagesFromNameAscending(long)", "VisitRemindersDAO.getPatients(long)", "ApptDAO.getApptsFor(long)", "AdverseEventDAO.getReport(int)", "TransactionDAO.getOperationalProfile()", "RemoteMonitoringDAO.storePatientData(long,int,String,long)", "PersonnelDAO.getName(long)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)", "PatientDAO.getPatient(long)", "TransactionDAO.getAllRecordAccesses(long,boolean)", "ApptTypeDAO.addApptType(ApptTypeBean)", "PatientDAO.getAllPatients()", "PersonnelDAO.addEmptyPersonnel(Role)", "PatientDAO.getName(long)", "PatientDAO.getRole(long,String)", "MessageDAO.getMessagesTimeAscending(long)", "AuthDAO.recordLoginFailure(String)", "PersonnelDAO.searchForPersonnelWithName(String,String)", "SurveyResultDAO.getSurveyResultsForZip(String,String)", "PersonnelDAO.getHospitals(long)", "PatientDAO.editPatient(PatientBean)", "OfficeVisitDAO.update(OfficeVisitBean)", "OfficeVisitDAO.getPrescriptions(long)", "PatientDAO.getProcedures(long)", "HospitalsDAO.getHospital(String)", "ReferralDAO.addReferral(ReferralBean)", "CPTCodesDAO.updateCode(ProcedureBean)", "AuthDAO.getSecurityQuestion(long)", "ReportRequestDAO.setViewed(long,Date)", "FamilyDAO.getFamilyMembers(long,String,String,boolean)", "TransactionDAO.getRecordAccesses(long,Date,Date,boolean)", "SurveyDAO.getSurveyData(long)", "PatientDAO.searchForPatientsWithName(String,String)", "OfficeVisitDAO.addDiagnosisToOfficeVisit(double,long)", "ReferralDAO.editReferral(ReferralBean)", "HospitalsDAO.removeHospitalAssignment(long,String)", "CPTCodesDAO.addCPTCode(ProcedureBean)", "OfficeVisitDAO.add(OfficeVisitBean)", "AuthDAO.setSecurityQuestionAnswer(String,String,long)", "OfficeVisitDAO.getOfficeVisit(long)", "FakeEmailDAO.getEmailWithBody(String)", "LabProcedureDAO.getAllLabProceduresForDocOV(long)", "LOINCDAO.getAllLOINC()", "OfficeVisitDAO.editPrescription(PrescriptionBean)", "AuthDAO.getUserRole(long)", "PersonnelDAO.getUAPsForHCP(long)", "DrugInteractionDAO.reportInteraction(String,String,String)", "RemoteMonitoringDAO.removePatientFromList(long,long)", "AdverseEventDAO.addReport(AdverseEventBean,long)", "LabProcedureDAO.getAllLabProceduresDate(long)", "ICDCodesDAO.getAllICDCodes()", "RemoteMonitoringDAO.getNumberOfDailyEntries(long)", "OfficeVisitDAO.getOfficeVisitsFromHospital(String)", "DBUtil.canObtainProductionInstance()", "ReportRequestDAO.addReportRequest(long,long,Date)", "SurveyDAO.isSurveyCompleted(long)", "AdverseEventDAO.removeReport(int)", "AdverseEventDAO.getNameForCode(String)", "OfficeVisitDAO.getProcedures(long)", "OfficeVisitDAO.addLabProcedureToOfficeVisit(String,long,long)", "PersonnelDAO.getAllPersonnel()", "AuthDAO.getResetPasswordFailures(String)", "OfficeVisitDAO.getOfficeVisitsWithNoSurvey(long)", "HealthRecordsDAO.add(HealthRecord)", "ICDCodesDAO.addICDCode(DiagnosisBean)", "AccessDAO.setSessionTimeoutMins(int)", "MessageDAO.getMessagesFrom(long)", "AuthDAO.getSecurityAnswer(long)", "NDCodesDAO.getNDCode(String)", "CPTCodesDAO.getCPTCode(String)", "MessageDAO.getMessagesFromTimeAscending(long)", "PersonnelDAO.checkPersonnelExists(long)", "LabProcedureDAO.getLabProceduresForPatientForNextMonth(long)", "PersonnelDAO.getPrescribingDoctor(PrescriptionBean)", "RemoteMonitoringDAO.getPatientsData(long)", "ICDCodesDAO.getICDCode(String)", "LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "DrugInteractionDAO.getInteractions(String)", "AuthDAO.resetPassword(long,String)", "AuthDAO.recordResetPasswordFailure(String)", "AdverseEventDAO.getUnremovedAdverseEventsByCode(String)", "ICDCodesDAO.updateCode(DiagnosisBean)", "AllergyDAO.addAllergy(long,String)", "CPTCodesDAO.getAllCPTCodes()", "OfficeVisitDAO.checkOfficeVisitExists(long,long)", "RemoteMonitoringDAO.getPatientDataByDate(long,Date,Date)", "PatientDAO.addEmptyPatient()", "LOINCDAO.addLOINC(LOINCbean)", "AdverseEventDAO.getHCPMID(int)", "MessageDAO.addMessage(MessageBean)", "LabProcedureDAO.getAllLabProceduresForDocOV(long,long)", "PatientDAO.getDeclaredHCPs(long)", "ReportRequestDAO.getAllReportRequestsForPatient(long)", "ApptDAO.getAllAppts()", "SurveyDAO.addCompletedSurvey(SurveyBean,Date)", "HospitalsDAO.addHospital(HospitalBean)", "TransactionDAO.addAndSortRoles(List,long,boolean)", "AdverseEventDAO.getReportsFor(long)", "AuthDAO.checkUserExists(long)", "PersonnelDAO.editPersonnel(PersonnelBean)", "PatientDAO.represents(long,long)", "RiskDAO.hadPriorDiagnoses(long,double,double)", "OfficeVisitDAO.removePrescription(long)", "ReferralDAO.getReferralsSentFrom(long)", "PatientDAO.getRepresenting(long)", "HospitalsDAO.assignHospital(long,String)", "ReportRequestDAO.getAllReportRequestsForRequester(long)", "VisitRemindersDAO.getDiagnosedVisitNeeders(long)", "PersonnelDAO.getPersonnel(long)", "OfficeVisitDAO.getPrescriptionReports(List,long)", "LabProcedureDAO.getLabProcedure(long)", "FakeEmailDAO.getAllEmails()", "LOINCDAO.getProcedures(String)", "ApptTypeDAO.getApptTypes()", "RemoteMonitoringDAO.addPatientToList(long,long)", "PatientDAO.getImmunizationProcedures(long)", "AuthDAO.resetLoginFailuresToZero(String)", "OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)", "MessageDAO.getMessagesFromNameDescending(long)", "NDCodesDAO.getAllNDCodes()", "ApptDAO.scheduleAppt(ApptBean)", "ReferralDAO.getReferralsSentTo(long)", "OfficeVisitDAO.removeLabProcedureFromOfficeVisit(long)", "PatientDAO.getRenewalNeedsPatients(long)", "LabProcedureDAO.getAllLabProcedures()", "LabProcedureDAO.getAllLabProceduresLOINC(long)", "LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)", "AuthDAO.getLoginFailures(String)", "LOINCDAO.update(LOINCbean)", "OfficeVisitDAO.getDiagnoses(long)", "AccessDAO.getSessionTimeoutMins()", "PatientDAO.undeclareHCP(long,long)", "HospitalsDAO.getAllHospitals()", "VisitRemindersDAO.getFluShotDelinquents(long)", "PatientDAO.getDiagnoses(long)", "MessageDAO.updateRead(MessageBean)", "HospitalsDAO.removeAllHospitalAssignmentsFrom(long)", "ReportRequestDAO.getReportRequest(long)", "PatientDAO.checkPatientExists(long)", "MessageDAO.getMessagesFor(long)", "MessageDAO.getMessagesNameDescending(long)", "RemoteMonitoringDAO.storePatientData(long,int,int,int,String,long)", "FakeEmailDAO.sendEmailRecord(Email)", "OfficeVisitDAO.removeDiagnosisFromOfficeVisit(long)", "RemoteMonitoringDAO.storePatientData(long,int,int,String,long)", "PatientDAO.addRepresentative(long,long)", "PatientDAO.getRepresented(long)", "ApptTypeDAO.editApptType(ApptTypeBean)"], "class_name": "DAOFactory", "method_name": "getConnection", "params": []}, "ManageHospitalAssignmentsAction.getAvailableHospitals(String)": {"calls": ["HospitalsDAO.getAllHospitals()", "PersonnelDAO.getHospitals(long)"], "called_by": [], "class_name": "ManageHospitalAssignmentsAction", "method_name": "getAvailableHospitals", "params": ["String"]}, "HospitalsDAO.getAllHospitals()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "HospitalBeanLoader.loadList(ResultSet)"], "called_by": ["ManageHospitalAssignmentsAction.getAvailableHospitals(String)", "EditOfficeVisitAction.getHospitals(long)"], "class_name": "HospitalsDAO", "method_name": "getAllHospitals", "params": []}, "PersonnelDAO.getHospitals(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "HospitalBeanLoader.loadList(ResultSet)"], "called_by": ["ManageHospitalAssignmentsAction.getAvailableHospitals(String)", "ManageHospitalAssignmentsAction.getAssignedHospitals(String)", "EditOfficeVisitAction.getHospitals(long)"], "class_name": "PersonnelDAO", "method_name": "getHospitals", "params": ["long"]}, "ManageHospitalAssignmentsAction.getAssignedHospitals(String)": {"calls": ["PersonnelDAO.getHospitals(long)"], "called_by": [], "class_name": "ManageHospitalAssignmentsAction", "method_name": "getAssignedHospitals", "params": ["String"]}, "ManageHospitalAssignmentsAction.assignHCPToHospital(String,String)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "HospitalsDAO.assignHospital(long,String)"], "called_by": [], "class_name": "ManageHospitalAssignmentsAction", "method_name": "assignHCPToHospital", "params": ["String", "String"]}, "HospitalsDAO.assignHospital(long,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ManageHospitalAssignmentsAction.assignHCPToHospital(String,String)"], "class_name": "HospitalsDAO", "method_name": "assignHospital", "params": ["long", "String"]}, "TransactionDAO.logTransaction(TransactionType,long,long,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "TransactionType.getCode()"], "called_by": ["ViewMyReportRequestsAction.addReportRequest(long)", "LabProcHCPAction.changePrivacy(long)", "UpdateCPTCodeListAction.updateInformation(ProcedureBean)", "AddHCPAction.add(PersonnelBean)", "EditOfficeVisitAction.getOfficeVisit()", "UpdateHospitalListAction.addHospital(HospitalBean)", "EditRepresentativesAction.removeRepresentative(String)", "DeclareHCPAction.undeclareHCP(String)", "AddUAPAction.add(PersonnelBean)", "EditRepresentativesAction.addRepresentative(String)", "PrescriptionReportAction.getPrescriptionReports(Map,List)", "AddPatientAction.addPatient(PatientBean)", "ManageHospitalAssignmentsAction.removeAllAssignmentsFromHCP(String)", "ViewPrescriptionRenewalNeedsAction.getRenewalNeedsPatients()", "EditOfficeVisitAction.getLabProcedures(long,long)", "AddApptAction.addAppt(ApptBean)", "ViewSurveyResultAction.getSurveyResultsForHospital(SurveyResultBean)", "TransactionDAO.logTransaction(TransactionType,long)", "EditPHRAction.getAllHealthRecords()", "EditPHRAction.getPatient()", "EditPHRAction.getAllOfficeVisits()", "AddPHAAction.add(PersonnelBean)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)", "LoginFailureAction.recordLoginFailure()", "UpdateNDCodeListAction.updateInformation(MedicationBean)", "EditHealthHistoryAction.getAllHealthRecords(long)", "AddERespAction.add(PersonnelBean)", "EditPHRAction.getDiseasesAtRisk()", "LabProcUAPAction.updateProcedure(LabProcedureBean)", "EditMonitoringListAction.removeFromList(long)", "MonitorAdverseEventAction.remove(int)", "MonitorAdverseEventAction.sendEmail(long,String)", "EditHealthHistoryAction.addHealthRecord(long,HealthRecordForm)", "EditPatientAction.updateInformation(PatientBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "AddOfficeVisitAction.addEmptyOfficeVisit(long)", "ViewMyReportRequestsAction.setViewed(int)", "LabProcUAPAction.viewProcedures(long)", "EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "SurveyAction.addSurvey(SurveyBean,long)", "ViewMyAccessLogAction.getAccesses(String,String,boolean)", "MonitorAdverseEventAction.getReports(boolean,String,String)", "UpdateLOINCListAction.add(LOINCbean)", "DeclareHCPAction.declareHCP(String)", "ViewPersonnelAction.getPersonnel(String)", "UpdateICDCodeListAction.updateInformation(DiagnosisBean)", "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "EditMonitoringListAction.addToList(long)", "ChronicDiseaseRiskAction.getDiseasesAtRisk()", "EditPHRAction.updateAllergies(long,String)", "EditPHRAction.getFamily()", "UpdateLOINCListAction.updateInformation(LOINCbean)", "EditApptTypeAction.editApptType(ApptTypeBean)", "ManageHospitalAssignmentsAction.assignHCPToHospital(String,String)", "ViewSurveyResultAction.getSurveyResultsForZip(SurveyResultBean)", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)", "EditPatientAction.getPatient()", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "GetVisitRemindersAction.getVisitReminders(GetVisitRemindersAction$ReminderType)", "ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital(String,String)"], "class_name": "TransactionDAO", "method_name": "logTransaction", "params": ["TransactionType", "long", "long", "String"]}, "ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital(String,String)": {"calls": ["HospitalsDAO.removeHospitalAssignment(long,String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "ManageHospitalAssignmentsAction", "method_name": "removeHCPAssignmentToHospital", "params": ["String", "String"]}, "HospitalsDAO.removeHospitalAssignment(long,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ManageHospitalAssignmentsAction.removeHCPAssignmentToHospital(String,String)"], "class_name": "HospitalsDAO", "method_name": "removeHospitalAssignment", "params": ["long", "String"]}, "ManageHospitalAssignmentsAction.removeAllAssignmentsFromHCP(String)": {"calls": ["HospitalsDAO.removeAllHospitalAssignmentsFrom(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "ManageHospitalAssignmentsAction", "method_name": "removeAllAssignmentsFromHCP", "params": ["String"]}, "HospitalsDAO.removeAllHospitalAssignmentsFrom(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ManageHospitalAssignmentsAction.removeAllAssignmentsFromHCP(String)"], "class_name": "HospitalsDAO", "method_name": "removeAllHospitalAssignmentsFrom", "params": ["long"]}, "ManageHospitalAssignmentsAction.checkHCPID(String)": {"calls": ["PersonnelDAO.checkPersonnelExists(long)"], "called_by": [], "class_name": "ManageHospitalAssignmentsAction", "method_name": "checkHCPID", "params": ["String"]}, "PersonnelDAO.checkPersonnelExists(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ManageHospitalAssignmentsAction.checkHCPID(String)", "PersonnelBaseAction.checkPersonnelID(String)"], "class_name": "PersonnelDAO", "method_name": "checkPersonnelExists", "params": ["long"]}, "ViewMyApptsAction.getMyAppointments()": {"calls": ["ApptDAO.getApptsFor(long)"], "called_by": ["GenerateCalendarAction.getApptsTable(int,int)"], "class_name": "ViewMyApptsAction", "method_name": "getMyAppointments", "params": []}, "ApptDAO.getApptsFor(long)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "ApptBeanLoader.loadList(ResultSet)"], "called_by": ["ViewMyApptsAction.getMyAppointments()"], "class_name": "ApptDAO", "method_name": "getApptsFor", "params": ["long"]}, "ViewMyApptsAction.getName(long)": {"calls": ["PatientDAO.getName(long)", "PersonnelDAO.getName(long)"], "called_by": [], "class_name": "ViewMyApptsAction", "method_name": "getName", "params": ["long"]}, "PatientDAO.getName(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getName(long)", "SendMessageAction.getPatientName(long)", "ReportAdverseEventAction.sendMails(List)", "AddApptAction.getName(long)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "ViewMyApptsAction.getName(long)", "MonitorAdverseEventAction.getName(long)", "AuthDAO.getUserName(long)", "MonitorAdverseEventAction.remove(int)"], "class_name": "PatientDAO", "method_name": "getName", "params": ["long"]}, "PersonnelDAO.getName(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewOfficeVisitAction.getHCPName(long)", "ViewMyMessagesAction.getName(long)", "MyDiagnosisAction.getHCPByDiagnosis(String)", "AddApptAction.getName(long)", "SendMessageAction.getPersonnelName(long)", "ViewMyApptsAction.getName(long)", "AuthDAO.getUserName(long)", "EditOfficeVisitAction.makeEmailApp(long,String,String)", "ViewMyMessagesAction.getPersonnelName(long)"], "class_name": "PersonnelDAO", "method_name": "getName", "params": ["long"]}, "ViewMyApptsAction.getAllAppts()": {"calls": ["ApptDAO.getAllAppts()"], "called_by": [], "class_name": "ViewMyApptsAction", "method_name": "getAllAppts", "params": []}, "ApptDAO.getAllAppts()": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "ApptBeanLoader.loadList(ResultSet)"], "called_by": ["ViewMyApptsAction.getAllAppts()"], "class_name": "ApptDAO", "method_name": "getAllAppts", "params": []}, "ChangeSessionTimeoutAction.changeSessionTimeout(String)": {"calls": ["AccessDAO.setSessionTimeoutMins(int)"], "called_by": [], "class_name": "ChangeSessionTimeoutAction", "method_name": "changeSessionTimeout", "params": ["String"]}, "AccessDAO.setSessionTimeoutMins(int)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "AccessDAO.insertDefaultTimeout(Connection,int)"], "called_by": ["ChangeSessionTimeoutAction.changeSessionTimeout(String)"], "class_name": "AccessDAO", "method_name": "setSessionTimeoutMins", "params": ["int"]}, "ChangeSessionTimeoutAction.getSessionTimeout()": {"calls": ["AccessDAO.getSessionTimeoutMins()"], "called_by": [], "class_name": "ChangeSessionTimeoutAction", "method_name": "getSessionTimeout", "params": []}, "AccessDAO.getSessionTimeoutMins()": {"calls": ["AccessDAO.insertDefaultTimeout(Connection,int)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["SessionTimeoutListener.sessionCreated(HttpSessionEvent)", "ChangeSessionTimeoutAction.getSessionTimeout()"], "class_name": "AccessDAO", "method_name": "getSessionTimeoutMins", "params": []}, "GetVisitRemindersAction.getVisitReminders(GetVisitRemindersAction$ReminderType)": {"calls": ["VisitRemindersDAO.getFluShotDelinquents(long)", "GetVisitRemindersAction.stripDupes(List)", "VisitRemindersDAO.getDiagnosedVisitNeeders(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "GetVisitRemindersAction.getImmunizationNeeders(long)"], "called_by": [], "class_name": "GetVisitRemindersAction", "method_name": "getVisitReminders", "params": ["GetVisitRemindersAction$ReminderType"]}, "VisitRemindersDAO.getDiagnosedVisitNeeders(long)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "VisitReminderReturnForm.addVisitFlag(VisitFlag)", "DAOFactory.getConnection()", "VisitReminderReturnFormLoader.loadSingle(ResultSet)"], "called_by": ["GetVisitRemindersAction.getVisitReminders(GetVisitRemindersAction$ReminderType)"], "class_name": "VisitRemindersDAO", "method_name": "getDiagnosedVisitNeeders", "params": ["long"]}, "GetVisitRemindersAction.stripDupes(List)": {"calls": ["VisitReminderReturnForm.getPatientID()"], "called_by": ["GetVisitRemindersAction.getVisitReminders(GetVisitRemindersAction$ReminderType)"], "class_name": "GetVisitRemindersAction", "method_name": "stripDupes", "params": ["List"]}, "VisitRemindersDAO.getFluShotDelinquents(long)": {"calls": ["DateUtil.setSQLMonthRange(Date,int,int,Date,int,int)", "DBUtil.closeConnection(Connection,PreparedStatement)", "VisitReminderReturnFormLoader.loadSingle(ResultSet)", "DAOFactory.getConnection()", "VisitReminderReturnForm.addVisitFlag(VisitFlag)", "DateUtil.currentlyInMonthRange(int,int)"], "called_by": ["GetVisitRemindersAction.getVisitReminders(GetVisitRemindersAction$ReminderType)"], "class_name": "VisitRemindersDAO", "method_name": "getFluShotDelinquents", "params": ["long"]}, "GetVisitRemindersAction.getImmunizationNeeders(long)": {"calls": ["VisitRemindersDAO.getPatients(long)", "VisitReminderReturnForm.getPatientID()", "VisitReminderReturnForm.addVisitFlag(VisitFlag)", "GetVisitRemindersAction.checkImmunizations(long)"], "called_by": ["GetVisitRemindersAction.getVisitReminders(GetVisitRemindersAction$ReminderType)"], "class_name": "GetVisitRemindersAction", "method_name": "getImmunizationNeeders", "params": ["long"]}, "VisitRemindersDAO.getPatients(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "VisitReminderReturnFormLoader.loadSingle(ResultSet)"], "called_by": ["GetVisitRemindersAction.getImmunizationNeeders(long)"], "class_name": "VisitRemindersDAO", "method_name": "getPatients", "params": ["long"]}, "VisitReminderReturnForm.getPatientID()": {"calls": [], "called_by": ["GetVisitRemindersAction.stripDupes(List)", "GetVisitRemindersAction.getImmunizationNeeders(long)"], "class_name": "VisitReminderReturnForm", "method_name": "getPatientID", "params": []}, "GetVisitRemindersAction.checkImmunizations(long)": {"calls": ["ProcedureBean.getDate()", "PatientDAO.getPatient(long)", "GetVisitRemindersAction.testDipTet(int,long,long)", "GetVisitRemindersAction.testPolio(int,long,long)", "GetVisitRemindersAction.testHepA(int,long,long)", "GetVisitRemindersAction.testHepB(int,long,long)", "GetVisitRemindersAction.testHPV(int,long,long)", "PatientBean.getAgeInWeeks()", "ProcedureBean.getCPTCode()", "PatientBean.getGender()", "GetVisitRemindersAction.testHaemoFlu(int,long,long,long)", "GetVisitRemindersAction.testMeasles(int,long,long)", "PatientDAO.getProcedures(long)", "GetVisitRemindersAction.testPneumo(int,long,long,long)", "Gender.getName()", "GetVisitRemindersAction.testRotaVirus(int,long,long)", "GetVisitRemindersAction.testVaricella(int,long,long)"], "called_by": ["GetVisitRemindersAction.getImmunizationNeeders(long)"], "class_name": "GetVisitRemindersAction", "method_name": "checkImmunizations", "params": ["long"]}, "VisitReminderReturnForm.addVisitFlag(VisitFlag)": {"calls": [], "called_by": ["VisitRemindersDAO.getFluShotDelinquents(long)", "VisitRemindersDAO.getDiagnosedVisitNeeders(long)", "GetVisitRemindersAction.getImmunizationNeeders(long)"], "class_name": "VisitReminderReturnForm", "method_name": "addVisitFlag", "params": ["VisitFlag"]}, "PatientDAO.getProcedures(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)", "ViewReportAction.getProcedures(long)"], "class_name": "PatientDAO", "method_name": "getProcedures", "params": ["long"]}, "PatientDAO.getPatient(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PatientLoader.loadSingle(ResultSet)"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ResetPasswordAction.makeEmailApp(long,String)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "MonitorAdverseEventAction.sendEmail(long,String)", "MyDiagnosisAction.getHCPByDiagnosis(String)", "EditPatientAction.makeEmail()", "ViewMyRecordsAction.getPatient()", "PrescriptionReportAction.getPatient()", "ViewMyRecordsAction.getFamilyMemberCOD(FamilyMemberBean)", "SendMessageAction.sendMessage(MessageBean)", "ViewMyRecordsAction.getPatient(long)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EditPHRAction.getFamilyMemberCOD(FamilyMemberBean)", "ViewPrescriptionRecordsAction.getPatient(long)", "EditPHRAction.getPatient()", "ReportAdverseEventAction.sendMails(List)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "GetVisitRemindersAction.checkImmunizations(long)", "ViewExpiredPrescriptionsAction.getPatient(long)", "EditOfficeVisitAction.makeEmailApp(long,String,String)", "EditPatientAction.getPatient()"], "class_name": "PatientDAO", "method_name": "getPatient", "params": ["long"]}, "PatientBean.getAgeInWeeks()": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "PatientBean", "method_name": "getAgeInWeeks", "params": []}, "PatientBean.getGender()": {"calls": [], "called_by": ["EmergencyReportAction.getPatientGender()", "GetVisitRemindersAction.checkImmunizations(long)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)", "GenderFactor.getDescription()", "GenderFactor.hasFactor()"], "class_name": "PatientBean", "method_name": "getGender", "params": []}, "ProcedureBean.getCPTCode()": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)", "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "UpdateCPTCodeListAction.updateInformation(ProcedureBean)", "ProcedureBeanValidator.validate(ProcedureBean)", "CPTCodesDAO.addCPTCode(ProcedureBean)", "CPTCodesDAO.updateCode(ProcedureBean)"], "class_name": "ProcedureBean", "method_name": "getCPTCode", "params": []}, "ProcedureBean.getDate()": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "ProcedureBean", "method_name": "getDate", "params": []}, "GetVisitRemindersAction.testHepB(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testHepB", "params": ["int", "long", "long"]}, "GetVisitRemindersAction.testRotaVirus(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testRotaVirus", "params": ["int", "long", "long"]}, "GetVisitRemindersAction.testDipTet(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testDipTet", "params": ["int", "long", "long"]}, "GetVisitRemindersAction.testHaemoFlu(int,long,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testHaemoFlu", "params": ["int", "long", "long", "long"]}, "GetVisitRemindersAction.testPneumo(int,long,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testPneumo", "params": ["int", "long", "long", "long"]}, "GetVisitRemindersAction.testPolio(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testPolio", "params": ["int", "long", "long"]}, "GetVisitRemindersAction.testMeasles(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testMeasles", "params": ["int", "long", "long"]}, "GetVisitRemindersAction.testVaricella(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testVaricella", "params": ["int", "long", "long"]}, "GetVisitRemindersAction.testHepA(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testHepA", "params": ["int", "long", "long"]}, "Gender.getName()": {"calls": [], "called_by": ["Gender.toString()", "GetVisitRemindersAction.checkImmunizations(long)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "Gender", "method_name": "getName", "params": []}, "GetVisitRemindersAction.testHPV(int,long,long)": {"calls": [], "called_by": ["GetVisitRemindersAction.checkImmunizations(long)"], "class_name": "GetVisitRemindersAction", "method_name": "testHPV", "params": ["int", "long", "long"]}, "AddERespAction.add(PersonnelBean)": {"calls": ["PersonnelBean.setPassword(String)", "PersonnelBean.getRole()", "PersonnelBean.setMID(long)", "Role.name()", "AuthDAO.addUser(Long,Role,String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "RandomPassword.getRandomPassword()", "AddPersonnelValidator.validate(PersonnelBean)", "PersonnelDAO.addEmptyPersonnel(Role)", "PersonnelDAO.editPersonnel(PersonnelBean)"], "called_by": [], "class_name": "AddERespAction", "method_name": "add", "params": ["PersonnelBean"]}, "AddPersonnelValidator.validate(PersonnelBean)": {"calls": ["PersonnelBean.getLastName()", "PersonnelBean.getEmail()", "ErrorList.hasErrors()", "AddPersonnelValidator.checkFormat(String,String,ValidationFormat,boolean)", "PersonnelBean.getFirstName()", "ErrorList.addIfNotNull(String)"], "called_by": ["AddPersonnelValidator.validate(Object)", "AddHCPAction.add(PersonnelBean)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "AddPersonnelValidator", "method_name": "validate", "params": ["PersonnelBean"]}, "PersonnelDAO.addEmptyPersonnel(Role)": {"calls": ["Role.name()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()"], "called_by": ["AddHCPAction.add(PersonnelBean)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "PersonnelDAO", "method_name": "addEmptyPersonnel", "params": ["Role"]}, "PersonnelBean.setMID(long)": {"calls": [], "called_by": ["EditPersonnelAction.updateInformation(PersonnelBean)", "AddHCPAction.add(PersonnelBean)", "PersonnelLoader.loadSingle(ResultSet)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "setMID", "params": ["long"]}, "PersonnelDAO.editPersonnel(PersonnelBean)": {"calls": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "PersonnelBean.getMID()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()"], "called_by": ["EditPersonnelAction.updateInformation(PersonnelBean)", "AddHCPAction.add(PersonnelBean)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "PersonnelDAO", "method_name": "editPersonnel", "params": ["PersonnelBean"]}, "RandomPassword.getRandomPassword()": {"calls": [], "called_by": ["AddPatientAction.addPatient(PatientBean)", "AuthDAO.addUser(Long,Role,String)", "AddHCPAction.add(PersonnelBean)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "RandomPassword", "method_name": "getRandomPassword", "params": []}, "AuthDAO.addUser(Long,Role,String)": {"calls": ["DAOFactory.getConnection()", "RandomPassword.getRandomPassword()", "DBUtil.closeConnection(Connection,PreparedStatement)", "Role.toString()"], "called_by": ["AddPatientAction.addPatient(PatientBean)", "AddHCPAction.add(PersonnelBean)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "AuthDAO", "method_name": "addUser", "params": ["Long", "Role", "String"]}, "PersonnelBean.setPassword(String)": {"calls": [], "called_by": ["AddHCPAction.add(PersonnelBean)", "AddPHAAction.add(PersonnelBean)", "AddERespAction.add(PersonnelBean)", "AddUAPAction.add(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "setPassword", "params": ["String"]}, "PersonnelBean.getRole()": {"calls": [], "called_by": ["AddERespAction.add(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getRole", "params": []}, "Role.name()": {"calls": [], "called_by": ["PersonnelDAO.addEmptyPersonnel(Role)", "AddERespAction.add(PersonnelBean)"], "class_name": "Role", "method_name": "name", "params": []}, "ViewPersonnelAction.getPersonnel(String)": {"calls": ["PersonnelDAO.getPersonnel(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "Messages.getString(String)"], "called_by": [], "class_name": "ViewPersonnelAction", "method_name": "getPersonnel", "params": ["String"]}, "PersonnelDAO.getPersonnel(long)": {"calls": ["PersonnelLoader.loadSingle(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ResetPasswordAction.makeEmailApp(long,String)", "ViewPersonnelAction.getPersonnel(String)", "MyDiagnosisAction.getHCPByDiagnosis(String)", "ReportAdverseEventAction.sendMails(List)", "EditPersonnelAction.editMessageFilter(String)", "ViewReportAction.getPersonnel(long)", "SendMessageAction.sendMessage(MessageBean)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewMyReportRequestsAction.getLongStatus(long)", "ViewPatientOfficeVisitHistoryAction.getPersonnel()", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "ViewPersonnelAction.getEmailHistory()", "ViewMyRecordsAction.getPersonnel(long)"], "class_name": "PersonnelDAO", "method_name": "getPersonnel", "params": ["long"]}, "Messages.getString(String)": {"calls": [], "called_by": ["ViewPersonnelAction.getPersonnel(String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "ViewPrescriptionRenewalNeedsAction.getRenewalNeedsPatients()", "ViewOfficeVisitAction.checkRepresented(long,String)", "ReportRequestBean.<clinit>()"], "class_name": "Messages", "method_name": "getString", "params": ["String"]}, "ViewPersonnelAction.getEmailHistory()": {"calls": ["PersonnelBean.getEmail()", "PersonnelDAO.getPersonnel(long)", "FakeEmailDAO.getEmailsByPerson(String)"], "called_by": [], "class_name": "ViewPersonnelAction", "method_name": "getEmailHistory", "params": []}, "PersonnelBean.getEmail()": {"calls": [], "called_by": ["ResetPasswordAction.makeEmailApp(long,String)", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "PersonnelValidator.validate(PersonnelBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "ReportAdverseEventAction.sendMails(List)", "ViewPersonnelAction.getEmailHistory()", "AddPersonnelValidator.validate(PersonnelBean)", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "PersonnelBean", "method_name": "getEmail", "params": []}, "FakeEmailDAO.getEmailsByPerson(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "EmailBeanLoader.loadList(ResultSet)"], "called_by": ["ViewMyRecordsAction.getEmailHistory()", "ViewPersonnelAction.getEmailHistory()"], "class_name": "FakeEmailDAO", "method_name": "getEmailsByPerson", "params": ["String"]}, "EditApptTypeAction.getApptTypes()": {"calls": ["ApptTypeDAO.getApptTypes()"], "called_by": ["EditApptTypeAction.editApptType(ApptTypeBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "EditApptTypeAction.getDurationByType(String)"], "class_name": "EditApptTypeAction", "method_name": "getApptTypes", "params": []}, "ApptTypeDAO.getApptTypes()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ApptTypeBeanLoader.loadList(ResultSet)"], "called_by": ["EditApptTypeAction.getApptTypes()"], "class_name": "ApptTypeDAO", "method_name": "getApptTypes", "params": []}, "EditApptTypeAction.addApptType(ApptTypeBean)": {"calls": ["ApptTypeBean.getDuration()", "DBException.printStackTrace()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "ApptTypeBeanValidator.validate(ApptTypeBean)", "ApptTypeBean.getName()", "DBException.getMessage()", "ApptTypeDAO.addApptType(ApptTypeBean)", "EditApptTypeAction.getApptTypes()"], "called_by": [], "class_name": "EditApptTypeAction", "method_name": "addApptType", "params": ["ApptTypeBean"]}, "ApptTypeBeanValidator.validate(ApptTypeBean)": {"calls": ["ApptTypeBean.getDuration()", "ErrorList.hasErrors()", "ApptTypeBean.getName()", "ApptTypeBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ErrorList.addIfNotNull(String)"], "called_by": ["EditApptTypeAction.editApptType(ApptTypeBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "ApptTypeBeanValidator.validate(Object)"], "class_name": "ApptTypeBeanValidator", "method_name": "validate", "params": ["ApptTypeBean"]}, "ApptTypeBean.getName()": {"calls": [], "called_by": ["EditApptTypeAction.getDurationByType(String)", "EditApptTypeAction.editApptType(ApptTypeBean)", "ApptTypeBeanValidator.validate(ApptTypeBean)", "ApptTypeBeanLoader.loadParameters(PreparedStatement,ApptTypeBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "ApptTypeDAO.editApptType(ApptTypeBean)"], "class_name": "ApptTypeBean", "method_name": "getName", "params": []}, "ApptTypeDAO.addApptType(ApptTypeBean)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ApptTypeBeanLoader.loadParameters(PreparedStatement,ApptTypeBean)"], "called_by": ["EditApptTypeAction.addApptType(ApptTypeBean)"], "class_name": "ApptTypeDAO", "method_name": "addApptType", "params": ["ApptTypeBean"]}, "ApptTypeBean.getDuration()": {"calls": [], "called_by": ["EditApptTypeAction.getDurationByType(String)", "EditApptTypeAction.editApptType(ApptTypeBean)", "ApptTypeBeanValidator.validate(ApptTypeBean)", "ApptTypeBeanLoader.loadParameters(PreparedStatement,ApptTypeBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "ApptTypeDAO.editApptType(ApptTypeBean)"], "class_name": "ApptTypeBean", "method_name": "getDuration", "params": []}, "DBException.printStackTrace()": {"calls": [], "called_by": ["SearchUsersAction.searchForPatientsWithName(String,String)", "UpdateCPTCodeListAction.updateInformation(ProcedureBean)", "PriorDiagnosisFactor.hasFactor()", "EditOfficeVisitAction.hasInteraction(String,String,String,String)", "UpdateHospitalListAction.addHospital(HospitalBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "SendMessageAction.getDLHCPsFor(long)", "EditOfficeVisitAction.isAllergyOnList(String,String)", "DrugInteractionAction.deleteInteraction(String,String)", "AddApptAction.addAppt(ApptBean)", "SearchUsersAction.searchForPersonnelWithName(String,String)", "UpdateICDCodeListAction.updateInformation(DiagnosisBean)", "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "DrugInteractionAction.reportInteraction(String,String,String)", "SmokingFactor.hasFactor()", "SessionTimeoutListener.sessionCreated(HttpSessionEvent)", "ResetPasswordAction.checkRole(long,String)", "ResetPasswordAction.getSecurityQuestion(long)", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)", "FamilyHistoryFactor.hasFactor()", "UpdateLOINCListAction.updateInformation(LOINCbean)", "EditApptTypeAction.editApptType(ApptTypeBean)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "UpdateHospitalListAction.updateInformation(HospitalBean)", "UpdateNDCodeListAction.updateInformation(MedicationBean)", "LoginFailureAction.recordLoginFailure()", "ViewMyMessagesAction.setRead(MessageBean)", "SendMessageAction.getMyRepresentees()"], "class_name": "DBException", "method_name": "printStackTrace", "params": []}, "DBException.getMessage()": {"calls": [], "called_by": ["UpdateCPTCodeListAction.updateInformation(ProcedureBean)", "EditOfficeVisitAction.hasInteraction(String,String,String,String)", "UpdateHospitalListAction.addHospital(HospitalBean)", "EditApptTypeAction.addApptType(ApptTypeBean)", "ViewVisitedHCPsAction.processOfficeVisits()", "EditOfficeVisitAction.isAllergyOnList(String,String)", "DrugInteractionAction.deleteInteraction(String,String)", "AddApptAction.addAppt(ApptBean)", "UpdateICDCodeListAction.updateInformation(DiagnosisBean)", "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "ViewMyRecordsAction.getFamilyHistory()", "DrugInteractionAction.reportInteraction(String,String,String)", "EmergencyReportAction.getWarningDiagnoses()", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)", "UpdateLOINCListAction.updateInformation(LOINCbean)", "EditApptTypeAction.editApptType(ApptTypeBean)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "UpdateHospitalListAction.updateInformation(HospitalBean)", "ViewMyRecordsAction.getFamily()", "LoginFailureAction.recordLoginFailure()", "DrugInteractionAction.getInteractions(String)", "UpdateNDCodeListAction.updateInformation(MedicationBean)", "ReportAdverseEventAction.addReport(AdverseEventBean)"], "class_name": "DBException", "method_name": "getMessage", "params": []}, "EditApptTypeAction.editApptType(ApptTypeBean)": {"calls": ["ApptTypeBean.getDuration()", "DBException.printStackTrace()", "ApptTypeBeanValidator.validate(ApptTypeBean)", "ApptTypeBean.getName()", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "EditApptTypeAction.getApptTypes()", "ApptTypeDAO.editApptType(ApptTypeBean)"], "called_by": [], "class_name": "EditApptTypeAction", "method_name": "editApptType", "params": ["ApptTypeBean"]}, "ApptTypeDAO.editApptType(ApptTypeBean)": {"calls": ["ApptTypeBean.getDuration()", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ApptTypeBean.getName()"], "called_by": ["EditApptTypeAction.editApptType(ApptTypeBean)"], "class_name": "ApptTypeDAO", "method_name": "editApptType", "params": ["ApptTypeBean"]}, "EditApptTypeAction.getDurationByType(String)": {"calls": ["ApptTypeBean.getDuration()", "ApptTypeBean.getName()", "EditApptTypeAction.getApptTypes()"], "called_by": ["GenerateCalendarAction.getConflicts()"], "class_name": "EditApptTypeAction", "method_name": "getDurationByType", "params": ["String"]}, "LabProcHCPAction.sortByLOINC(long)": {"calls": ["LabProcedureDAO.getAllLabProceduresLOINC(long)"], "called_by": [], "class_name": "LabProcHCPAction", "method_name": "sortByLOINC", "params": ["long"]}, "LabProcedureDAO.getAllLabProceduresLOINC(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["LabProcHCPAction.sortByLOINC(long)"], "class_name": "LabProcedureDAO", "method_name": "getAllLabProceduresLOINC", "params": ["long"]}, "LabProcHCPAction.getLabProcForNextMonth()": {"calls": ["OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)", "LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)", "OfficeVisitBean.getID()"], "called_by": [], "class_name": "LabProcHCPAction", "method_name": "getLabProcForNextMonth", "params": []}, "OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "OfficeVisitLoader.loadList(ResultSet)"], "called_by": ["LabProcHCPAction.getLabProcForNextMonth()", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "OfficeVisitDAO", "method_name": "getAllOfficeVisitsForLHCP", "params": ["long"]}, "OfficeVisitBean.getID()": {"calls": [], "called_by": ["LabProcHCPAction.getLabProcForNextMonth()", "OfficeVisitDAO.update(OfficeVisitBean)"], "class_name": "OfficeVisitBean", "method_name": "getID", "params": []}, "LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["LabProcHCPAction.getLabProcForNextMonth()"], "class_name": "LabProcedureDAO", "method_name": "getLabProceduresForLHCPForNextMonth", "params": ["long"]}, "LabProcHCPAction.changePrivacy(long)": {"calls": ["LabProcedureDAO.getLabProcedure(long)", "LabProcHCPAction.checkAccess(long)", "LabProcedureBean.getRights()", "LabProcedureDAO.updateRights(LabProcedureBean)", "LabProcedureBean.getPid()", "LabProcedureBean.restrict()", "LabProcedureValidator.validate(LabProcedureBean)", "LabProcedureBean.allow()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "LabProcedureBean.getProcedureID()"], "called_by": [], "class_name": "LabProcHCPAction", "method_name": "changePrivacy", "params": ["long"]}, "LabProcedureDAO.getLabProcedure(long)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "LabProcedureBeanLoader.loadSingle(ResultSet)"], "called_by": ["LabProcUAPAction.updateProcedure(LabProcedureBean)", "LabProcHCPAction.checkAccess(long)", "LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcedureDAO", "method_name": "getLabProcedure", "params": ["long"]}, "LabProcHCPAction.checkAccess(long)": {"calls": ["LabProcedureDAO.getLabProcedure(long)", "OfficeVisitBean.getHcpID()", "OfficeVisitDAO.getOfficeVisit(long)", "LabProcedureBean.getOvID()"], "called_by": ["LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcHCPAction", "method_name": "checkAccess", "params": ["long"]}, "LabProcedureBean.getRights()": {"calls": [], "called_by": ["LabProcedureDAO.updateRights(LabProcedureBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)", "LabProcedureValidator.validate(LabProcedureBean)", "LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcedureBean", "method_name": "getRights", "params": []}, "LabProcedureBean.allow()": {"calls": [], "called_by": ["LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcedureBean", "method_name": "allow", "params": []}, "LabProcedureBean.restrict()": {"calls": [], "called_by": ["LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcedureBean", "method_name": "restrict", "params": []}, "LabProcedureValidator.validate(LabProcedureBean)": {"calls": ["ErrorList.hasErrors()", "LabProcedureBean.getRights()", "LabProcedureValidator.checkFormat(String,String,ValidationFormat,boolean)", "LabProcedureBean.getCommentary()", "LabProcedureBean.getStatus()", "LabProcedureBean.getLoinc()", "ErrorList.addIfNotNull(String)"], "called_by": ["LabProcUAPAction.updateProcedure(LabProcedureBean)", "LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcedureValidator", "method_name": "validate", "params": ["LabProcedureBean"]}, "LabProcedureDAO.updateRights(LabProcedureBean)": {"calls": ["LabProcedureBean.getRights()", "LabProcedureBean.getPid()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "LabProcedureBean.getProcedureID()"], "called_by": ["LabProcHCPAction.changePrivacy(long)"], "class_name": "LabProcedureDAO", "method_name": "updateRights", "params": ["LabProcedureBean"]}, "LabProcedureBean.getPid()": {"calls": [], "called_by": ["LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "LabProcedureDAO.updateRights(LabProcedureBean)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)", "LabProcHCPAction.changePrivacy(long)", "LabProcUAPAction.updateProcedure(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getPid", "params": []}, "LabProcedureBean.getProcedureID()": {"calls": [], "called_by": ["LabProcUAPAction.updateProcedure(LabProcedureBean)", "LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "LabProcHCPAction.changePrivacy(long)", "LabProcedureDAO.updateRights(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getProcedureID", "params": []}, "LabProcedureBean.getOvID()": {"calls": [], "called_by": ["LabProcHCPAction.checkAccess(long)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getOvID", "params": []}, "OfficeVisitDAO.getOfficeVisit(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "called_by": ["LabProcHCPAction.checkAccess(long)", "EditPHRAction.getCompleteOfficeVisit(long)", "EditOfficeVisitAction.getOfficeVisit()", "ViewMyRecordsAction.getCompleteOfficeVisit(long)", "ViewOfficeVisitAction.getOfficeVisit()", "EmergencyReportAction.getWarningDiagnoses()"], "class_name": "OfficeVisitDAO", "method_name": "getOfficeVisit", "params": ["long"]}, "OfficeVisitBean.getHcpID()": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "LabProcHCPAction.checkAccess(long)", "OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)", "MyDiagnosisAction.getHCPByDiagnosis(String)", "MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,String)"], "class_name": "OfficeVisitBean", "method_name": "getHcpID", "params": []}, "ViewVisitedHCPsAction.processOfficeVisits()": {"calls": ["OfficeVisitDAO.getAllOfficeVisits(long)", "PersonnelBean.getMID()", "HCPVisitBean.setHCPAddr(String)", "PatientDAO.getDeclaredHCPs(long)", "PersonnelBean.getCity()", "PersonnelBean.getSpecialty()", "PersonnelBean.getStreetAddress1()", "PersonnelBean.getFullName()", "HCPVisitBean.setDesignated(boolean)", "HCPVisitBean.setHCPMID(long)", "OfficeVisitBean.getVisitDateStr()", "HCPVisitBean.setHCPName(String)", "HCPVisitBean.setHCPSpecialty(String)", "OfficeVisitBean.getHcpID()", "PersonnelBean.getZip()", "HCPVisitBean.setOVDate(String)", "PersonnelBean.getStreetAddress2()", "PatientDAO.checkDeclaredHCP(long,long)", "PersonnelDAO.getPersonnel(long)", "PersonnelBean.getState()", "DBException.getMessage()"], "called_by": ["ViewVisitedHCPsAction.getVisitedHCPs()"], "class_name": "ViewVisitedHCPsAction", "method_name": "processOfficeVisits", "params": []}, "OfficeVisitDAO.getAllOfficeVisits(long)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "OfficeVisitLoader.loadList(ResultSet)"], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "AddOfficeVisitAction.getAllOfficeVisits()", "EditPHRAction.getAllOfficeVisits()", "PrescriptionReportAction.getAllOfficeVisits()", "ViewMyRecordsAction.getAllOfficeVisits()"], "class_name": "OfficeVisitDAO", "method_name": "getAllOfficeVisits", "params": ["long"]}, "PatientDAO.getDeclaredHCPs(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PersonnelLoader.loadList(ResultSet)"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "DeclareHCPAction.getDeclaredHCPS()", "ViewReportAction.getDeclaredHCPs(long)", "SendMessageAction.getDLHCPsFor(long)"], "class_name": "PatientDAO", "method_name": "getDeclaredHCPs", "params": ["long"]}, "HCPVisitBean.setHCPMID(long)": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "setHCPMID", "params": ["long"]}, "PersonnelBean.getFullName()": {"calls": ["PersonnelBean.getLastName()", "PersonnelBean.getFirstName()"], "called_by": ["ResetPasswordAction.makeEmailApp(long,String)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "EditPHRAction.makeEmail()", "ViewMyReportRequestsAction.getLongStatus(long)", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "PersonnelBean", "method_name": "getFullName", "params": []}, "HCPVisitBean.setHCPName(String)": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "setHCPName", "params": ["String"]}, "OfficeVisitBean.getVisitDateStr()": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "OfficeVisitBean", "method_name": "getVisitDateStr", "params": []}, "HCPVisitBean.setOVDate(String)": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "setOVDate", "params": ["String"]}, "PersonnelBean.getSpecialty()": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "ViewVisitedHCPsAction.filterHCPList(String,String,String)"], "class_name": "PersonnelBean", "method_name": "getSpecialty", "params": []}, "HCPVisitBean.setHCPSpecialty(String)": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "setHCPSpecialty", "params": ["String"]}, "PersonnelBean.getStreetAddress1()": {"calls": [], "called_by": ["PersonnelValidator.validate(PersonnelBean)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getStreetAddress1", "params": []}, "PersonnelBean.getStreetAddress2()": {"calls": [], "called_by": ["PersonnelValidator.validate(PersonnelBean)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getStreetAddress2", "params": []}, "PersonnelBean.getCity()": {"calls": [], "called_by": ["PersonnelValidator.validate(PersonnelBean)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getCity", "params": []}, "PersonnelBean.getState()": {"calls": [], "called_by": ["PersonnelValidator.validate(PersonnelBean)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getState", "params": []}, "PersonnelBean.getZip()": {"calls": ["PersonnelBean.getZip1()", "PersonnelBean.getZip2()"], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "ViewVisitedHCPsAction.declareHCP(String)", "PersonnelValidator.validate(PersonnelBean)", "ViewVisitedHCPsAction.filterHCPList(String,String,String)"], "class_name": "PersonnelBean", "method_name": "getZip", "params": []}, "HCPVisitBean.setHCPAddr(String)": {"calls": [], "called_by": ["ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "setHCPAddr", "params": ["String"]}, "PatientDAO.checkDeclaredHCP(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewVisitedHCPsAction.checkDeclared(long)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "PatientDAO", "method_name": "checkDeclaredHCP", "params": ["long", "long"]}, "HCPVisitBean.setDesignated(boolean)": {"calls": [], "called_by": ["ViewVisitedHCPsAction.undeclareHCP(String)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "setDesignated", "params": ["boolean"]}, "PersonnelBean.getMID()": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ViewVisitedHCPsAction.processOfficeVisits()", "ViewVisitedHCPsAction.declareHCP(String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "PersonnelDAO.editPersonnel(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getMID", "params": []}, "ViewVisitedHCPsAction.getVisitedHCPs()": {"calls": ["ViewVisitedHCPsAction.processOfficeVisits()", "HCPVisitBean.getHCPMID()"], "called_by": [], "class_name": "ViewVisitedHCPsAction", "method_name": "getVisitedHCPs", "params": []}, "HCPVisitBean.getHCPMID()": {"calls": [], "called_by": ["ViewVisitedHCPsAction.undeclareHCP(String)", "ViewVisitedHCPsAction.declareHCP(String)", "ViewVisitedHCPsAction.getVisitedHCPs()"], "class_name": "HCPVisitBean", "method_name": "getHCPMID", "params": []}, "ViewVisitedHCPsAction.undeclareHCP(String)": {"calls": ["HCPVisitBean.getHCPName()", "HCPVisitBean.getHCPMID()", "HCPVisitBean.setDesignated(boolean)", "DeclareHCPAction.undeclareHCP(String)", "HCPVisitBean.getOVDate()"], "called_by": [], "class_name": "ViewVisitedHCPsAction", "method_name": "undeclareHCP", "params": ["String"]}, "HCPVisitBean.getHCPName()": {"calls": [], "called_by": ["ViewVisitedHCPsAction.undeclareHCP(String)", "ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "getHCPName", "params": []}, "DeclareHCPAction.undeclareHCP(String)": {"calls": ["PatientDAO.undeclareHCP(long,long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": ["ViewVisitedHCPsAction.undeclareHCP(String)"], "class_name": "DeclareHCPAction", "method_name": "undeclareHCP", "params": ["String"]}, "HCPVisitBean.getOVDate()": {"calls": [], "called_by": ["ViewVisitedHCPsAction.undeclareHCP(String)"], "class_name": "HCPVisitBean", "method_name": "getOVDate", "params": []}, "ViewVisitedHCPsAction.declareHCP(String)": {"calls": ["PersonnelBean.getMID()", "HCPVisitBean.getHCPMID()", "HCPVisitBean.setHCPAddr(String)", "PersonnelBean.getCity()", "PersonnelBean.getSpecialty()", "PersonnelBean.getStreetAddress1()", "PersonnelBean.getFullName()", "HCPVisitBean.setDesignated(boolean)", "HCPVisitBean.setHCPMID(long)", "DeclareHCPAction.declareHCP(String)", "HCPVisitBean.getHCPName()", "HCPVisitBean.setHCPName(String)", "HCPVisitBean.setHCPSpecialty(String)", "PersonnelBean.getZip()", "HCPVisitBean.setOVDate(String)", "PatientDAO.checkDeclaredHCP(long,long)", "PersonnelBean.getStreetAddress2()", "PersonnelDAO.getAllPersonnel()", "PersonnelBean.getState()"], "called_by": [], "class_name": "ViewVisitedHCPsAction", "method_name": "declareHCP", "params": ["String"]}, "DeclareHCPAction.declareHCP(String)": {"calls": ["PatientDAO.declareHCP(long,long)", "AuthDAO.getUserRole(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": ["ViewVisitedHCPsAction.declareHCP(String)"], "class_name": "DeclareHCPAction", "method_name": "declareHCP", "params": ["String"]}, "PersonnelDAO.getAllPersonnel()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PersonnelLoader.loadList(ResultSet)"], "called_by": ["ViewVisitedHCPsAction.declareHCP(String)", "ViewVisitedHCPsAction.filterHCPList(String,String,String)"], "class_name": "PersonnelDAO", "method_name": "getAllPersonnel", "params": []}, "ViewVisitedHCPsAction.checkDeclared(long)": {"calls": ["PatientDAO.checkDeclaredHCP(long,long)"], "called_by": [], "class_name": "ViewVisitedHCPsAction", "method_name": "checkDeclared", "params": ["long"]}, "ViewVisitedHCPsAction.filterHCPList(String,String,String)": {"calls": ["PersonnelBean.getLastName()", "PersonnelBean.getZip()", "PersonnelDAO.getAllPersonnel()", "PersonnelBean.getSpecialty()"], "called_by": [], "class_name": "ViewVisitedHCPsAction", "method_name": "filterHCPList", "params": ["String", "String", "String"]}, "PersonnelBean.getLastName()": {"calls": [], "called_by": ["PersonnelBean.getFullName()", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "PersonnelValidator.validate(PersonnelBean)", "ViewVisitedHCPsAction.filterHCPList(String,String,String)", "AddPersonnelValidator.validate(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getLastName", "params": []}, "AddUAPAction.add(PersonnelBean)": {"calls": ["PersonnelBean.setPassword(String)", "PersonnelBean.setMID(long)", "PersonnelDAO.addEmptyPersonnel(Role)", "AuthDAO.addUser(Long,Role,String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "RandomPassword.getRandomPassword()", "AddPersonnelValidator.validate(PersonnelBean)", "PersonnelDAO.editPersonnel(PersonnelBean)"], "called_by": [], "class_name": "AddUAPAction", "method_name": "add", "params": ["PersonnelBean"]}, "UpdateICDCodeListAction.addICDCode(DiagnosisBean)": {"calls": ["ICDCodesDAO.addICDCode(DiagnosisBean)", "DiagnosisBean.getDescription()", "DBException.printStackTrace()", "DiagnosisBean.getICDCode()", "iTrustException.getMessage()", "DiagnosisBeanValidator.validate(DiagnosisBean)", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "UpdateICDCodeListAction", "method_name": "addICDCode", "params": ["DiagnosisBean"]}, "DiagnosisBeanValidator.validate(DiagnosisBean)": {"calls": ["DiagnosisBean.getDescription()", "ErrorList.hasErrors()", "DiagnosisBean.getICDCode()", "DiagnosisBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ErrorList.addIfNotNull(String)"], "called_by": ["DiagnosisBeanValidator.validate(Object)", "UpdateICDCodeListAction.updateInformation(DiagnosisBean)", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)"], "class_name": "DiagnosisBeanValidator", "method_name": "validate", "params": ["DiagnosisBean"]}, "ICDCodesDAO.addICDCode(DiagnosisBean)": {"calls": ["DiagnosisBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DiagnosisBean.getClassification()", "DiagnosisBean.getICDCode()", "DAOFactory.getConnection()"], "called_by": ["UpdateICDCodeListAction.addICDCode(DiagnosisBean)"], "class_name": "ICDCodesDAO", "method_name": "addICDCode", "params": ["DiagnosisBean"]}, "DiagnosisBean.getICDCode()": {"calls": [], "called_by": ["ICDCodesDAO.addICDCode(DiagnosisBean)", "DiagnosisBeanValidator.validate(DiagnosisBean)", "UpdateICDCodeListAction.updateInformation(DiagnosisBean)", "EditPHRAction.doesFamilyMemberHaveCancer(FamilyMemberBean)", "EditPHRAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)", "ICDCodesDAO.updateCode(DiagnosisBean)", "EditPHRAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)", "ViewMyRecordsAction.doesFamilyMemberHaveCancer(FamilyMemberBean)"], "class_name": "DiagnosisBean", "method_name": "getICDCode", "params": []}, "DiagnosisBean.getDescription()": {"calls": [], "called_by": ["ICDCodesDAO.addICDCode(DiagnosisBean)", "EditPHRAction.getFamilyMemberCOD(FamilyMemberBean)", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)", "DiagnosisBeanValidator.validate(DiagnosisBean)", "EmergencyReportAction.getWarningDiagnoses()", "ViewMyRecordsAction.getFamilyMemberCOD(FamilyMemberBean)", "ICDCodesDAO.updateCode(DiagnosisBean)"], "class_name": "DiagnosisBean", "method_name": "getDescription", "params": []}, "iTrustException.getMessage()": {"calls": [], "called_by": ["ViewOfficeVisitAction.getHCPName(long)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "UpdateICDCodeListAction.addICDCode(DiagnosisBean)", "UpdateHospitalListAction.addHospital(HospitalBean)", "EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "iTrustException", "method_name": "getMessage", "params": []}, "UpdateICDCodeListAction.updateInformation(DiagnosisBean)": {"calls": ["DBException.printStackTrace()", "DiagnosisBean.getICDCode()", "DiagnosisBeanValidator.validate(DiagnosisBean)", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "ICDCodesDAO.updateCode(DiagnosisBean)"], "called_by": [], "class_name": "UpdateICDCodeListAction", "method_name": "updateInformation", "params": ["DiagnosisBean"]}, "ICDCodesDAO.updateCode(DiagnosisBean)": {"calls": ["DiagnosisBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DiagnosisBean.getClassification()", "DiagnosisBean.getICDCode()", "DAOFactory.getConnection()"], "called_by": ["UpdateICDCodeListAction.updateInformation(DiagnosisBean)"], "class_name": "ICDCodesDAO", "method_name": "updateCode", "params": ["DiagnosisBean"]}, "ViewPrescriptionRecordsAction.getPatient(long)": {"calls": ["PatientDAO.getPatient(long)"], "called_by": [], "class_name": "ViewPrescriptionRecordsAction", "method_name": "getPatient", "params": ["long"]}, "ViewPrescriptionRecordsAction.getRepresentees()": {"calls": ["PatientDAO.getRepresented(long)"], "called_by": [], "class_name": "ViewPrescriptionRecordsAction", "method_name": "getRepresentees", "params": []}, "PatientDAO.getRepresented(long)": {"calls": ["PatientLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditRepresentativesAction.getRepresented(long)", "ViewMyRecordsAction.getRepresented()", "SendMessageAction.getMyRepresentees()", "ViewPrescriptionRecordsAction.getRepresentees()", "ViewExpiredPrescriptionsAction.getRepresentees()"], "class_name": "PatientDAO", "method_name": "getRepresented", "params": ["long"]}, "ViewPrescriptionRecordsAction.getPrescribingDoctor(PrescriptionBean)": {"calls": ["PersonnelDAO.getPrescribingDoctor(PrescriptionBean)"], "called_by": [], "class_name": "ViewPrescriptionRecordsAction", "method_name": "getPrescribingDoctor", "params": ["PrescriptionBean"]}, "PersonnelDAO.getPrescribingDoctor(PrescriptionBean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "PersonnelLoader.loadList(ResultSet)", "PrescriptionBean.getVisitID()", "DAOFactory.getConnection()"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescribingDoctor(PrescriptionBean)", "ViewPrescriptionRecordsAction.getPrescribingDoctor(PrescriptionBean)"], "class_name": "PersonnelDAO", "method_name": "getPrescribingDoctor", "params": ["PrescriptionBean"]}, "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)": {"calls": ["Email.setSubject(String)", "PersonnelBean.getMID()", "Email.setToList(List)", "PatientDAO.getPrescriptions(long)", "PatientDAO.getPatient(long)", "PatientDAO.getRepresenting(long)", "Messages.getString(String)", "PatientDAO.getDeclaredHCPs(long)", "PatientBean.getEmail()", "Email.setFrom(String)", "PersonnelDAO.getUAPsForHCP(long)", "Email.setBody(String)", "PatientBean.getMID()", "TransactionDAO.logTransaction(TransactionType,long)", "EmailUtil.sendEmail(Email)"], "called_by": [], "class_name": "ViewPrescriptionRecordsAction", "method_name": "getPrescriptionsForPatient", "params": ["long"]}, "TransactionDAO.logTransaction(TransactionType,long)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "DrugInteractionAction.reportInteraction(String,String,String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "MyDiagnosisAction.getHCPByDiagnosis(String)", "ReportAdverseEventAction.sendMails(List)", "SendMessageAction.sendMessage(MessageBean)", "ReferralManagementAction.sendReferral(ReferralBean)", "ViewPatientOfficeVisitHistoryAction.getPatients()", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)", "ViewMyRemoteMonitoringListAction.getPatientsData()", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,String,String)", "DrugInteractionAction.deleteInteraction(String,String)", "EditPersonnelAction.updateInformation(PersonnelBean)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "ReportAdverseEventAction.addReport(AdverseEventBean)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "TransactionDAO", "method_name": "logTransaction", "params": ["TransactionType", "long"]}, "PatientDAO.getPrescriptions(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PrescriptionBeanLoader.loadList(ResultSet)"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)"], "class_name": "PatientDAO", "method_name": "getPrescriptions", "params": ["long"]}, "PatientBean.getEmail()": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ResetPasswordAction.makeEmailApp(long,String)", "AddPatientValidator.validate(PatientBean)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "MonitorAdverseEventAction.sendEmail(long,String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EditPatientAction.makeEmail()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)", "ReportAdverseEventAction.sendMails(List)", "EditPHRAction.makeEmail()", "SendMessageAction.sendMessage(MessageBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "EmergencyReportAction.makeEmail()", "ViewMyRecordsAction.getEmailHistory()", "EditOfficeVisitAction.makeEmailApp(long,String,String)", "PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getEmail", "params": []}, "PatientDAO.getRepresenting(long)": {"calls": ["PatientLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EditPatientAction.makeEmail()", "EmergencyReportAction.makeEmail()", "EditPHRAction.makeEmail()", "ViewMyRecordsAction.getRepresenting()"], "class_name": "PatientDAO", "method_name": "getRepresenting", "params": ["long"]}, "PatientBean.getMID()": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "Type1DiabetesRisks.getDiseaseRiskFactors()", "EditPHRAction.makeEmail()", "PatientDAO.editPatient(PatientBean)", "Type2DiabetesRisks.getDiseaseRiskFactors()", "EmergencyReportAction.makeEmail()", "HeartDiseaseRisks.getDiseaseRiskFactors()"], "class_name": "PatientBean", "method_name": "getMID", "params": []}, "PersonnelDAO.getUAPsForHCP(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PersonnelLoader.loadList(ResultSet)"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)"], "class_name": "PersonnelDAO", "method_name": "getUAPsForHCP", "params": ["long"]}, "Email.setToList(List)": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ResetPasswordAction.makeEmailApp(long,String)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "MonitorAdverseEventAction.sendEmail(long,String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EmailBeanLoader.loadSingle(ResultSet)", "EditPatientAction.makeEmail()", "ReportAdverseEventAction.sendMails(List)", "EditPHRAction.makeEmail()", "SendMessageAction.sendMessage(MessageBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "EmergencyReportAction.makeEmail()", "EditOfficeVisitAction.makeEmailApp(long,String,String)"], "class_name": "Email", "method_name": "setToList", "params": ["List"]}, "Email.setFrom(String)": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ResetPasswordAction.makeEmailApp(long,String)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "MonitorAdverseEventAction.sendEmail(long,String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EmailBeanLoader.loadSingle(ResultSet)", "EditPatientAction.makeEmail()", "ReportAdverseEventAction.sendMails(List)", "EditPHRAction.makeEmail()", "SendMessageAction.sendMessage(MessageBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "EmergencyReportAction.makeEmail()", "EditOfficeVisitAction.makeEmailApp(long,String,String)"], "class_name": "Email", "method_name": "setFrom", "params": ["String"]}, "Email.setSubject(String)": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ResetPasswordAction.makeEmailApp(long,String)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EmailBeanLoader.loadSingle(ResultSet)", "EditPatientAction.makeEmail()", "ReportAdverseEventAction.sendMails(List)", "EditPHRAction.makeEmail()", "SendMessageAction.sendMessage(MessageBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "EmergencyReportAction.makeEmail()", "EditOfficeVisitAction.makeEmailApp(long,String,String)"], "class_name": "Email", "method_name": "setSubject", "params": ["String"]}, "Email.setBody(String)": {"calls": [], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)", "ResetPasswordAction.makeEmailApp(long,String)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "MonitorAdverseEventAction.sendEmail(long,String)", "ViewPrescriptionRecordsAction.getPrescriptionsForPatient(long)", "EmailBeanLoader.loadSingle(ResultSet)", "EditPatientAction.makeEmail()", "ReportAdverseEventAction.sendMails(List)", "EditPHRAction.makeEmail()", "SendMessageAction.sendMessage(MessageBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "EmergencyReportAction.makeEmail()", "EditOfficeVisitAction.makeEmailApp(long,String,String)"], "class_name": "Email", "method_name": "setBody", "params": ["String"]}, "UpdateNDCodeListAction.addNDCode(MedicationBean)": {"calls": ["DBException.printStackTrace()", "NDCodesDAO.addNDCode(MedicationBean)", "MedicationBeanValidator.validate(MedicationBean)", "MedicationBean.getDescription()", "iTrustException.getMessage()", "MedicationBean.getNDCode()", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "UpdateNDCodeListAction", "method_name": "addNDCode", "params": ["MedicationBean"]}, "MedicationBeanValidator.validate(MedicationBean)": {"calls": ["ErrorList.hasErrors()", "MedicationBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "MedicationBean.getDescription()", "MedicationBean.getNDCode()", "ErrorList.addIfNotNull(String)"], "called_by": ["UpdateNDCodeListAction.updateInformation(MedicationBean)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "MedicationBeanValidator.validate(Object)"], "class_name": "MedicationBeanValidator", "method_name": "validate", "params": ["MedicationBean"]}, "NDCodesDAO.addNDCode(MedicationBean)": {"calls": ["DAOFactory.getConnection()", "MedicationBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "MedicationBean.getNDCode()"], "called_by": ["UpdateNDCodeListAction.addNDCode(MedicationBean)"], "class_name": "NDCodesDAO", "method_name": "addNDCode", "params": ["MedicationBean"]}, "MedicationBean.getNDCode()": {"calls": [], "called_by": ["MedicationBean.getNDCodeFormatted()", "MedicationBeanValidator.validate(MedicationBean)", "EditOfficeVisitAction.hasInteraction(String,String,String,String)", "NDCodesDAO.updateCode(MedicationBean)", "PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)", "NDCodesDAO.addNDCode(MedicationBean)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "EmergencyReportAction.getCurrentPrescriptions()", "EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "UpdateNDCodeListAction.updateInformation(MedicationBean)"], "class_name": "MedicationBean", "method_name": "getNDCode", "params": []}, "MedicationBean.getDescription()": {"calls": [], "called_by": ["NDCodesDAO.addNDCode(MedicationBean)", "EditOfficeVisitAction.isAllergyOnList(String,String)", "UpdateNDCodeListAction.addNDCode(MedicationBean)", "MedicationBeanValidator.validate(MedicationBean)", "MyDiagnosisAction.getHCPByDiagnosis(String)", "EditOfficeVisitAction.hasInteraction(String,String,String,String)", "NDCodesDAO.updateCode(MedicationBean)"], "class_name": "MedicationBean", "method_name": "getDescription", "params": []}, "UpdateNDCodeListAction.updateInformation(MedicationBean)": {"calls": ["DBException.printStackTrace()", "UpdateNDCodeListAction.updateCode(MedicationBean)", "MedicationBeanValidator.validate(MedicationBean)", "MedicationBean.getNDCode()", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "UpdateNDCodeListAction", "method_name": "updateInformation", "params": ["MedicationBean"]}, "UpdateNDCodeListAction.updateCode(MedicationBean)": {"calls": ["NDCodesDAO.updateCode(MedicationBean)"], "called_by": ["UpdateNDCodeListAction.updateInformation(MedicationBean)"], "class_name": "UpdateNDCodeListAction", "method_name": "updateCode", "params": ["MedicationBean"]}, "NDCodesDAO.updateCode(MedicationBean)": {"calls": ["DAOFactory.getConnection()", "MedicationBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "MedicationBean.getNDCode()"], "called_by": ["UpdateNDCodeListAction.updateCode(MedicationBean)"], "class_name": "NDCodesDAO", "method_name": "updateCode", "params": ["MedicationBean"]}, "AddOfficeVisitAction.addEmptyOfficeVisit(long)": {"calls": ["OfficeVisitBean.setHcpID(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "OfficeVisitBean.setPatientID(long)", "OfficeVisitDAO.add(OfficeVisitBean)"], "called_by": [], "class_name": "AddOfficeVisitAction", "method_name": "addEmptyOfficeVisit", "params": ["long"]}, "OfficeVisitBean.setHcpID(long)": {"calls": [], "called_by": ["AddOfficeVisitAction.addEmptyOfficeVisit(long)", "OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "OfficeVisitLoader.loadSingle(ResultSet)"], "class_name": "OfficeVisitBean", "method_name": "setHcpID", "params": ["long"]}, "OfficeVisitBean.setPatientID(long)": {"calls": [], "called_by": ["AddOfficeVisitAction.addEmptyOfficeVisit(long)", "OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "OfficeVisitLoader.loadSingle(ResultSet)"], "class_name": "OfficeVisitBean", "method_name": "setPatientID", "params": ["long"]}, "OfficeVisitDAO.add(OfficeVisitBean)": {"calls": ["OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)", "DBUtil.closeConnection(Connection,PreparedStatement)", "DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()"], "called_by": ["AddOfficeVisitAction.addEmptyOfficeVisit(long)"], "class_name": "OfficeVisitDAO", "method_name": "add", "params": ["OfficeVisitBean"]}, "AddOfficeVisitAction.getAllOfficeVisits()": {"calls": ["OfficeVisitDAO.getAllOfficeVisits(long)"], "called_by": [], "class_name": "AddOfficeVisitAction", "method_name": "getAllOfficeVisits", "params": []}, "AddOfficeVisitAction.getUserName()": {"calls": ["DAOFactory.getAuthDAO()", "AuthDAO.getUserName(long)"], "called_by": [], "class_name": "AddOfficeVisitAction", "method_name": "getUserName", "params": []}, "DAOFactory.getAuthDAO()": {"calls": [], "called_by": ["GetUserNameAction.getUserName(String)", "AddOfficeVisitAction.getUserName()"], "class_name": "DAOFactory", "method_name": "getAuthDAO", "params": []}, "AuthDAO.getUserName(long)": {"calls": ["PatientDAO.getName(long)", "AuthDAO.getUserRole(long)", "Role.ordinal()", "PersonnelDAO.getName(long)", "DAOFactory.getPersonnelDAO()", "DAOFactory.getPatientDAO()"], "called_by": ["GetUserNameAction.getUserName(String)", "ViewMyRemoteMonitoringListAction.getPatientName(long)", "AddRemoteMonitoringDataAction.getPatientName(long)", "EditHealthHistoryAction.getPatientName()", "ChronicDiseaseRiskAction.getUserName()", "EditMonitoringListAction.getPatientName(long)", "AddOfficeVisitAction.getUserName()"], "class_name": "AuthDAO", "method_name": "getUserName", "params": ["long"]}, "LabProcUAPAction.updateProcedure(LabProcedureBean)": {"calls": ["LabProcedureDAO.getLabProcedure(long)", "LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "LabProcedureBean.getPid()", "LabProcedureValidator.validate(LabProcedureBean)", "LabProcedureBean.getStatus()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "EmailUtil.sendEmail(Email)", "LabProcedureBean.getProcedureID()"], "called_by": [], "class_name": "LabProcUAPAction", "method_name": "updateProcedure", "params": ["LabProcedureBean"]}, "LabProcedureBean.getStatus()": {"calls": [], "called_by": ["LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "LabProcedureValidator.validate(LabProcedureBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)", "LabProcUAPAction.updateProcedure(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getStatus", "params": []}, "LabProcUAPAction.makeEmail(LabProcedureBean)": {"calls": ["Email.setSubject(String)", "Email.setToList(List)", "PatientBean.getFullName()", "LabProcedureBean.getPid()", "PatientDAO.getPatient(long)", "PatientBean.getEmail()", "LabProcedureBean.getLoinc()", "Email.setFrom(String)", "LabProcedureBean.getStatus()", "Email.setBody(String)"], "called_by": ["LabProcUAPAction.updateProcedure(LabProcedureBean)"], "class_name": "LabProcUAPAction", "method_name": "makeEmail", "params": ["LabProcedureBean"]}, "LabProcedureDAO.updateLabProcedure(LabProcedureBean)": {"calls": ["LabProcedureBean.getCommentary()", "LabProcedureBean.getPid()", "LabProcedureBean.getStatus()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "LabProcedureBean.getResults()", "LabProcedureBean.getProcedureID()"], "called_by": ["LabProcUAPAction.updateProcedure(LabProcedureBean)"], "class_name": "LabProcedureDAO", "method_name": "updateLabProcedure", "params": ["LabProcedureBean"]}, "PatientBean.getFullName()": {"calls": ["PatientBean.getLastName()", "PatientBean.getFirstName()"], "called_by": ["ResetPasswordAction.makeEmailApp(long,String)", "LabProcUAPAction.makeEmail(LabProcedureBean)", "EditPatientAction.makeEmail()", "EmergencyReportAction.makeEmail()", "ViewPatientOfficeVisitHistoryAction.PatientInList(PatientBean,String)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "PatientBean", "method_name": "getFullName", "params": []}, "LabProcedureBean.getLoinc()": {"calls": [], "called_by": ["LabProcUAPAction.makeEmail(LabProcedureBean)", "LabProcedureValidator.validate(LabProcedureBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getLoinc", "params": []}, "LabProcUAPAction.viewProcedures(long)": {"calls": ["LabProcedureDAO.getAllLabProceduresDate(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "LabProcUAPAction", "method_name": "viewProcedures", "params": ["long"]}, "LabProcedureDAO.getAllLabProceduresDate(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["LabProcUAPAction.viewProcedures(long)"], "class_name": "LabProcedureDAO", "method_name": "getAllLabProceduresDate", "params": ["long"]}, "ViewMyMessagesAction.getAllMyMessages()": {"calls": ["MessageDAO.getMessagesFor(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMyMessages", "params": []}, "MessageDAO.getMessagesFor(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMyMessages()"], "class_name": "MessageDAO", "method_name": "getMessagesFor", "params": ["long"]}, "ViewMyMessagesAction.getAllMyMessagesTimeAscending()": {"calls": ["MessageDAO.getMessagesTimeAscending(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMyMessagesTimeAscending", "params": []}, "MessageDAO.getMessagesTimeAscending(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMyMessagesTimeAscending()"], "class_name": "MessageDAO", "method_name": "getMessagesTimeAscending", "params": ["long"]}, "ViewMyMessagesAction.getAllMyMessagesNameAscending()": {"calls": ["MessageDAO.getMessagesNameAscending(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMyMessagesNameAscending", "params": []}, "MessageDAO.getMessagesNameAscending(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMyMessagesNameAscending()"], "class_name": "MessageDAO", "method_name": "getMessagesNameAscending", "params": ["long"]}, "ViewMyMessagesAction.getAllMyMessagesNameDescending()": {"calls": ["MessageDAO.getMessagesNameDescending(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMyMessagesNameDescending", "params": []}, "MessageDAO.getMessagesNameDescending(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMyMessagesNameDescending()"], "class_name": "MessageDAO", "method_name": "getMessagesNameDescending", "params": ["long"]}, "ViewMyMessagesAction.getAllMySentMessages()": {"calls": ["MessageDAO.getMessagesFrom(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMySentMessages", "params": []}, "MessageDAO.getMessagesFrom(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMySentMessages()"], "class_name": "MessageDAO", "method_name": "getMessagesFrom", "params": ["long"]}, "ViewMyMessagesAction.getAllMySentMessagesTimeAscending()": {"calls": ["MessageDAO.getMessagesFromTimeAscending(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMySentMessagesTimeAscending", "params": []}, "MessageDAO.getMessagesFromTimeAscending(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMySentMessagesTimeAscending()"], "class_name": "MessageDAO", "method_name": "getMessagesFromTimeAscending", "params": ["long"]}, "ViewMyMessagesAction.getAllMySentMessagesNameAscending()": {"calls": ["MessageDAO.getMessagesFromNameAscending(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMySentMessagesNameAscending", "params": []}, "MessageDAO.getMessagesFromNameAscending(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMySentMessagesNameAscending()"], "class_name": "MessageDAO", "method_name": "getMessagesFromNameAscending", "params": ["long"]}, "ViewMyMessagesAction.getAllMySentMessagesNameDescending()": {"calls": ["MessageDAO.getMessagesFromNameDescending(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getAllMySentMessagesNameDescending", "params": []}, "MessageDAO.getMessagesFromNameDescending(long)": {"calls": ["DAOFactory.getConnection()", "MessageBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.getAllMySentMessagesNameDescending()"], "class_name": "MessageDAO", "method_name": "getMessagesFromNameDescending", "params": ["long"]}, "ViewMyMessagesAction.filterMessages(List,String)": {"calls": ["ViewMyMessagesAction.getName(long)", "MessageBean.getBody()", "MessageBean.getFrom()", "MessageBean.getSubject()", "MessageBean.getSentDate()"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "filterMessages", "params": ["List", "String"]}, "MessageBean.getFrom()": {"calls": [], "called_by": ["ViewMyMessagesAction.filterMessages(List,String)", "MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "MessageBean", "method_name": "getFrom", "params": []}, "ViewMyMessagesAction.getName(long)": {"calls": ["PatientDAO.getName(long)", "PersonnelDAO.getName(long)"], "called_by": ["ViewMyMessagesAction.filterMessages(List,String)"], "class_name": "ViewMyMessagesAction", "method_name": "getName", "params": ["long"]}, "MessageBean.getSubject()": {"calls": [], "called_by": ["ViewMyMessagesAction.filterMessages(List,String)", "MessageValidator.validate(MessageBean)", "MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)"], "class_name": "MessageBean", "method_name": "getSubject", "params": []}, "MessageBean.getBody()": {"calls": [], "called_by": ["EMailValidator.validate(MessageBean)", "ViewMyMessagesAction.filterMessages(List,String)", "MessageValidator.validate(MessageBean)", "MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)"], "class_name": "MessageBean", "method_name": "getBody", "params": []}, "MessageBean.getSentDate()": {"calls": [], "called_by": ["ViewMyMessagesAction.filterMessages(List,String)"], "class_name": "MessageBean", "method_name": "getSentDate", "params": []}, "ViewMyMessagesAction.getPersonnelName(long)": {"calls": ["PersonnelDAO.getName(long)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "getPersonnelName", "params": ["long"]}, "ViewMyMessagesAction.setRead(MessageBean)": {"calls": ["DBException.printStackTrace()", "MessageDAO.updateRead(MessageBean)"], "called_by": [], "class_name": "ViewMyMessagesAction", "method_name": "setRead", "params": ["MessageBean"]}, "MessageDAO.updateRead(MessageBean)": {"calls": ["MessageBean.getMessageId()", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyMessagesAction.setRead(MessageBean)"], "class_name": "MessageDAO", "method_name": "updateRead", "params": ["MessageBean"]}, "ViewAdverseEventAction.getAdverseEvent(int)": {"calls": ["AdverseEventDAO.getReport(int)"], "called_by": [], "class_name": "ViewAdverseEventAction", "method_name": "getAdverseEvent", "params": ["int"]}, "AdverseEventDAO.getReport(int)": {"calls": ["DAOFactory.getConnection()", "AdverseEventBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["MonitorAdverseEventAction.remove(int)", "ViewAdverseEventAction.getAdverseEvent(int)"], "class_name": "AdverseEventDAO", "method_name": "getReport", "params": ["int"]}, "ViewAdverseEventAction.getUnremovedAdverseEventsByCode(String)": {"calls": ["AdverseEventDAO.getUnremovedAdverseEventsByCode(String)"], "called_by": [], "class_name": "ViewAdverseEventAction", "method_name": "getUnremovedAdverseEventsByCode", "params": ["String"]}, "AdverseEventDAO.getUnremovedAdverseEventsByCode(String)": {"calls": ["DAOFactory.getConnection()", "AdverseEventBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewAdverseEventAction.getUnremovedAdverseEventsByCode(String)"], "class_name": "AdverseEventDAO", "method_name": "getUnremovedAdverseEventsByCode", "params": ["String"]}, "ViewAdverseEventAction.getNameForCode(String)": {"calls": ["AdverseEventDAO.getNameForCode(String)"], "called_by": [], "class_name": "ViewAdverseEventAction", "method_name": "getNameForCode", "params": ["String"]}, "AdverseEventDAO.getNameForCode(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewAdverseEventAction.getNameForCode(String)"], "class_name": "AdverseEventDAO", "method_name": "getNameForCode", "params": ["String"]}, "AddApptAction.addAppt(ApptBean)": {"calls": ["DBException.printStackTrace()", "ApptBeanValidator.validate(ApptBean)", "ApptBean.getDate()", "ApptDAO.scheduleAppt(ApptBean)", "ApptBean.getApptType()", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "AddApptAction", "method_name": "addAppt", "params": ["ApptBean"]}, "ApptBeanValidator.validate(ApptBean)": {"calls": ["ErrorList.hasErrors()", "ApptBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ApptBean.getComment()", "ErrorList.addIfNotNull(String)"], "called_by": ["AddApptAction.addAppt(ApptBean)", "ApptBeanValidator.validate(Object)"], "class_name": "ApptBeanValidator", "method_name": "validate", "params": ["ApptBean"]}, "ApptBean.getDate()": {"calls": [], "called_by": ["GenerateCalendarAction.getConflicts()", "AddApptAction.addAppt(ApptBean)", "GenerateCalendarAction.getApptsTable(int,int)", "ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)"], "class_name": "ApptBean", "method_name": "getDate", "params": []}, "ApptDAO.scheduleAppt(ApptBean)": {"calls": ["DAOFactory.getConnection()", "ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["AddApptAction.addAppt(ApptBean)"], "class_name": "ApptDAO", "method_name": "scheduleAppt", "params": ["ApptBean"]}, "ApptBean.getApptType()": {"calls": [], "called_by": ["GenerateCalendarAction.getConflicts()", "AddApptAction.addAppt(ApptBean)", "ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)"], "class_name": "ApptBean", "method_name": "getApptType", "params": []}, "AddApptAction.getName(long)": {"calls": ["PatientDAO.getName(long)", "PersonnelDAO.getName(long)"], "called_by": [], "class_name": "AddApptAction", "method_name": "getName", "params": ["long"]}, "EmergencyReportAction.getPatientName()": {"calls": ["PatientBean.getLastName()", "PatientBean.getFirstName()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getPatientName", "params": []}, "PatientBean.getFirstName()": {"calls": [], "called_by": ["AddPatientValidator.validate(PatientBean)", "PatientBean.getFullName()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)", "EmergencyReportAction.getPatientName()", "PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getFirstName", "params": []}, "PatientBean.getLastName()": {"calls": [], "called_by": ["AddPatientValidator.validate(PatientBean)", "PatientBean.getFullName()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)", "EmergencyReportAction.getPatientName()", "PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getLastName", "params": []}, "EmergencyReportAction.getPatientAge()": {"calls": ["PatientBean.getAge()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getPatientAge", "params": []}, "PatientBean.getAge()": {"calls": [], "called_by": ["AgeFactor.hasFactor()", "Type2DiabetesRisks.qualifiesForDisease()", "Type1DiabetesRisks.qualifiesForDisease()", "EmergencyReportAction.getPatientAge()"], "class_name": "PatientBean", "method_name": "getAge", "params": []}, "EmergencyReportAction.getPatientGender()": {"calls": ["Gender.toString()", "PatientBean.getGender()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getPatientGender", "params": []}, "Gender.toString()": {"calls": ["Gender.getName()"], "called_by": ["GenderFactor.getDescription()", "EmergencyReportAction.getPatientGender()", "BeanValidator.checkGender(String,Gender,ValidationFormat,boolean)"], "class_name": "Gender", "method_name": "toString", "params": []}, "EmergencyReportAction.getPatientEmergencyContact()": {"calls": ["PatientBean.getEmergencyName()", "PatientBean.getEmergencyPhone()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getPatientEmergencyContact", "params": []}, "PatientBean.getEmergencyName()": {"calls": [], "called_by": ["EmergencyReportAction.getPatientEmergencyContact()", "PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getEmergencyName", "params": []}, "PatientBean.getEmergencyPhone()": {"calls": ["PatientBean.getEmergencyPhone1()", "PatientBean.getEmergencyPhone2()", "PatientBean.getEmergencyPhone3()"], "called_by": ["EmergencyReportAction.getPatientEmergencyContact()", "PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getEmergencyPhone", "params": []}, "EmergencyReportAction.getBloodType()": {"calls": ["PatientBean.getBloodType()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getBloodType", "params": []}, "PatientBean.getBloodType()": {"calls": [], "called_by": ["EmergencyReportAction.getBloodType()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getBloodType", "params": []}, "EmergencyReportAction.getAllergies()": {"calls": ["AllergyDAO.getAllergies(long)"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getAllergies", "params": []}, "AllergyDAO.getAllergies(long)": {"calls": ["AllergyBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditPHRAction.getAllergies()", "EditOfficeVisitAction.isAllergyOnList(String,String)", "EmergencyReportAction.getAllergies()", "ViewMyRecordsAction.getAllergies()"], "class_name": "AllergyDAO", "method_name": "getAllergies", "params": ["long"]}, "EmergencyReportAction.getCurrentPrescriptions()": {"calls": ["PatientDAO.getCurrentPrescriptions(long)", "MedicationBean.getNDCode()", "PrescriptionBean.getMedication()", "PrescriptionAlerts.isAlert(String)"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getCurrentPrescriptions", "params": []}, "PatientDAO.getCurrentPrescriptions(long)": {"calls": ["DateUtil.getSQLdateXDaysAgoFromNow(int)", "DBUtil.closeConnection(Connection,PreparedStatement)", "PrescriptionBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()"], "called_by": ["EmergencyReportAction.getCurrentPrescriptions()", "ViewReportAction.getPrescriptions(long)"], "class_name": "PatientDAO", "method_name": "getCurrentPrescriptions", "params": ["long"]}, "PrescriptionBean.getMedication()": {"calls": [], "called_by": ["EmergencyReportAction.getCurrentPrescriptions()", "MyDiagnosisAction.getHCPByDiagnosis(String)", "EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitAction.hasInteraction(String,String,String,String)", "PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getMedication", "params": []}, "PrescriptionAlerts.isAlert(String)": {"calls": ["PrescriptionAlerts.getNDCode()", "PrescriptionAlerts.values()"], "called_by": ["EmergencyReportAction.getCurrentPrescriptions()"], "class_name": "PrescriptionAlerts", "method_name": "isAlert", "params": ["String"]}, "EmergencyReportAction.getWarningDiagnoses()": {"calls": ["DiagnosisBean.getDescription()", "PatientDAO.getDiagnoses(long)", "OfficeVisitBean.getVisitDate()", "DiagnosisBean.getVisitID()", "DiagnosisBean.getClassification()", "OfficeVisitDAO.getOfficeVisit(long)", "DBException.getMessage()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getWarningDiagnoses", "params": []}, "PatientDAO.getDiagnoses(long)": {"calls": ["DiagnosisBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewReportAction.getDiagnoses(long)", "EditPHRAction.doesFamilyMemberHaveCancer(FamilyMemberBean)", "EditPHRAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)", "EmergencyReportAction.getWarningDiagnoses()", "EditPHRAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)", "MyDiagnosisAction.getDiagnoses()", "ViewMyRecordsAction.doesFamilyMemberHaveCancer(FamilyMemberBean)"], "class_name": "PatientDAO", "method_name": "getDiagnoses", "params": ["long"]}, "DiagnosisBean.getVisitID()": {"calls": [], "called_by": ["EmergencyReportAction.getWarningDiagnoses()", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)"], "class_name": "DiagnosisBean", "method_name": "getVisitID", "params": []}, "DiagnosisBean.getClassification()": {"calls": [], "called_by": ["ICDCodesDAO.addICDCode(DiagnosisBean)", "EmergencyReportAction.getWarningDiagnoses()", "ICDCodesDAO.updateCode(DiagnosisBean)"], "class_name": "DiagnosisBean", "method_name": "getClassification", "params": []}, "OfficeVisitBean.getVisitDate()": {"calls": [], "called_by": ["GenerateCalendarAction.getOfficeVisitsTable(int,int)", "OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)", "EmergencyReportAction.getWarningDiagnoses()"], "class_name": "OfficeVisitBean", "method_name": "getVisitDate", "params": []}, "EmergencyReportAction.getImmunizations()": {"calls": ["PatientDAO.getImmunizationProcedures(long)"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "getImmunizations", "params": []}, "PatientDAO.getImmunizationProcedures(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["EmergencyReportAction.getImmunizations()"], "class_name": "PatientDAO", "method_name": "getImmunizationProcedures", "params": ["long"]}, "EmergencyReportAction.makeEmail()": {"calls": ["Email.setFrom(String)", "Email.setToList(List)", "Email.setSubject(String)", "PatientBean.getFullName()", "PatientDAO.getRepresenting(long)", "Email.setBody(String)", "PatientBean.getMID()", "PatientBean.getEmail()"], "called_by": [], "class_name": "EmergencyReportAction", "method_name": "makeEmail", "params": []}, "ViewMyAccessLogAction.getAccesses(String,String,boolean)": {"calls": ["TransactionDAO.getAllRecordAccesses(long,boolean)", "TransactionDAO.getRecordAccesses(long,Date,Date,boolean)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "ViewMyAccessLogAction", "method_name": "getAccesses", "params": ["String", "String", "boolean"]}, "TransactionDAO.getAllRecordAccesses(long,boolean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "TransactionDAO.addAndSortRoles(List,long,boolean)", "TransactionBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()"], "called_by": ["ViewMyAccessLogAction.getAccesses(String,String,boolean)"], "class_name": "TransactionDAO", "method_name": "getAllRecordAccesses", "params": ["long", "boolean"]}, "TransactionDAO.getRecordAccesses(long,Date,Date,boolean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "TransactionDAO.addAndSortRoles(List,long,boolean)", "TransactionBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()"], "called_by": ["ViewMyAccessLogAction.getAccesses(String,String,boolean)"], "class_name": "TransactionDAO", "method_name": "getRecordAccesses", "params": ["long", "Date", "Date", "boolean"]}, "ViewMyAccessLogAction.getDefaultStart(List)": {"calls": ["TransactionBean.getTimeLogged()"], "called_by": [], "class_name": "ViewMyAccessLogAction", "method_name": "getDefaultStart", "params": ["List"]}, "TransactionBean.getTimeLogged()": {"calls": [], "called_by": ["ViewMyAccessLogAction.getDefaultEnd(List)", "ViewMyAccessLogAction.getDefaultStart(List)"], "class_name": "TransactionBean", "method_name": "getTimeLogged", "params": []}, "ViewMyAccessLogAction.getDefaultEnd(List)": {"calls": ["TransactionBean.getTimeLogged()"], "called_by": [], "class_name": "ViewMyAccessLogAction", "method_name": "getDefaultEnd", "params": ["List"]}, "ViewMyRemoteMonitoringListAction.getPatientsData()": {"calls": ["RemoteMonitoringDAO.getPatientsData(long)", "TransactionDAO.logTransaction(TransactionType,long)"], "called_by": [], "class_name": "ViewMyRemoteMonitoringListAction", "method_name": "getPatientsData", "params": []}, "RemoteMonitoringDAO.getPatientsData(long)": {"calls": ["RemoteMonitoringDataBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)", "RemoteMonitoringDataBean.getPatientMID()", "DAOFactory.getConnection()"], "called_by": ["ViewMyRemoteMonitoringListAction.getPatientsData()", "ViewMyRemoteMonitoringListAction.getPatientDataWithoutLogging()", "EditMonitoringListAction.isPatientInList(long)"], "class_name": "RemoteMonitoringDAO", "method_name": "getPatientsData", "params": ["long"]}, "ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,String,String)": {"calls": ["RemoteMonitoringDAO.getPatientDataByDate(long,Date,Date)", "TransactionDAO.logTransaction(TransactionType,long)"], "called_by": [], "class_name": "ViewMyRemoteMonitoringListAction", "method_name": "getPatientDataByDate", "params": ["long", "String", "String"]}, "RemoteMonitoringDAO.getPatientDataByDate(long,Date,Date)": {"calls": ["DAOFactory.getConnection()", "RemoteMonitoringDataBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyRemoteMonitoringListAction.getPatientDataByDate(long,String,String)"], "class_name": "RemoteMonitoringDAO", "method_name": "getPatientDataByDate", "params": ["long", "Date", "Date"]}, "ViewMyRemoteMonitoringListAction.getPatientDataWithoutLogging()": {"calls": ["RemoteMonitoringDAO.getPatientsData(long)"], "called_by": [], "class_name": "ViewMyRemoteMonitoringListAction", "method_name": "getPatientDataWithoutLogging", "params": []}, "ViewMyRemoteMonitoringListAction.getPatientName(long)": {"calls": ["AuthDAO.getUserName(long)"], "called_by": [], "class_name": "ViewMyRemoteMonitoringListAction", "method_name": "getPatientName", "params": ["long"]}, "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)": {"calls": ["Role.getUserRolesString()", "RemoteMonitoringDataBean.setDiastolicBloodPressure(int)", "AuthDAO.getUserRole(long)", "RemoteMonitoringDataBean.setSystolicBloodPressure(int)", "RemoteMonitoringDataBean.setGlucoseLevel(int)", "RemoteMonitoringDAO.storePatientData(long,int,String,long)", "TransactionDAO.logTransaction(TransactionType,long)", "RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "called_by": [], "class_name": "AddRemoteMonitoringDataAction", "method_name": "addRemoteMonitoringData", "params": ["int"]}, "RemoteMonitoringDataBean.setGlucoseLevel(int)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setGlucoseLevel", "params": ["int"]}, "RemoteMonitoringDataBean.setDiastolicBloodPressure(int)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setDiastolicBloodPressure", "params": ["int"]}, "RemoteMonitoringDataBean.setSystolicBloodPressure(int)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setSystolicBloodPressure", "params": ["int"]}, "RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)": {"calls": ["ErrorList.hasErrors()", "RemoteMonitoringDataBean.getGlucoseLevel()", "RemoteMonitoringDataBean.getSystolicBloodPressure()", "RemoteMonitoringDataBean.getDiastolicBloodPressure()", "RemoteMonitoringDataBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ErrorList.addIfNotNull(String)"], "called_by": ["RemoteMonitoringDataBeanValidator.validate(Object)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "RemoteMonitoringDataBeanValidator", "method_name": "validate", "params": ["RemoteMonitoringDataBean"]}, "AuthDAO.getUserRole(long)": {"calls": ["Role.parse(String)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditRepresentativesAction.addRepresentative(String)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)", "DeclareHCPAction.declareHCP(String)", "AuthDAO.getUserName(long)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "ResetPasswordAction.resetPassword(long,String,String,String,String,String)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "AuthDAO", "method_name": "getUserRole", "params": ["long"]}, "Role.getUserRolesString()": {"calls": [], "called_by": ["AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)", "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "Role", "method_name": "getUserRolesString", "params": []}, "RemoteMonitoringDAO.storePatientData(long,int,String,long)": {"calls": ["RemoteMonitoringDAO.getNumberOfDailyEntries(long)", "DBUtil.closeConnection(Connection,PreparedStatement)", "RemoteMonitoringDAO.validatePR(long,long)", "DAOFactory.getConnection()"], "called_by": ["AddRemoteMonitoringDataAction.addRemoteMonitoringData(int)"], "class_name": "RemoteMonitoringDAO", "method_name": "storePatientData", "params": ["long", "int", "String", "long"]}, "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)": {"calls": ["Role.getUserRolesString()", "RemoteMonitoringDataBean.setDiastolicBloodPressure(int)", "AuthDAO.getUserRole(long)", "RemoteMonitoringDataBean.setSystolicBloodPressure(int)", "RemoteMonitoringDAO.storePatientData(long,int,int,String,long)", "TransactionDAO.logTransaction(TransactionType,long)", "RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "called_by": [], "class_name": "AddRemoteMonitoringDataAction", "method_name": "addRemoteMonitoringData", "params": ["int", "int"]}, "RemoteMonitoringDAO.storePatientData(long,int,int,String,long)": {"calls": ["RemoteMonitoringDAO.getNumberOfDailyEntries(long)", "DBUtil.closeConnection(Connection,PreparedStatement)", "RemoteMonitoringDAO.validatePR(long,long)", "DAOFactory.getConnection()"], "called_by": ["AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int)"], "class_name": "RemoteMonitoringDAO", "method_name": "storePatientData", "params": ["long", "int", "int", "String", "long"]}, "AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)": {"calls": ["Role.getUserRolesString()", "RemoteMonitoringDataBean.setDiastolicBloodPressure(int)", "AuthDAO.getUserRole(long)", "RemoteMonitoringDAO.storePatientData(long,int,int,int,String,long)", "RemoteMonitoringDataBean.setSystolicBloodPressure(int)", "RemoteMonitoringDataBean.setGlucoseLevel(int)", "TransactionDAO.logTransaction(TransactionType,long)", "RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "called_by": [], "class_name": "AddRemoteMonitoringDataAction", "method_name": "addRemoteMonitoringData", "params": ["int", "int", "int"]}, "RemoteMonitoringDAO.storePatientData(long,int,int,int,String,long)": {"calls": ["RemoteMonitoringDAO.getNumberOfDailyEntries(long)", "DBUtil.closeConnection(Connection,PreparedStatement)", "RemoteMonitoringDAO.validatePR(long,long)", "DAOFactory.getConnection()"], "called_by": ["AddRemoteMonitoringDataAction.addRemoteMonitoringData(int,int,int)"], "class_name": "RemoteMonitoringDAO", "method_name": "storePatientData", "params": ["long", "int", "int", "int", "String", "long"]}, "AddRemoteMonitoringDataAction.getPatientName(long)": {"calls": ["AuthDAO.getUserName(long)"], "called_by": [], "class_name": "AddRemoteMonitoringDataAction", "method_name": "getPatientName", "params": ["long"]}, "AddPatientAction.addPatient(PatientBean)": {"calls": ["AddPatientValidator.validate(PatientBean)", "PatientDAO.editPatient(PatientBean)", "PatientBean.setPassword(String)", "AuthDAO.addUser(Long,Role,String)", "RandomPassword.getRandomPassword()", "PatientBean.setMID(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "PatientDAO.addEmptyPatient()"], "called_by": [], "class_name": "AddPatientAction", "method_name": "addPatient", "params": ["PatientBean"]}, "AddPatientValidator.validate(PatientBean)": {"calls": ["ErrorList.hasErrors()", "PatientBean.getLastName()", "AddPatientValidator.checkFormat(String,String,ValidationFormat,boolean)", "PatientBean.getEmail()", "PatientBean.getFirstName()", "ErrorList.addIfNotNull(String)"], "called_by": ["AddPatientValidator.validate(Object)", "AddPatientAction.addPatient(PatientBean)"], "class_name": "AddPatientValidator", "method_name": "validate", "params": ["PatientBean"]}, "PatientDAO.addEmptyPatient()": {"calls": ["DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["AddPatientAction.addPatient(PatientBean)"], "class_name": "PatientDAO", "method_name": "addEmptyPatient", "params": []}, "PatientBean.setMID(long)": {"calls": [], "called_by": ["EditPatientAction.updateInformation(PatientBean)", "AddPatientAction.addPatient(PatientBean)", "PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setMID", "params": ["long"]}, "PatientBean.setPassword(String)": {"calls": [], "called_by": ["AddPatientAction.addPatient(PatientBean)"], "class_name": "PatientBean", "method_name": "setPassword", "params": ["String"]}, "PatientDAO.editPatient(PatientBean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)", "PatientBean.getMID()", "DAOFactory.getConnection()"], "called_by": ["EditPatientAction.updateInformation(PatientBean)", "AddPatientAction.addPatient(PatientBean)"], "class_name": "PatientDAO", "method_name": "editPatient", "params": ["PatientBean"]}, "SendMessageAction.sendMessage(MessageBean)": {"calls": ["Email.setSubject(String)", "MessageDAO.addMessage(MessageBean)", "Email.setToList(List)", "Email.setBody(String)", "MessageBean.getTo()", "PatientBean.getFullName()", "PatientDAO.getPatient(long)", "PatientBean.getEmail()", "Email.setFrom(String)", "PersonnelBean.getEmail()", "PersonnelBean.getFullName()", "EMailValidator.validate(MessageBean)", "MessageBean.getFrom()", "PersonnelDAO.getPersonnel(long)", "TransactionDAO.logTransaction(TransactionType,long)", "MessageValidator.validate(MessageBean)", "EmailUtil.sendEmail(Email)"], "called_by": ["MonitorAdverseEventAction.remove(int)"], "class_name": "SendMessageAction", "method_name": "sendMessage", "params": ["MessageBean"]}, "MessageValidator.validate(MessageBean)": {"calls": ["ErrorList.hasErrors()", "MessageValidator.checkFormat(String,String,ValidationFormat,boolean)", "MessageBean.getBody()", "MessageBean.getSubject()", "ErrorList.addIfNotNull(String)"], "called_by": ["MessageValidator.validate(Object)", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "MessageValidator", "method_name": "validate", "params": ["MessageBean"]}, "EMailValidator.validate(MessageBean)": {"calls": ["EMailValidator.checkFormat(String,String,ValidationFormat,boolean)", "ErrorList.hasErrors()", "MessageBean.getBody()", "ErrorList.addIfNotNull(String)"], "called_by": ["EMailValidator.validate(Object)", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "EMailValidator", "method_name": "validate", "params": ["MessageBean"]}, "MessageDAO.addMessage(MessageBean)": {"calls": ["MessageBean.getParentMessageId()", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)"], "called_by": ["SendMessageAction.sendMessage(MessageBean)"], "class_name": "MessageDAO", "method_name": "addMessage", "params": ["MessageBean"]}, "MessageBean.getTo()": {"calls": [], "called_by": ["MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)", "SendMessageAction.sendMessage(MessageBean)"], "class_name": "MessageBean", "method_name": "getTo", "params": []}, "SendMessageAction.getPatientName(long)": {"calls": ["PatientDAO.getName(long)"], "called_by": [], "class_name": "SendMessageAction", "method_name": "getPatientName", "params": ["long"]}, "SendMessageAction.getPersonnelName(long)": {"calls": ["PersonnelDAO.getName(long)"], "called_by": [], "class_name": "SendMessageAction", "method_name": "getPersonnelName", "params": ["long"]}, "SendMessageAction.getMyRepresentees()": {"calls": ["PatientDAO.getRepresented(long)", "DBException.printStackTrace()"], "called_by": [], "class_name": "SendMessageAction", "method_name": "getMyRepresentees", "params": []}, "SendMessageAction.getMyDLHCPs()": {"calls": ["SendMessageAction.getDLHCPsFor(long)"], "called_by": [], "class_name": "SendMessageAction", "method_name": "getMyDLHCPs", "params": []}, "SendMessageAction.getDLHCPsFor(long)": {"calls": ["PatientDAO.getDeclaredHCPs(long)", "DBException.printStackTrace()"], "called_by": ["SendMessageAction.getMyDLHCPs()"], "class_name": "SendMessageAction", "method_name": "getDLHCPsFor", "params": ["long"]}, "EditPatientAction.updateInformation(PatientBean)": {"calls": ["PatientDAO.editPatient(PatientBean)", "PatientValidator.validate(PatientBean)", "EditPatientAction.makeEmail()", "PatientBean.setMID(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "EmailUtil.sendEmail(Email)"], "called_by": ["EditPatientAction.editMessageFilter(String)"], "class_name": "EditPatientAction", "method_name": "updateInformation", "params": ["PatientBean"]}, "PatientValidator.validate(PatientBean)": {"calls": ["PatientBean.getIcAddress1()", "PatientBean.getEmergencyPhone()", "PatientBean.getIcZip()", "PatientBean.getIcName()", "PatientBean.getState()", "PatientBean.getFatherMID()", "PatientBean.getIcAddress2()", "ErrorList.addIfNotNull(String)", "PatientBean.getStreetAddress2()", "PatientBean.getLastName()", "PatientBean.getMotherMID()", "PatientBean.getCity()", "ErrorList.hasErrors()", "PatientBean.getDateOfDeathStr()", "PatientBean.getTopicalNotes()", "PatientBean.getIcCity()", "PatientBean.getCreditCardNumber()", "PatientBean.getCreditCardType()", "PatientBean.getZip()", "PatientBean.getDateOfBirthStr()", "PatientBean.getIcID()", "PatientBean.getStreetAddress1()", "PatientBean.getIcState()", "PatientBean.getEmail()", "PatientBean.getDateOfBirth()", "PatientBean.getDateOfDeath()", "PatientBean.getPhone()", "PatientValidator.checkFormat(String,String,ValidationFormat,boolean)", "PatientBean.getCauseOfDeath()", "PatientBean.getEmergencyName()", "PatientBean.getIcPhone()", "PatientBean.getFirstName()"], "called_by": ["EditPatientAction.updateInformation(PatientBean)", "PatientValidator.validate(Object)"], "class_name": "PatientValidator", "method_name": "validate", "params": ["PatientBean"]}, "EditPatientAction.makeEmail()": {"calls": ["Email.setFrom(String)", "Email.setToList(List)", "Email.setSubject(String)", "PatientBean.getFullName()", "PatientDAO.getPatient(long)", "PatientDAO.getRepresenting(long)", "Email.setBody(String)", "PatientBean.getEmail()"], "called_by": ["EditPatientAction.updateInformation(PatientBean)"], "class_name": "EditPatientAction", "method_name": "makeEmail", "params": []}, "EditPatientAction.getPatient()": {"calls": ["EditPatientAction.getPid()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "PatientDAO.getPatient(long)"], "called_by": ["EditPatientAction.editMessageFilter(String)"], "class_name": "EditPatientAction", "method_name": "getPatient", "params": []}, "EditPatientAction.getPid()": {"calls": [], "called_by": ["EditPatientAction.getPatient()"], "class_name": "EditPatientAction", "method_name": "getPid", "params": []}, "EditPatientAction.editMessageFilter(String)": {"calls": ["EditPatientAction.updateInformation(PatientBean)", "EditPatientAction.getPatient()", "PatientBean.setMessageFilter(String)"], "called_by": [], "class_name": "EditPatientAction", "method_name": "editMessageFilter", "params": ["String"]}, "PatientBean.setMessageFilter(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)", "EditPatientAction.editMessageFilter(String)"], "class_name": "PatientBean", "method_name": "setMessageFilter", "params": ["String"]}, "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)": {"calls": ["ProcedureBean.getDescription()", "DBException.printStackTrace()", "DBException.getMessage()", "iTrustException.getMessage()", "CPTCodesDAO.addCPTCode(ProcedureBean)", "ProcedureBeanValidator.validate(ProcedureBean)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "ProcedureBean.getCPTCode()"], "called_by": [], "class_name": "UpdateCPTCodeListAction", "method_name": "addCPTCode", "params": ["ProcedureBean"]}, "ProcedureBeanValidator.validate(ProcedureBean)": {"calls": ["ErrorList.hasErrors()", "ProcedureBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ProcedureBean.getDescription()", "ProcedureBean.getCPTCode()", "ErrorList.addIfNotNull(String)"], "called_by": ["ProcedureBeanValidator.validate(Object)", "UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "UpdateCPTCodeListAction.updateInformation(ProcedureBean)"], "class_name": "ProcedureBeanValidator", "method_name": "validate", "params": ["ProcedureBean"]}, "CPTCodesDAO.addCPTCode(ProcedureBean)": {"calls": ["ProcedureBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBean.getAttribute()", "DAOFactory.getConnection()", "ProcedureBean.getCPTCode()"], "called_by": ["UpdateCPTCodeListAction.addCPTCode(ProcedureBean)"], "class_name": "CPTCodesDAO", "method_name": "addCPTCode", "params": ["ProcedureBean"]}, "ProcedureBean.getDescription()": {"calls": [], "called_by": ["UpdateCPTCodeListAction.addCPTCode(ProcedureBean)", "ProcedureBeanLoader.loadParameters(PreparedStatement,ProcedureBean)", "ProcedureBeanValidator.validate(ProcedureBean)", "CPTCodesDAO.addCPTCode(ProcedureBean)", "CPTCodesDAO.updateCode(ProcedureBean)"], "class_name": "ProcedureBean", "method_name": "getDescription", "params": []}, "UpdateCPTCodeListAction.updateInformation(ProcedureBean)": {"calls": ["UpdateCPTCodeListAction.updateCode(ProcedureBean)", "DBException.printStackTrace()", "DBException.getMessage()", "ProcedureBeanValidator.validate(ProcedureBean)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "ProcedureBean.getCPTCode()"], "called_by": [], "class_name": "UpdateCPTCodeListAction", "method_name": "updateInformation", "params": ["ProcedureBean"]}, "UpdateCPTCodeListAction.updateCode(ProcedureBean)": {"calls": ["CPTCodesDAO.updateCode(ProcedureBean)"], "called_by": ["UpdateCPTCodeListAction.updateInformation(ProcedureBean)"], "class_name": "UpdateCPTCodeListAction", "method_name": "updateCode", "params": ["ProcedureBean"]}, "CPTCodesDAO.updateCode(ProcedureBean)": {"calls": ["ProcedureBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBean.getAttribute()", "DAOFactory.getConnection()", "ProcedureBean.getCPTCode()"], "called_by": ["UpdateCPTCodeListAction.updateCode(ProcedureBean)"], "class_name": "CPTCodesDAO", "method_name": "updateCode", "params": ["ProcedureBean"]}, "ReferralManagementAction.sendReferral(ReferralBean)": {"calls": ["ReferralDAO.addReferral(ReferralBean)", "TransactionDAO.logTransaction(TransactionType,long)"], "called_by": [], "class_name": "ReferralManagementAction", "method_name": "sendReferral", "params": ["ReferralBean"]}, "ReferralDAO.addReferral(ReferralBean)": {"calls": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ReferralManagementAction.sendReferral(ReferralBean)"], "class_name": "ReferralDAO", "method_name": "addReferral", "params": ["ReferralBean"]}, "ReferralManagementAction.updateReferral(ReferralBean)": {"calls": ["ReferralDAO.editReferral(ReferralBean)"], "called_by": [], "class_name": "ReferralManagementAction", "method_name": "updateReferral", "params": ["ReferralBean"]}, "ReferralDAO.editReferral(ReferralBean)": {"calls": ["ReferralBean.getId()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)", "DAOFactory.getConnection()"], "called_by": ["ReferralManagementAction.updateReferral(ReferralBean)"], "class_name": "ReferralDAO", "method_name": "editReferral", "params": ["ReferralBean"]}, "ReferralManagementAction.getReferralsSentFromMe()": {"calls": ["ReferralDAO.getReferralsSentFrom(long)"], "called_by": [], "class_name": "ReferralManagementAction", "method_name": "getReferralsSentFromMe", "params": []}, "ReferralDAO.getReferralsSentFrom(long)": {"calls": ["ReferralBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ReferralManagementAction.getReferralsSentFromMe()"], "class_name": "ReferralDAO", "method_name": "getReferralsSentFrom", "params": ["long"]}, "ReferralManagementAction.getReferralsSentToMe()": {"calls": ["ReferralDAO.getReferralsSentTo(long)"], "called_by": [], "class_name": "ReferralManagementAction", "method_name": "getReferralsSentToMe", "params": []}, "ReferralDAO.getReferralsSentTo(long)": {"calls": ["ReferralBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ReferralManagementAction.getReferralsSentToMe()"], "class_name": "ReferralDAO", "method_name": "getReferralsSentTo", "params": ["long"]}, "ViewPrescriptionRenewalNeedsAction.getRenewalNeedsPatients()": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "PatientDAO.getRenewalNeedsPatients(long)", "Messages.getString(String)"], "called_by": [], "class_name": "ViewPrescriptionRenewalNeedsAction", "method_name": "getRenewalNeedsPatients", "params": []}, "PatientDAO.getRenewalNeedsPatients(long)": {"calls": ["PatientLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewPrescriptionRenewalNeedsAction.getRenewalNeedsPatients()"], "class_name": "PatientDAO", "method_name": "getRenewalNeedsPatients", "params": ["long"]}, "AddHCPAction.add(PersonnelBean)": {"calls": ["PersonnelBean.setPassword(String)", "PersonnelBean.setMID(long)", "PersonnelDAO.addEmptyPersonnel(Role)", "AuthDAO.addUser(Long,Role,String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "RandomPassword.getRandomPassword()", "AddPersonnelValidator.validate(PersonnelBean)", "PersonnelDAO.editPersonnel(PersonnelBean)"], "called_by": [], "class_name": "AddHCPAction", "method_name": "add", "params": ["PersonnelBean"]}, "UpdateHospitalListAction.addHospital(HospitalBean)": {"calls": ["HospitalBean.getHospitalID()", "DBException.printStackTrace()", "HospitalsDAO.addHospital(HospitalBean)", "iTrustException.getMessage()", "HospitalBeanValidator.validate(HospitalBean)", "HospitalBean.getHospitalName()", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "UpdateHospitalListAction", "method_name": "addHospital", "params": ["HospitalBean"]}, "HospitalBeanValidator.validate(HospitalBean)": {"calls": ["HospitalBean.getHospitalID()", "ErrorList.hasErrors()", "HospitalBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "HospitalBean.getHospitalName()", "ErrorList.addIfNotNull(String)"], "called_by": ["UpdateHospitalListAction.addHospital(HospitalBean)", "UpdateHospitalListAction.updateInformation(HospitalBean)", "HospitalBeanValidator.validate(Object)"], "class_name": "HospitalBeanValidator", "method_name": "validate", "params": ["HospitalBean"]}, "HospitalsDAO.addHospital(HospitalBean)": {"calls": ["HospitalBean.getHospitalID()", "DBUtil.closeConnection(Connection,PreparedStatement)", "HospitalBean.getHospitalName()", "DAOFactory.getConnection()"], "called_by": ["UpdateHospitalListAction.addHospital(HospitalBean)"], "class_name": "HospitalsDAO", "method_name": "addHospital", "params": ["HospitalBean"]}, "HospitalBean.getHospitalName()": {"calls": [], "called_by": ["HospitalBeanValidator.validate(HospitalBean)", "UpdateHospitalListAction.addHospital(HospitalBean)", "HospitalsDAO.addHospital(HospitalBean)", "HospitalsDAO.updateHospital(HospitalBean)"], "class_name": "HospitalBean", "method_name": "getHospitalName", "params": []}, "HospitalBean.getHospitalID()": {"calls": [], "called_by": ["HospitalBeanValidator.validate(HospitalBean)", "UpdateHospitalListAction.addHospital(HospitalBean)", "HospitalsDAO.addHospital(HospitalBean)", "HospitalsDAO.updateHospital(HospitalBean)"], "class_name": "HospitalBean", "method_name": "getHospitalID", "params": []}, "UpdateHospitalListAction.updateInformation(HospitalBean)": {"calls": ["HospitalBeanValidator.validate(HospitalBean)", "UpdateHospitalListAction.updateHospital(HospitalBean)", "DBException.getMessage()", "DBException.printStackTrace()"], "called_by": [], "class_name": "UpdateHospitalListAction", "method_name": "updateInformation", "params": ["HospitalBean"]}, "UpdateHospitalListAction.updateHospital(HospitalBean)": {"calls": ["HospitalsDAO.updateHospital(HospitalBean)"], "called_by": ["UpdateHospitalListAction.updateInformation(HospitalBean)"], "class_name": "UpdateHospitalListAction", "method_name": "updateHospital", "params": ["HospitalBean"]}, "HospitalsDAO.updateHospital(HospitalBean)": {"calls": ["HospitalBean.getHospitalID()", "DBUtil.closeConnection(Connection,PreparedStatement)", "HospitalBean.getHospitalName()", "DAOFactory.getConnection()"], "called_by": ["UpdateHospitalListAction.updateHospital(HospitalBean)"], "class_name": "HospitalsDAO", "method_name": "updateHospital", "params": ["HospitalBean"]}, "EditMonitoringListAction.addToList(long)": {"calls": ["RemoteMonitoringDAO.addPatientToList(long,long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "EditMonitoringListAction", "method_name": "addToList", "params": ["long"]}, "RemoteMonitoringDAO.addPatientToList(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditMonitoringListAction.addToList(long)"], "class_name": "RemoteMonitoringDAO", "method_name": "addPatientToList", "params": ["long", "long"]}, "EditMonitoringListAction.removeFromList(long)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "RemoteMonitoringDAO.removePatientFromList(long,long)"], "called_by": [], "class_name": "EditMonitoringListAction", "method_name": "removeFromList", "params": ["long"]}, "RemoteMonitoringDAO.removePatientFromList(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditMonitoringListAction.removeFromList(long)"], "class_name": "RemoteMonitoringDAO", "method_name": "removePatientFromList", "params": ["long", "long"]}, "EditMonitoringListAction.isPatientInList(long)": {"calls": ["RemoteMonitoringDataBean.getPatientMID()", "RemoteMonitoringDAO.getPatientsData(long)"], "called_by": [], "class_name": "EditMonitoringListAction", "method_name": "isPatientInList", "params": ["long"]}, "RemoteMonitoringDataBean.getPatientMID()": {"calls": [], "called_by": ["RemoteMonitoringDAO.getPatientsData(long)", "EditMonitoringListAction.isPatientInList(long)"], "class_name": "RemoteMonitoringDataBean", "method_name": "getPatientMID", "params": []}, "EditMonitoringListAction.getPatientName(long)": {"calls": ["AuthDAO.getUserName(long)"], "called_by": [], "class_name": "EditMonitoringListAction", "method_name": "getPatientName", "params": ["long"]}, "SurveyAction.addSurvey(SurveyBean,long)": {"calls": ["SurveyDAO.addCompletedSurvey(SurveyBean,Date)", "SurveyBean.setVisitID(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "SurveyAction", "method_name": "addSurvey", "params": ["SurveyBean", "long"]}, "SurveyBean.setVisitID(long)": {"calls": [], "called_by": ["SurveyAction.addSurvey(SurveyBean,long)", "SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyBean", "method_name": "setVisitID", "params": ["long"]}, "SurveyDAO.addCompletedSurvey(SurveyBean,Date)": {"calls": ["SurveyBean.getWaitingRoomMinutes()", "DBUtil.closeConnection(Connection,PreparedStatement)", "SurveyBean.getVisitID()", "SurveyBean.getVisitSatisfaction()", "DAOFactory.getConnection()", "SurveyBean.getTreatmentSatisfaction()", "SurveyBean.getExamRoomMinutes()"], "called_by": ["SurveyAction.addSurvey(SurveyBean,long)"], "class_name": "SurveyDAO", "method_name": "addCompletedSurvey", "params": ["SurveyBean", "Date"]}, "UpdateLOINCListAction.add(LOINCbean)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCbean.getLabProcedureCode()", "LOINCDAO.getAllLOINC()", "LOINCDAO.addLOINC(LOINCbean)"], "called_by": [], "class_name": "UpdateLOINCListAction", "method_name": "add", "params": ["LOINCbean"]}, "LOINCBeanValidator.validate(LOINCbean)": {"calls": ["LOINCbean.getKindOfProperty()", "ErrorList.addIfNotNull(String)", "ErrorList.hasErrors()", "LOINCbean.getTimeAspect()", "LOINCBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "LOINCbean.getComponent()", "LOINCbean.getSystem()", "LOINCbean.getScaleType()", "LOINCbean.getMethodType()", "LOINCbean.getLabProcedureCode()"], "called_by": ["UpdateLOINCListAction.updateInformation(LOINCbean)", "LOINCBeanValidator.validate(Object)", "UpdateLOINCListAction.add(LOINCbean)"], "class_name": "LOINCBeanValidator", "method_name": "validate", "params": ["LOINCbean"]}, "LOINCDAO.getAllLOINC()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LOINCBeanLoader.loadList(ResultSet)"], "called_by": ["UpdateLOINCListAction.add(LOINCbean)"], "class_name": "LOINCDAO", "method_name": "getAllLOINC", "params": []}, "LOINCbean.getLabProcedureCode()": {"calls": [], "called_by": ["UpdateLOINCListAction.updateInformation(LOINCbean)", "UpdateLOINCListAction.add(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.update(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getLabProcedureCode", "params": []}, "LOINCDAO.addLOINC(LOINCbean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "LOINCbean.getKindOfProperty()", "LOINCbean.getTimeAspect()", "LOINCbean.getComponent()", "LOINCbean.getSystem()", "LOINCbean.getScaleType()", "DAOFactory.getConnection()", "LOINCbean.getLabProcedureCode()", "LOINCbean.getMethodType()"], "called_by": ["UpdateLOINCListAction.add(LOINCbean)"], "class_name": "LOINCDAO", "method_name": "addLOINC", "params": ["LOINCbean"]}, "UpdateLOINCListAction.updateInformation(LOINCbean)": {"calls": ["DBException.printStackTrace()", "LOINCBeanValidator.validate(LOINCbean)", "DBException.getMessage()", "LOINCDAO.update(LOINCbean)", "LOINCbean.getLabProcedureCode()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "UpdateLOINCListAction", "method_name": "updateInformation", "params": ["LOINCbean"]}, "LOINCDAO.update(LOINCbean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "LOINCbean.getKindOfProperty()", "LOINCbean.getTimeAspect()", "LOINCbean.getComponent()", "LOINCbean.getSystem()", "LOINCbean.getScaleType()", "DAOFactory.getConnection()", "LOINCbean.getLabProcedureCode()", "LOINCbean.getMethodType()"], "called_by": ["UpdateLOINCListAction.updateInformation(LOINCbean)"], "class_name": "LOINCDAO", "method_name": "update", "params": ["LOINCbean"]}, "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()": {"calls": ["PatientBean.getFullName()", "PatientBean.getState()", "ViewPatientOfficeVisitHistoryAction.PatientInList(PatientBean,String)", "OfficeVisitBean.getPatientID()", "PatientVisitBean.setLastOVDate(String)", "PatientBean.getStreetAddress2()", "PatientVisitBean.setAddress2(String)", "PatientBean.getCity()", "PatientVisitBean.setLastOVDateM(String)", "OfficeVisitBean.getVisitDateStr()", "PatientBean.getZip()", "OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)", "PatientVisitBean.setPatientName(String)", "PatientVisitBean.setPatient(PatientBean)", "PatientDAO.getPatient(long)", "PatientBean.getStreetAddress1()", "PatientVisitBean.setLastOVDateD(String)", "PatientVisitBean.setLastOVDateY(String)", "DBException.getMessage()", "PatientVisitBean.setAddress1(String)"], "called_by": ["ViewPatientOfficeVisitHistoryAction.getPatients()"], "class_name": "ViewPatientOfficeVisitHistoryAction", "method_name": "processOfficeVisits", "params": []}, "OfficeVisitBean.getPatientID()": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)", "EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)", "OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "OfficeVisitBean", "method_name": "getPatientID", "params": []}, "PatientVisitBean.setPatient(PatientBean)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setPatient", "params": ["PatientBean"]}, "PatientVisitBean.setPatientName(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setPatientName", "params": ["String"]}, "PatientVisitBean.setLastOVDateM(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setLastOVDateM", "params": ["String"]}, "PatientVisitBean.setLastOVDateD(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setLastOVDateD", "params": ["String"]}, "PatientVisitBean.setLastOVDateY(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setLastOVDateY", "params": ["String"]}, "PatientVisitBean.setLastOVDate(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.PatientInList(PatientBean,String)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setLastOVDate", "params": ["String"]}, "PatientBean.getStreetAddress1()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getStreetAddress1", "params": []}, "PatientBean.getStreetAddress2()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getStreetAddress2", "params": []}, "PatientVisitBean.setAddress1(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setAddress1", "params": ["String"]}, "PatientBean.getCity()": {"calls": [], "called_by": ["PatientBean.getStreetAddress3()", "PatientValidator.validate(PatientBean)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getCity", "params": []}, "PatientBean.getState()": {"calls": [], "called_by": ["PatientBean.getStreetAddress3()", "PatientValidator.validate(PatientBean)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getState", "params": []}, "PatientBean.getZip()": {"calls": ["PatientBean.getZip2()", "PatientBean.getZip1()"], "called_by": ["PatientBean.getStreetAddress3()", "PatientValidator.validate(PatientBean)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientBean", "method_name": "getZip", "params": []}, "PatientVisitBean.setAddress2(String)": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "PatientVisitBean", "method_name": "setAddress2", "params": ["String"]}, "ViewPatientOfficeVisitHistoryAction.PatientInList(PatientBean,String)": {"calls": ["PatientVisitBean.getPatientName()", "PatientBean.getFullName()", "PatientVisitBean.getLastOVDateY()", "PatientVisitBean.setLastOVDate(String)"], "called_by": ["ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "class_name": "ViewPatientOfficeVisitHistoryAction", "method_name": "PatientInList", "params": ["PatientBean", "String"]}, "PatientVisitBean.getPatientName()": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.PatientInList(PatientBean,String)"], "class_name": "PatientVisitBean", "method_name": "getPatientName", "params": []}, "PatientVisitBean.getLastOVDateY()": {"calls": [], "called_by": ["ViewPatientOfficeVisitHistoryAction.PatientInList(PatientBean,String)"], "class_name": "PatientVisitBean", "method_name": "getLastOVDateY", "params": []}, "ViewPatientOfficeVisitHistoryAction.getPatients()": {"calls": ["TransactionDAO.logTransaction(TransactionType,long)", "ViewPatientOfficeVisitHistoryAction.processOfficeVisits()"], "called_by": [], "class_name": "ViewPatientOfficeVisitHistoryAction", "method_name": "getPatients", "params": []}, "ViewPatientOfficeVisitHistoryAction.getPersonnel()": {"calls": ["PersonnelDAO.getPersonnel(long)"], "called_by": [], "class_name": "ViewPatientOfficeVisitHistoryAction", "method_name": "getPersonnel", "params": []}, "ChronicDiseaseRiskAction.getUserName()": {"calls": ["AuthDAO.getUserName(long)"], "called_by": [], "class_name": "ChronicDiseaseRiskAction", "method_name": "getUserName", "params": []}, "ChronicDiseaseRiskAction.getDiseasesAtRisk()": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "ChronicDiseaseMediator.getDiseaseAtRisk()"], "called_by": [], "class_name": "ChronicDiseaseRiskAction", "method_name": "getDiseasesAtRisk", "params": []}, "ChronicDiseaseMediator.getDiseaseAtRisk()": {"calls": ["RiskChecker.isAtRisk()"], "called_by": ["ChronicDiseaseRiskAction.getDiseasesAtRisk()", "EditPHRAction.getDiseasesAtRisk()"], "class_name": "ChronicDiseaseMediator", "method_name": "getDiseaseAtRisk", "params": []}, "LoginFailureAction.recordLoginFailure()": {"calls": ["AuthDAO.recordLoginFailure(String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "AuthDAO.getLoginFailures(String)", "DBException.getMessage()", "DBException.printStackTrace()"], "called_by": [], "class_name": "LoginFailureAction", "method_name": "recordLoginFailure", "params": []}, "AuthDAO.recordLoginFailure(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "AuthDAO.insertLoginFailureRow(String,int,Connection)"], "called_by": ["LoginFailureAction.recordLoginFailure()"], "class_name": "AuthDAO", "method_name": "recordLoginFailure", "params": ["String"]}, "AuthDAO.getLoginFailures(String)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "AuthDAO.insertLoginFailureRow(String,int,Connection)", "AuthDAO.updateFailuresToZero(String,Connection)", "DAOFactory.getConnection()"], "called_by": ["LoginFailureAction.isValidForLogin()", "LoginFailureAction.recordLoginFailure()"], "class_name": "AuthDAO", "method_name": "getLoginFailures", "params": ["String"]}, "LoginFailureAction.isValidForLogin()": {"calls": ["AuthDAO.getLoginFailures(String)"], "called_by": [], "class_name": "LoginFailureAction", "method_name": "isValidForLogin", "params": []}, "AddPHAAction.add(PersonnelBean)": {"calls": ["PersonnelBean.setPassword(String)", "PersonnelBean.setMID(long)", "PersonnelDAO.addEmptyPersonnel(Role)", "AuthDAO.addUser(Long,Role,String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "RandomPassword.getRandomPassword()", "AddPersonnelValidator.validate(PersonnelBean)", "PersonnelDAO.editPersonnel(PersonnelBean)"], "called_by": [], "class_name": "AddPHAAction", "method_name": "add", "params": ["PersonnelBean"]}, "ViewMyRecordsAction.representPatient(String)": {"calls": ["PatientDAO.represents(long,long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "representPatient", "params": ["String"]}, "PatientDAO.represents(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyRecordsAction.representPatient(String)", "PrescriptionReportAction.representPatient(String)", "ViewOfficeVisitAction.checkRepresented(long,String)"], "class_name": "PatientDAO", "method_name": "represents", "params": ["long", "long"]}, "ViewMyRecordsAction.getPatient()": {"calls": ["PatientDAO.getPatient(long)"], "called_by": ["ViewMyRecordsAction.getEmailHistory()"], "class_name": "ViewMyRecordsAction", "method_name": "getPatient", "params": []}, "ViewMyRecordsAction.getPatient(long)": {"calls": ["PatientDAO.getPatient(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getPatient", "params": ["long"]}, "ViewMyRecordsAction.getPersonnel(long)": {"calls": ["PersonnelDAO.getPersonnel(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getPersonnel", "params": ["long"]}, "ViewMyRecordsAction.getEmailHistory()": {"calls": ["ViewMyRecordsAction.getPatient()", "PatientBean.getEmail()", "FakeEmailDAO.getEmailsByPerson(String)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getEmailHistory", "params": []}, "ViewMyRecordsAction.getAllergies()": {"calls": ["AllergyDAO.getAllergies(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getAllergies", "params": []}, "ViewMyRecordsAction.getFamily()": {"calls": ["FamilyDAO.getSiblings(long)", "FamilyDAO.getParents(long)", "FamilyMemberBean.getMid()", "FamilyMemberBean.setRelation(String)", "DBException.getMessage()", "FamilyDAO.getChildren(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getFamily", "params": []}, "FamilyDAO.getParents(long)": {"calls": ["FamilyDAO.getFamilyMembers(long,String,String,boolean)"], "called_by": ["EditPHRAction.getFamily()", "ViewMyRecordsAction.getFamily()", "ViewMyRecordsAction.getFamilyHistory()", "RiskDAO.getFamilyMembers(long)"], "class_name": "FamilyDAO", "method_name": "getParents", "params": ["long"]}, "FamilyDAO.getSiblings(long)": {"calls": ["FamilyDAO.getFamilyMembers(long,String,String,boolean)"], "called_by": ["EditPHRAction.getFamily()", "ViewMyRecordsAction.getFamily()", "ViewMyRecordsAction.getFamilyHistory()", "RiskDAO.getFamilyMembers(long)"], "class_name": "FamilyDAO", "method_name": "getSiblings", "params": ["long"]}, "FamilyDAO.getChildren(long)": {"calls": ["FamilyDAO.getFamilyMembers(long,String,String,boolean)"], "called_by": ["EditPHRAction.getFamily()", "ViewMyRecordsAction.getFamily()"], "class_name": "FamilyDAO", "method_name": "getChildren", "params": ["long"]}, "FamilyMemberBean.getMid()": {"calls": [], "called_by": ["ViewMyRecordsAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "RiskDAO.hasFamilyHistory(long,double,double)", "ViewMyRecordsAction.getFamilyHistory()", "EditPHRAction.getFamilyMemberCOD(FamilyMemberBean)", "EditPHRAction.doesFamilyMemberHaveCancer(FamilyMemberBean)", "EditPHRAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "ViewMyRecordsAction.isFamilyMemberSmoker(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)", "EditPHRAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)", "ViewMyRecordsAction.getFamilyMemberCOD(FamilyMemberBean)", "EditPHRAction.isFamilyMemberSmoker(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "EditPHRAction.getFamily()", "ViewMyRecordsAction.getFamily()", "EditPHRAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)", "EditPHRAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveCancer(FamilyMemberBean)"], "class_name": "FamilyMemberBean", "method_name": "getMid", "params": []}, "FamilyMemberBean.setRelation(String)": {"calls": [], "called_by": ["FamilyBeanLoader.loadSingle(ResultSet)", "EditPHRAction.getFamily()", "ViewMyRecordsAction.getFamily()", "ViewMyRecordsAction.getFamilyHistory()"], "class_name": "FamilyMemberBean", "method_name": "setRelation", "params": ["String"]}, "ViewMyRecordsAction.getFamilyHistory()": {"calls": ["FamilyDAO.getSiblings(long)", "FamilyDAO.getParents(long)", "FamilyMemberBean.getMid()", "FamilyMemberBean.setRelation(String)", "DBException.getMessage()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getFamilyHistory", "params": []}, "ViewMyRecordsAction.getAllHealthRecords()": {"calls": ["HealthRecordsDAO.getAllHealthRecords(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getAllHealthRecords", "params": []}, "HealthRecordsDAO.getAllHealthRecords(long)": {"calls": ["HealthRecordsBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyRecordsAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "EditPHRAction.getAllHealthRecords()", "EditPHRAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "ViewMyRecordsAction.isFamilyMemberSmoker(FamilyMemberBean)", "EditPHRAction.isFamilyMemberSmoker(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "ViewMyRecordsAction.getAllHealthRecords()", "EditPHRAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "EditHealthHistoryAction.getAllHealthRecords(long)", "ViewMyRecordsAction.getFamilyHealthRecords(long)"], "class_name": "HealthRecordsDAO", "method_name": "getAllHealthRecords", "params": ["long"]}, "ViewMyRecordsAction.getFamilyHealthRecords(long)": {"calls": ["HealthRecordsDAO.getAllHealthRecords(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getFamilyHealthRecords", "params": ["long"]}, "ViewMyRecordsAction.getAllOfficeVisits()": {"calls": ["OfficeVisitDAO.getAllOfficeVisits(long)"], "called_by": ["GenerateCalendarAction.getOfficeVisitsTable(int,int)"], "class_name": "ViewMyRecordsAction", "method_name": "getAllOfficeVisits", "params": []}, "ViewMyRecordsAction.getCompleteOfficeVisit(long)": {"calls": ["OfficeVisitDAO.getOfficeVisit(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getCompleteOfficeVisit", "params": ["long"]}, "ViewMyRecordsAction.getRepresented()": {"calls": ["PatientDAO.getRepresented(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getRepresented", "params": []}, "ViewMyRecordsAction.getRepresenting()": {"calls": ["PatientDAO.getRepresenting(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getRepresenting", "params": []}, "ViewMyRecordsAction.isSurveyCompleted(long)": {"calls": ["SurveyDAO.isSurveyCompleted(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "isSurveyCompleted", "params": ["long"]}, "SurveyDAO.isSurveyCompleted(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyRecordsAction.isSurveyCompleted(long)", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "SurveyDAO", "method_name": "isSurveyCompleted", "params": ["long"]}, "ViewMyRecordsAction.getLabs()": {"calls": ["LabProcedureDAO.getLabProceduresForPatient(long)"], "called_by": ["GenerateCalendarAction.getLabProceduresTable(int,int)"], "class_name": "ViewMyRecordsAction", "method_name": "getLabs", "params": []}, "LabProcedureDAO.getLabProceduresForPatient(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["ViewMyRecordsAction.getLabs()"], "class_name": "LabProcedureDAO", "method_name": "getLabProceduresForPatient", "params": ["long"]}, "ViewMyRecordsAction.getReportRequests()": {"calls": ["ReportRequestDAO.getAllReportRequestsForPatient(long)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getReportRequests", "params": []}, "ReportRequestDAO.getAllReportRequestsForPatient(long)": {"calls": ["DAOFactory.getConnection()", "ReportRequestBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyRecordsAction.getReportRequests()"], "class_name": "ReportRequestDAO", "method_name": "getAllReportRequestsForPatient", "params": ["long"]}, "ViewMyRecordsAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)": {"calls": ["HealthRecord.getBloodPressureSystolic()", "HealthRecord.getBloodPressureDiastolic()", "HealthRecordsDAO.getAllHealthRecords(long)", "FamilyMemberBean.getMid()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "doesFamilyMemberHaveHighBP", "params": ["FamilyMemberBean"]}, "HealthRecord.getBloodPressureSystolic()": {"calls": [], "called_by": ["EditPHRAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "HypertensionFactor.hasFactor()"], "class_name": "HealthRecord", "method_name": "getBloodPressureSystolic", "params": []}, "HealthRecord.getBloodPressureDiastolic()": {"calls": [], "called_by": ["EditPHRAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "ViewMyRecordsAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)", "HypertensionFactor.hasFactor()"], "class_name": "HealthRecord", "method_name": "getBloodPressureDiastolic", "params": []}, "ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)": {"calls": ["HealthRecord.getCholesterolHDL()", "HealthRecordsDAO.getAllHealthRecords(long)", "HealthRecord.getCholesterolLDL()", "FamilyMemberBean.getMid()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "doesFamilyMemberHaveHighCholesterol", "params": ["FamilyMemberBean"]}, "HealthRecord.getCholesterolHDL()": {"calls": [], "called_by": ["ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "HealthRecord.getTotalCholesterol()", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)", "EditPHRAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "CholesterolFactor.hasFactor()"], "class_name": "HealthRecord", "method_name": "getCholesterolHDL", "params": []}, "HealthRecord.getCholesterolLDL()": {"calls": [], "called_by": ["ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "HealthRecord.getTotalCholesterol()", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)", "EditPHRAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)", "CholesterolFactor.hasFactor()"], "class_name": "HealthRecord", "method_name": "getCholesterolLDL", "params": []}, "ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)": {"calls": ["PatientDAO.getDiagnoses(long)", "FamilyMemberBean.getMid()", "DiagnosisBean.getICDCode()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "doesFamilyMemberHaveDiabetes", "params": ["FamilyMemberBean"]}, "ViewMyRecordsAction.doesFamilyMemberHaveCancer(FamilyMemberBean)": {"calls": ["PatientDAO.getDiagnoses(long)", "FamilyMemberBean.getMid()", "DiagnosisBean.getICDCode()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "doesFamilyMemberHaveCancer", "params": ["FamilyMemberBean"]}, "ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)": {"calls": ["PatientDAO.getDiagnoses(long)", "FamilyMemberBean.getMid()", "DiagnosisBean.getICDCode()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "doesFamilyMemberHaveHeartDisease", "params": ["FamilyMemberBean"]}, "ViewMyRecordsAction.isFamilyMemberSmoker(FamilyMemberBean)": {"calls": ["HealthRecordsDAO.getAllHealthRecords(long)", "HealthRecord.isSmoker()", "FamilyMemberBean.getMid()"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "isFamilyMemberSmoker", "params": ["FamilyMemberBean"]}, "HealthRecord.isSmoker()": {"calls": [], "called_by": ["ViewMyRecordsAction.isFamilyMemberSmoker(FamilyMemberBean)", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)", "EditPHRAction.isFamilyMemberSmoker(FamilyMemberBean)"], "class_name": "HealthRecord", "method_name": "isSmoker", "params": []}, "ViewMyRecordsAction.getFamilyMemberCOD(FamilyMemberBean)": {"calls": ["DiagnosisBean.getDescription()", "FamilyMemberBean.getMid()", "PatientDAO.getPatient(long)", "PatientBean.getCauseOfDeath()", "ICDCodesDAO.getICDCode(String)"], "called_by": [], "class_name": "ViewMyRecordsAction", "method_name": "getFamilyMemberCOD", "params": ["FamilyMemberBean"]}, "PatientBean.getCauseOfDeath()": {"calls": [], "called_by": ["EditPHRAction.getFamilyMemberCOD(FamilyMemberBean)", "PatientValidator.validate(PatientBean)", "ViewMyRecordsAction.getFamilyMemberCOD(FamilyMemberBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getCauseOfDeath", "params": []}, "ICDCodesDAO.getICDCode(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DiagnosisBeanLoader.loadSingle(ResultSet)"], "called_by": ["EditPHRAction.getFamilyMemberCOD(FamilyMemberBean)", "ViewMyRecordsAction.getFamilyMemberCOD(FamilyMemberBean)"], "class_name": "ICDCodesDAO", "method_name": "getICDCode", "params": ["String"]}, "DrugInteractionAction.reportInteraction(String,String,String)": {"calls": ["DrugInteractionBean.setFirstDrug(String)", "DrugInteractionBean.setDescription(String)", "DrugInteractionBean.setSecondDrug(String)", "DrugInteractionDAO.reportInteraction(String,String,String)", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long)", "DrugInteractionValidator.validate(DrugInteractionBean)", "DBException.printStackTrace()"], "called_by": [], "class_name": "DrugInteractionAction", "method_name": "reportInteraction", "params": ["String", "String", "String"]}, "DrugInteractionBean.setFirstDrug(String)": {"calls": [], "called_by": ["DrugInteractionBeanLoader.loadSingle(ResultSet)", "DrugInteractionAction.reportInteraction(String,String,String)", "DrugInteractionAction.deleteInteraction(String,String)"], "class_name": "DrugInteractionBean", "method_name": "setFirstDrug", "params": ["String"]}, "DrugInteractionBean.setSecondDrug(String)": {"calls": [], "called_by": ["DrugInteractionBeanLoader.loadSingle(ResultSet)", "DrugInteractionAction.reportInteraction(String,String,String)", "DrugInteractionAction.deleteInteraction(String,String)"], "class_name": "DrugInteractionBean", "method_name": "setSecondDrug", "params": ["String"]}, "DrugInteractionBean.setDescription(String)": {"calls": [], "called_by": ["DrugInteractionBeanLoader.loadSingle(ResultSet)", "DrugInteractionAction.reportInteraction(String,String,String)", "DrugInteractionAction.deleteInteraction(String,String)"], "class_name": "DrugInteractionBean", "method_name": "setDescription", "params": ["String"]}, "DrugInteractionValidator.validate(DrugInteractionBean)": {"calls": ["ErrorList.hasErrors()", "ErrorList.addIfNotNull(String)", "DrugInteractionBean.getDescription()", "DrugInteractionValidator.checkFormat(String,String,ValidationFormat,boolean)", "DrugInteractionBean.getFirstDrug()", "DrugInteractionBean.getSecondDrug()"], "called_by": ["DrugInteractionAction.reportInteraction(String,String,String)", "DrugInteractionValidator.validate(Object)", "DrugInteractionAction.deleteInteraction(String,String)"], "class_name": "DrugInteractionValidator", "method_name": "validate", "params": ["DrugInteractionBean"]}, "DrugInteractionDAO.reportInteraction(String,String,String)": {"calls": ["DrugInteractionDAO.getInteractions(String)", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "DrugInteractionBean.getSecondDrug()"], "called_by": ["DrugInteractionAction.reportInteraction(String,String,String)"], "class_name": "DrugInteractionDAO", "method_name": "reportInteraction", "params": ["String", "String", "String"]}, "DrugInteractionAction.deleteInteraction(String,String)": {"calls": ["DrugInteractionBean.setFirstDrug(String)", "DrugInteractionBean.setDescription(String)", "DrugInteractionDAO.deleteInteraction(String,String)", "DrugInteractionBean.setSecondDrug(String)", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long)", "DrugInteractionValidator.validate(DrugInteractionBean)", "DBException.printStackTrace()"], "called_by": [], "class_name": "DrugInteractionAction", "method_name": "deleteInteraction", "params": ["String", "String"]}, "DrugInteractionDAO.deleteInteraction(String,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["DrugInteractionAction.deleteInteraction(String,String)"], "class_name": "DrugInteractionDAO", "method_name": "deleteInteraction", "params": ["String", "String"]}, "DrugInteractionAction.getInteractions(String)": {"calls": ["DBException.getMessage()", "DrugInteractionDAO.getInteractions(String)"], "called_by": [], "class_name": "DrugInteractionAction", "method_name": "getInteractions", "params": ["String"]}, "DrugInteractionDAO.getInteractions(String)": {"calls": ["DAOFactory.getConnection()", "DrugInteractionBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)", "DrugInteractionAction.getInteractions(String)", "DrugInteractionDAO.reportInteraction(String,String,String)"], "class_name": "DrugInteractionDAO", "method_name": "getInteractions", "params": ["String"]}, "ReportAdverseEventAction.sendMails(List)": {"calls": ["Email.setSubject(String)", "Email.setToList(List)", "AdverseEventBean.getPrescriber()", "PatientDAO.getPatient(long)", "AdverseEventBean.getDrug()", "AdverseEventBean.getCode()", "PatientBean.getEmail()", "Email.setFrom(String)", "PersonnelBean.getEmail()", "PatientDAO.getName(long)", "AdverseEventBean.getDescription()", "AdverseEventBean.getMID()", "Email.setBody(String)", "PersonnelDAO.getPersonnel(long)", "TransactionDAO.logTransaction(TransactionType,long)", "AdverseEventBean.setDescription(String)", "EmailUtil.sendEmail(Email)"], "called_by": [], "class_name": "ReportAdverseEventAction", "method_name": "sendMails", "params": ["List"]}, "AdverseEventBean.getMID()": {"calls": [], "called_by": ["ReportAdverseEventAction.sendMails(List)", "MonitorAdverseEventAction.remove(int)", "AdverseEventDAO.addReport(AdverseEventBean,long)", "ReportAdverseEventAction.sendMail(AdverseEventBean)"], "class_name": "AdverseEventBean", "method_name": "getMID", "params": []}, "AdverseEventBean.getDrug()": {"calls": [], "called_by": ["ReportAdverseEventAction.sendMails(List)", "MonitorAdverseEventAction.remove(int)", "AdverseEventDAO.addReport(AdverseEventBean,long)", "ReportAdverseEventAction.sendMail(AdverseEventBean)"], "class_name": "AdverseEventBean", "method_name": "getDrug", "params": []}, "AdverseEventBean.getCode()": {"calls": [], "called_by": ["ReportAdverseEventAction.sendMails(List)", "AdverseEventDAO.addReport(AdverseEventBean,long)", "ReportAdverseEventAction.sendMail(AdverseEventBean)"], "class_name": "AdverseEventBean", "method_name": "getCode", "params": []}, "AdverseEventBean.getDescription()": {"calls": [], "called_by": ["AdverseEventValidator.validate(AdverseEventBean)", "ReportAdverseEventAction.sendMail(AdverseEventBean)", "ReportAdverseEventAction.sendMails(List)", "MonitorAdverseEventAction.remove(int)", "AdverseEventDAO.addReport(AdverseEventBean,long)"], "class_name": "AdverseEventBean", "method_name": "getDescription", "params": []}, "AdverseEventBean.setDescription(String)": {"calls": [], "called_by": ["ReportAdverseEventAction.sendMails(List)", "AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setDescription", "params": ["String"]}, "AdverseEventBean.getPrescriber()": {"calls": [], "called_by": ["ReportAdverseEventAction.sendMails(List)"], "class_name": "AdverseEventBean", "method_name": "getPrescriber", "params": []}, "ReportAdverseEventAction.sendMail(AdverseEventBean)": {"calls": ["Email.setSubject(String)", "Email.setToList(List)", "PatientDAO.getPatient(long)", "AdverseEventBean.getDrug()", "PatientBean.getEmail()", "AdverseEventBean.getCode()", "Email.setFrom(String)", "PersonnelBean.getEmail()", "PatientDAO.getName(long)", "AdverseEventBean.getDescription()", "AdverseEventBean.getMID()", "Email.setBody(String)", "PersonnelDAO.getPersonnel(long)", "TransactionDAO.logTransaction(TransactionType,long)", "EmailUtil.sendEmail(Email)"], "called_by": [], "class_name": "ReportAdverseEventAction", "method_name": "sendMail", "params": ["AdverseEventBean"]}, "ReportAdverseEventAction.addReport(AdverseEventBean)": {"calls": ["FormValidationException.getMessage()", "AdverseEventValidator.validate(AdverseEventBean)", "FormValidationException.printStackTrace()", "AdverseEventDAO.addReport(AdverseEventBean,long)", "DBException.getMessage()", "TransactionDAO.logTransaction(TransactionType,long)"], "called_by": [], "class_name": "ReportAdverseEventAction", "method_name": "addReport", "params": ["AdverseEventBean"]}, "AdverseEventValidator.validate(AdverseEventBean)": {"calls": ["ErrorList.hasErrors()", "AdverseEventValidator.checkFormat(String,String,ValidationFormat,boolean)", "AdverseEventBean.getDescription()", "ErrorList.addIfNotNull(String)"], "called_by": ["ReportAdverseEventAction.addReport(AdverseEventBean)", "AdverseEventValidator.validate(Object)"], "class_name": "AdverseEventValidator", "method_name": "validate", "params": ["AdverseEventBean"]}, "FormValidationException.printStackTrace()": {"calls": [], "called_by": ["ReportAdverseEventAction.addReport(AdverseEventBean)"], "class_name": "FormValidationException", "method_name": "printStackTrace", "params": []}, "FormValidationException.getMessage()": {"calls": ["ErrorList.toString()"], "called_by": ["ReportAdverseEventAction.addReport(AdverseEventBean)"], "class_name": "FormValidationException", "method_name": "getMessage", "params": []}, "AdverseEventDAO.addReport(AdverseEventBean,long)": {"calls": ["DAOFactory.getConnection()", "AdverseEventBean.getDescription()", "DBUtil.closeConnection(Connection,PreparedStatement)", "AdverseEventBean.getMID()", "AdverseEventBean.getDrug()", "AdverseEventBean.getCode()"], "called_by": ["ReportAdverseEventAction.addReport(AdverseEventBean)"], "class_name": "AdverseEventDAO", "method_name": "addReport", "params": ["AdverseEventBean", "long"]}, "ViewExpiredPrescriptionsAction.getPatient(long)": {"calls": ["PatientDAO.getPatient(long)"], "called_by": [], "class_name": "ViewExpiredPrescriptionsAction", "method_name": "getPatient", "params": ["long"]}, "ViewExpiredPrescriptionsAction.getRepresentees()": {"calls": ["PatientDAO.getRepresented(long)"], "called_by": [], "class_name": "ViewExpiredPrescriptionsAction", "method_name": "getRepresentees", "params": []}, "ViewExpiredPrescriptionsAction.getPrescribingDoctor(PrescriptionBean)": {"calls": ["PersonnelDAO.getPrescribingDoctor(PrescriptionBean)"], "called_by": [], "class_name": "ViewExpiredPrescriptionsAction", "method_name": "getPrescribingDoctor", "params": ["PrescriptionBean"]}, "ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)": {"calls": ["Email.setSubject(String)", "PersonnelBean.getMID()", "Email.setToList(List)", "PatientDAO.getPrescriptions(long)", "PatientDAO.getPatient(long)", "PatientDAO.getRepresenting(long)", "PatientDAO.getDeclaredHCPs(long)", "PatientBean.getEmail()", "Email.setFrom(String)", "PersonnelDAO.getUAPsForHCP(long)", "Email.setBody(String)", "PatientBean.getMID()", "TransactionDAO.logTransaction(TransactionType,long)", "EmailUtil.sendEmail(Email)", "PatientDAO.getExpiredPrescriptions(long)"], "called_by": [], "class_name": "ViewExpiredPrescriptionsAction", "method_name": "getPrescriptionsForPatient", "params": ["long"]}, "PatientDAO.getExpiredPrescriptions(long)": {"calls": ["DateUtil.getSQLdateXDaysAgoFromNow(int)", "DBUtil.closeConnection(Connection,PreparedStatement)", "PrescriptionBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()"], "called_by": ["ViewExpiredPrescriptionsAction.getPrescriptionsForPatient(long)"], "class_name": "PatientDAO", "method_name": "getExpiredPrescriptions", "params": ["long"]}, "EditRepresentativesAction.getRepresented(long)": {"calls": ["PatientDAO.getRepresented(long)"], "called_by": [], "class_name": "EditRepresentativesAction", "method_name": "getRepresented", "params": ["long"]}, "EditRepresentativesAction.addRepresentative(String)": {"calls": ["AuthDAO.getUserRole(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "PatientDAO.addRepresentative(long,long)"], "called_by": [], "class_name": "EditRepresentativesAction", "method_name": "addRepresentative", "params": ["String"]}, "PatientDAO.addRepresentative(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditRepresentativesAction.addRepresentative(String)"], "class_name": "PatientDAO", "method_name": "addRepresentative", "params": ["long", "long"]}, "EditRepresentativesAction.removeRepresentative(String)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "PatientDAO.removeRepresentative(long,long)"], "called_by": [], "class_name": "EditRepresentativesAction", "method_name": "removeRepresentative", "params": ["String"]}, "PatientDAO.removeRepresentative(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditRepresentativesAction.removeRepresentative(String)"], "class_name": "PatientDAO", "method_name": "removeRepresentative", "params": ["long", "long"]}, "EditPrescriptionAction.editPrescription(PrescriptionBean)": {"calls": ["OfficeVisitDAO.editPrescription(PrescriptionBean)"], "called_by": [], "class_name": "EditPrescriptionAction", "method_name": "editPrescription", "params": ["PrescriptionBean"]}, "OfficeVisitDAO.editPrescription(PrescriptionBean)": {"calls": ["PrescriptionBean.getId()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "called_by": ["EditPrescriptionAction.editPrescription(PrescriptionBean)"], "class_name": "OfficeVisitDAO", "method_name": "editPrescription", "params": ["PrescriptionBean"]}, "EditPHRAction.updateAllergies(long,String)": {"calls": ["AllergyDAO.addAllergy(long,String)", "AllergyBean.setDescription(String)", "FormValidationException.getErrorList()", "EditPHRAction.makeEmail()", "AllergyBeanValidator.validate(AllergyBean)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "EmailUtil.sendEmail(Email)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "updateAllergies", "params": ["long", "String"]}, "EditPHRAction.makeEmail()": {"calls": ["Email.setFrom(String)", "Email.setToList(List)", "Email.setSubject(String)", "PersonnelBean.getFullName()", "PatientDAO.getRepresenting(long)", "Email.setBody(String)", "PatientBean.getMID()", "PatientBean.getEmail()"], "called_by": ["EditPHRAction.updateAllergies(long,String)"], "class_name": "EditPHRAction", "method_name": "makeEmail", "params": []}, "AllergyBean.setDescription(String)": {"calls": [], "called_by": ["EditPHRAction.updateAllergies(long,String)", "AllergyBeanLoader.loadSingle(ResultSet)"], "class_name": "AllergyBean", "method_name": "setDescription", "params": ["String"]}, "AllergyBeanValidator.validate(AllergyBean)": {"calls": ["ErrorList.hasErrors()", "AllergyBeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "AllergyBean.getDescription()", "ErrorList.addIfNotNull(String)"], "called_by": ["EditPHRAction.updateAllergies(long,String)", "AllergyBeanValidator.validate(Object)"], "class_name": "AllergyBeanValidator", "method_name": "validate", "params": ["AllergyBean"]}, "AllergyDAO.addAllergy(long,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditPHRAction.updateAllergies(long,String)"], "class_name": "AllergyDAO", "method_name": "addAllergy", "params": ["long", "String"]}, "FormValidationException.getErrorList()": {"calls": ["ErrorList.getMessageList()"], "called_by": ["EditPHRAction.updateAllergies(long,String)"], "class_name": "FormValidationException", "method_name": "getErrorList", "params": []}, "EditPHRAction.getPatient()": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "PatientDAO.getPatient(long)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getPatient", "params": []}, "EditPHRAction.getAllergies()": {"calls": ["AllergyDAO.getAllergies(long)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getAllergies", "params": []}, "EditPHRAction.getFamily()": {"calls": ["FamilyDAO.getSiblings(long)", "FamilyDAO.getParents(long)", "FamilyMemberBean.getMid()", "FamilyMemberBean.setRelation(String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "FamilyDAO.getChildren(long)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getFamily", "params": []}, "EditPHRAction.getAllHealthRecords()": {"calls": ["HealthRecordsDAO.getAllHealthRecords(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getAllHealthRecords", "params": []}, "EditPHRAction.getAllOfficeVisits()": {"calls": ["OfficeVisitDAO.getAllOfficeVisits(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getAllOfficeVisits", "params": []}, "EditPHRAction.getCompleteOfficeVisit(long)": {"calls": ["OfficeVisitDAO.getOfficeVisit(long)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getCompleteOfficeVisit", "params": ["long"]}, "EditPHRAction.getDiseasesAtRisk()": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "ChronicDiseaseMediator.getDiseaseAtRisk()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getDiseasesAtRisk", "params": []}, "EditPHRAction.doesFamilyMemberHaveHighBP(FamilyMemberBean)": {"calls": ["HealthRecord.getBloodPressureSystolic()", "HealthRecord.getBloodPressureDiastolic()", "HealthRecordsDAO.getAllHealthRecords(long)", "FamilyMemberBean.getMid()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "doesFamilyMemberHaveHighBP", "params": ["FamilyMemberBean"]}, "EditPHRAction.doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)": {"calls": ["HealthRecord.getCholesterolHDL()", "HealthRecordsDAO.getAllHealthRecords(long)", "HealthRecord.getCholesterolLDL()", "FamilyMemberBean.getMid()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "doesFamilyMemberHaveHighCholesterol", "params": ["FamilyMemberBean"]}, "EditPHRAction.doesFamilyMemberHaveDiabetes(FamilyMemberBean)": {"calls": ["PatientDAO.getDiagnoses(long)", "FamilyMemberBean.getMid()", "DiagnosisBean.getICDCode()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "doesFamilyMemberHaveDiabetes", "params": ["FamilyMemberBean"]}, "EditPHRAction.doesFamilyMemberHaveCancer(FamilyMemberBean)": {"calls": ["PatientDAO.getDiagnoses(long)", "FamilyMemberBean.getMid()", "DiagnosisBean.getICDCode()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "doesFamilyMemberHaveCancer", "params": ["FamilyMemberBean"]}, "EditPHRAction.doesFamilyMemberHaveHeartDisease(FamilyMemberBean)": {"calls": ["PatientDAO.getDiagnoses(long)", "FamilyMemberBean.getMid()", "DiagnosisBean.getICDCode()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "doesFamilyMemberHaveHeartDisease", "params": ["FamilyMemberBean"]}, "EditPHRAction.isFamilyMemberSmoker(FamilyMemberBean)": {"calls": ["HealthRecordsDAO.getAllHealthRecords(long)", "HealthRecord.isSmoker()", "FamilyMemberBean.getMid()"], "called_by": [], "class_name": "EditPHRAction", "method_name": "isFamilyMemberSmoker", "params": ["FamilyMemberBean"]}, "EditPHRAction.getFamilyMemberCOD(FamilyMemberBean)": {"calls": ["DiagnosisBean.getDescription()", "FamilyMemberBean.getMid()", "PatientDAO.getPatient(long)", "PatientBean.getCauseOfDeath()", "ICDCodesDAO.getICDCode(String)"], "called_by": [], "class_name": "EditPHRAction", "method_name": "getFamilyMemberCOD", "params": ["FamilyMemberBean"]}, "ViewSurveyResultAction.getSurveyResultsForHospital(SurveyResultBean)": {"calls": ["SurveyResultDAO.getSurveyResultsForHospital(String,String)", "SurveyResultBean.getHCPspecialty()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "SurveyResultBean.getHCPhospital()"], "called_by": [], "class_name": "ViewSurveyResultAction", "method_name": "getSurveyResultsForHospital", "params": ["SurveyResultBean"]}, "SurveyResultBean.getHCPhospital()": {"calls": [], "called_by": ["ViewSurveyResultAction.getSurveyResultsForHospital(SurveyResultBean)"], "class_name": "SurveyResultBean", "method_name": "getHCPhospital", "params": []}, "SurveyResultBean.getHCPspecialty()": {"calls": [], "called_by": ["ViewSurveyResultAction.getSurveyResultsForZip(SurveyResultBean)", "ViewSurveyResultAction.getSurveyResultsForHospital(SurveyResultBean)"], "class_name": "SurveyResultBean", "method_name": "getHCPspecialty", "params": []}, "SurveyResultDAO.getSurveyResultsForHospital(String,String)": {"calls": ["DAOFactory.getConnection()", "SurveyResultBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewSurveyResultAction.getSurveyResultsForHospital(SurveyResultBean)"], "class_name": "SurveyResultDAO", "method_name": "getSurveyResultsForHospital", "params": ["String", "String"]}, "ViewSurveyResultAction.getSurveyResultsForZip(SurveyResultBean)": {"calls": ["SurveySearchValidator.validate(SurveyResultBean)", "SurveyResultDAO.getSurveyResultsForZip(String,String)", "SurveyResultBean.getHCPzip()", "SurveyResultBean.getHCPspecialty()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "ViewSurveyResultAction", "method_name": "getSurveyResultsForZip", "params": ["SurveyResultBean"]}, "SurveySearchValidator.validate(SurveyResultBean)": {"calls": ["SurveySearchValidator.checkFormat(String,String,ValidationFormat,boolean)", "ErrorList.hasErrors()", "SurveyResultBean.getHCPzip()", "ErrorList.addIfNotNull(String)"], "called_by": ["ViewSurveyResultAction.getSurveyResultsForZip(SurveyResultBean)", "SurveySearchValidator.validate(Object)"], "class_name": "SurveySearchValidator", "method_name": "validate", "params": ["SurveyResultBean"]}, "SurveyResultBean.getHCPzip()": {"calls": [], "called_by": ["ViewSurveyResultAction.getSurveyResultsForZip(SurveyResultBean)", "SurveySearchValidator.validate(SurveyResultBean)"], "class_name": "SurveyResultBean", "method_name": "getHCPzip", "params": []}, "SurveyResultDAO.getSurveyResultsForZip(String,String)": {"calls": ["DAOFactory.getConnection()", "SurveyResultBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewSurveyResultAction.getSurveyResultsForZip(SurveyResultBean)"], "class_name": "SurveyResultDAO", "method_name": "getSurveyResultsForZip", "params": ["String", "String"]}, "DeclareHCPAction.getDeclaredHCPS()": {"calls": ["PatientDAO.getDeclaredHCPs(long)"], "called_by": [], "class_name": "DeclareHCPAction", "method_name": "getDeclaredHCPS", "params": []}, "PatientDAO.declareHCP(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["DeclareHCPAction.declareHCP(String)"], "class_name": "PatientDAO", "method_name": "declareHCP", "params": ["long", "long"]}, "PatientDAO.undeclareHCP(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["DeclareHCPAction.undeclareHCP(String)"], "class_name": "PatientDAO", "method_name": "undeclareHCP", "params": ["long", "long"]}, "GetUserNameAction.getUserName(String)": {"calls": ["DAOFactory.getAuthDAO()", "AuthDAO.getUserName(long)"], "called_by": [], "class_name": "GetUserNameAction", "method_name": "getUserName", "params": ["String"]}, "ViewReportAction.getDiagnoses(long)": {"calls": ["PatientDAO.getDiagnoses(long)"], "called_by": [], "class_name": "ViewReportAction", "method_name": "getDiagnoses", "params": ["long"]}, "ViewReportAction.getProcedures(long)": {"calls": ["PatientDAO.getProcedures(long)"], "called_by": [], "class_name": "ViewReportAction", "method_name": "getProcedures", "params": ["long"]}, "ViewReportAction.getPrescriptions(long)": {"calls": ["PatientDAO.getCurrentPrescriptions(long)"], "called_by": [], "class_name": "ViewReportAction", "method_name": "getPrescriptions", "params": ["long"]}, "ViewReportAction.getDeclaredHCPs(long)": {"calls": ["PatientDAO.getDeclaredHCPs(long)"], "called_by": [], "class_name": "ViewReportAction", "method_name": "getDeclaredHCPs", "params": ["long"]}, "ViewReportAction.getPersonnel(long)": {"calls": ["PersonnelDAO.getPersonnel(long)"], "called_by": [], "class_name": "ViewReportAction", "method_name": "getPersonnel", "params": ["long"]}, "ViewMyReportRequestsAction.getAllReportRequestsForRequester()": {"calls": ["ReportRequestDAO.getAllReportRequestsForRequester(long)"], "called_by": [], "class_name": "ViewMyReportRequestsAction", "method_name": "getAllReportRequestsForRequester", "params": []}, "ReportRequestDAO.getAllReportRequestsForRequester(long)": {"calls": ["DAOFactory.getConnection()", "ReportRequestBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyReportRequestsAction.getAllReportRequestsForRequester()"], "class_name": "ReportRequestDAO", "method_name": "getAllReportRequestsForRequester", "params": ["long"]}, "ViewMyReportRequestsAction.addReportRequest(long)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "ReportRequestDAO.addReportRequest(long,long,Date)"], "called_by": [], "class_name": "ViewMyReportRequestsAction", "method_name": "addReportRequest", "params": ["long"]}, "ReportRequestDAO.addReportRequest(long,long,Date)": {"calls": ["DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyReportRequestsAction.addReportRequest(long)"], "class_name": "ReportRequestDAO", "method_name": "addReportRequest", "params": ["long", "long", "Date"]}, "ViewMyReportRequestsAction.getReportRequest(int)": {"calls": ["ReportRequestDAO.getReportRequest(long)"], "called_by": [], "class_name": "ViewMyReportRequestsAction", "method_name": "getReportRequest", "params": ["int"]}, "ReportRequestDAO.getReportRequest(long)": {"calls": ["ReportRequestBeanLoader.loadSingle(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyReportRequestsAction.getReportRequest(int)", "ViewMyReportRequestsAction.getLongStatus(long)"], "class_name": "ReportRequestDAO", "method_name": "getReportRequest", "params": ["long"]}, "ViewMyReportRequestsAction.setViewed(int)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "ReportRequestDAO.setViewed(long,Date)"], "called_by": [], "class_name": "ViewMyReportRequestsAction", "method_name": "setViewed", "params": ["int"]}, "ReportRequestDAO.setViewed(long,Date)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ViewMyReportRequestsAction.setViewed(int)"], "class_name": "ReportRequestDAO", "method_name": "setViewed", "params": ["long", "Date"]}, "ViewMyReportRequestsAction.getLongStatus(long)": {"calls": ["ReportRequestBean.getRequestedDateString()", "PersonnelBean.getFullName()", "ReportRequestBean.getViewedDateString()", "PersonnelDAO.getPersonnel(long)", "ReportRequestBean.getRequesterMID()", "ReportRequestDAO.getReportRequest(long)", "ReportRequestBean.getStatus()"], "called_by": [], "class_name": "ViewMyReportRequestsAction", "method_name": "getLongStatus", "params": ["long"]}, "ReportRequestBean.getStatus()": {"calls": [], "called_by": ["ViewMyReportRequestsAction.getLongStatus(long)"], "class_name": "ReportRequestBean", "method_name": "getStatus", "params": []}, "ReportRequestBean.getRequesterMID()": {"calls": [], "called_by": ["ViewMyReportRequestsAction.getLongStatus(long)"], "class_name": "ReportRequestBean", "method_name": "getRequesterMID", "params": []}, "ReportRequestBean.getRequestedDateString()": {"calls": [], "called_by": ["ViewMyReportRequestsAction.getLongStatus(long)"], "class_name": "ReportRequestBean", "method_name": "getRequestedDateString", "params": []}, "ReportRequestBean.getViewedDateString()": {"calls": [], "called_by": ["ViewMyReportRequestsAction.getLongStatus(long)"], "class_name": "ReportRequestBean", "method_name": "getViewedDateString", "params": []}, "MyDiagnosisAction.getDiagnoses()": {"calls": ["PatientDAO.getDiagnoses(long)"], "called_by": [], "class_name": "MyDiagnosisAction", "method_name": "getDiagnoses", "params": []}, "MyDiagnosisAction.getHCPByDiagnosis(String)": {"calls": ["PersonnelBean.getZip1()", "PatientBean.getZip1()", "MedicationBean.getDescription()", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)", "HCPDiagnosisBean.setTreatmentSat(int)", "LabProcedureDAO.getAllLabProceduresForDocOV(long)", "SurveyBean.getVisitSatisfaction()", "HCPDiagnosisBean.incNumPatients()", "OfficeVisitBean.getPatientID()", "HCPDiagnosisBean.getMedList()", "HCPDiagnosisBean.setVisitSat(int)", "TransactionDAO.logTransaction(TransactionType,long)", "OfficeVisitBean.getPrescriptions()", "PrescriptionBean.getMedication()", "PatientDAO.getPatient(long)", "PersonnelDAO.getName(long)", "HCPDiagnosisBean.setMedList(List)", "HCPDiagnosisBean.setHCPName(String)", "HCPDiagnosisBean.setHCP(long)", "OfficeVisitBean.getVisitID()", "SurveyDAO.isSurveyCompleted(long)", "HCPDiagnosisBean.getLabList()", "OfficeVisitBean.getHcpID()", "SurveyDAO.getSurveyData(long)", "HCPDiagnosisBean.setLabList(List)", "PersonnelDAO.getPersonnel(long)", "SurveyBean.getTreatmentSatisfaction()"], "called_by": [], "class_name": "MyDiagnosisAction", "method_name": "getHCPByDiagnosis", "params": ["String"]}, "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DiagnosisBean.getVisitID()", "OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)", "DiagnosisBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()"], "called_by": ["MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,String)", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "OfficeVisitDAO", "method_name": "getAllOfficeVisitsForDiagnosis", "params": ["String"]}, "PatientBean.getZip1()": {"calls": [], "called_by": ["PatientBean.getZip()", "MyDiagnosisAction.getHCPByDiagnosis(String)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getZip1", "params": []}, "PersonnelBean.getZip1()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "PersonnelBean.getZip()", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "PersonnelBean", "method_name": "getZip1", "params": []}, "OfficeVisitBean.getPrescriptions()": {"calls": [], "called_by": ["MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,String)", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "OfficeVisitBean", "method_name": "getPrescriptions", "params": []}, "HCPDiagnosisBean.getMedList()": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "getMedList", "params": []}, "HCPDiagnosisBean.setMedList(List)": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "setMedList", "params": ["List"]}, "HCPDiagnosisBean.getLabList()": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "getLabList", "params": []}, "OfficeVisitBean.getVisitID()": {"calls": [], "called_by": ["PrescriptionReportAction.getPrescriptionReports(Map,List)", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "OfficeVisitBean", "method_name": "getVisitID", "params": []}, "LabProcedureDAO.getAllLabProceduresForDocOV(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "LabProcedureDAO", "method_name": "getAllLabProceduresForDocOV", "params": ["long"]}, "HCPDiagnosisBean.setLabList(List)": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "setLabList", "params": ["List"]}, "SurveyDAO.getSurveyData(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "SurveyLoader.loadSingle(ResultSet)"], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "SurveyDAO", "method_name": "getSurveyData", "params": ["long"]}, "SurveyBean.getVisitSatisfaction()": {"calls": [], "called_by": ["SurveyDAO.addCompletedSurvey(SurveyBean,Date)", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "SurveyBean", "method_name": "getVisitSatisfaction", "params": []}, "HCPDiagnosisBean.setVisitSat(int)": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "setVisitSat", "params": ["int"]}, "SurveyBean.getTreatmentSatisfaction()": {"calls": [], "called_by": ["SurveyDAO.addCompletedSurvey(SurveyBean,Date)", "MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "SurveyBean", "method_name": "getTreatmentSatisfaction", "params": []}, "HCPDiagnosisBean.setTreatmentSat(int)": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "setTreatmentSat", "params": ["int"]}, "HCPDiagnosisBean.incNumPatients()": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "incNumPatients", "params": []}, "HCPDiagnosisBean.setHCP(long)": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "setHCP", "params": ["long"]}, "HCPDiagnosisBean.setHCPName(String)": {"calls": [], "called_by": ["MyDiagnosisAction.getHCPByDiagnosis(String)"], "class_name": "HCPDiagnosisBean", "method_name": "setHCPName", "params": ["String"]}, "MyDiagnosisAction.getPrescriptionsByHCPAndICD(long,String)": {"calls": ["OfficeVisitBean.getPrescriptions()", "OfficeVisitBean.getHcpID()", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)"], "called_by": [], "class_name": "MyDiagnosisAction", "method_name": "getPrescriptionsByHCPAndICD", "params": ["long", "String"]}, "EditHealthHistoryAction.getPatientName()": {"calls": ["AuthDAO.getUserName(long)"], "called_by": [], "class_name": "EditHealthHistoryAction", "method_name": "getPatientName", "params": []}, "EditHealthHistoryAction.addHealthRecord(long,HealthRecordForm)": {"calls": ["HealthRecordsDAO.add(HealthRecord)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "called_by": [], "class_name": "EditHealthHistoryAction", "method_name": "addHealthRecord", "params": ["long", "HealthRecordForm"]}, "HealthRecordFormValidator.validate(HealthRecordForm)": {"calls": ["HealthRecordForm.getCholesterolHDL()", "HealthRecordFormValidator.checkFormat(String,String,ValidationFormat,boolean)", "HealthRecordFormValidator.checkBoolean(String,String)", "HealthRecordForm.getCholesterolTri()", "HealthRecordForm.getBloodPressureN()", "ErrorList.addIfNotNull(String)", "ErrorList.hasErrors()", "HealthRecordForm.getBloodPressureD()", "HealthRecordFormValidator.checkInt(String,String,int,int,boolean)", "HealthRecordForm.getIsSmoker()", "HealthRecordForm.getCholesterolLDL()", "HealthRecordForm.getHeight()", "HealthRecordForm.getWeight()"], "called_by": ["HealthRecordFormValidator.validate(Object)", "EditHealthHistoryAction.addHealthRecord(long,HealthRecordForm)"], "class_name": "HealthRecordFormValidator", "method_name": "validate", "params": ["HealthRecordForm"]}, "EditHealthHistoryAction.transferForm(long,HealthRecordForm)": {"calls": ["HealthRecord.setHeight(double)", "HealthRecord.setBloodPressureD(int)", "HealthRecord.setSmoker(boolean)", "HealthRecordForm.getBloodPressureN()", "HealthRecord.setWeight(double)", "HealthRecord.getTotalCholesterol()", "HealthRecordForm.getBloodPressureD()", "HealthRecord.setBloodPressureN(int)", "HealthRecord.setCholesterolHDL(int)", "HealthRecordForm.getIsSmoker()", "HealthRecordForm.getHeight()", "HealthRecordForm.getWeight()", "HealthRecordForm.getCholesterolHDL()", "HealthRecord.setCholesterolLDL(int)", "HealthRecord.setCholesterolTri(int)", "HealthRecord.setPersonnelID(long)", "HealthRecordForm.getCholesterolTri()", "HealthRecord.setPatientID(long)", "HealthRecordForm.getCholesterolLDL()"], "called_by": ["EditHealthHistoryAction.addHealthRecord(long,HealthRecordForm)"], "class_name": "EditHealthHistoryAction", "method_name": "transferForm", "params": ["long", "HealthRecordForm"]}, "HealthRecordsDAO.add(HealthRecord)": {"calls": ["DAOFactory.getConnection()", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditHealthHistoryAction.addHealthRecord(long,HealthRecordForm)"], "class_name": "HealthRecordsDAO", "method_name": "add", "params": ["HealthRecord"]}, "HealthRecord.setPatientID(long)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setPatientID", "params": ["long"]}, "HealthRecord.setPersonnelID(long)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setPersonnelID", "params": ["long"]}, "HealthRecordForm.getBloodPressureD()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getBloodPressureD", "params": []}, "HealthRecord.setBloodPressureD(int)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setBloodPressureD", "params": ["int"]}, "HealthRecordForm.getBloodPressureN()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getBloodPressureN", "params": []}, "HealthRecord.setBloodPressureN(int)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setBloodPressureN", "params": ["int"]}, "HealthRecordForm.getCholesterolHDL()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getCholesterolHDL", "params": []}, "HealthRecord.setCholesterolHDL(int)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setCholesterolHDL", "params": ["int"]}, "HealthRecordForm.getCholesterolLDL()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getCholesterolLDL", "params": []}, "HealthRecord.setCholesterolLDL(int)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setCholesterolLDL", "params": ["int"]}, "HealthRecordForm.getCholesterolTri()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getCholesterolTri", "params": []}, "HealthRecord.setCholesterolTri(int)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setCholesterolTri", "params": ["int"]}, "HealthRecord.getTotalCholesterol()": {"calls": ["HealthRecord.getCholesterolHDL()", "HealthRecord.getCholesterolLDL()", "HealthRecord.getCholesterolTri()"], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "getTotalCholesterol", "params": []}, "HealthRecordForm.getHeight()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getHeight", "params": []}, "HealthRecord.setHeight(double)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setHeight", "params": ["double"]}, "HealthRecordForm.getWeight()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getWeight", "params": []}, "HealthRecord.setWeight(double)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setWeight", "params": ["double"]}, "HealthRecordForm.getIsSmoker()": {"calls": [], "called_by": ["EditHealthHistoryAction.transferForm(long,HealthRecordForm)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordForm", "method_name": "getIsSmoker", "params": []}, "HealthRecord.setSmoker(boolean)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)", "EditHealthHistoryAction.transferForm(long,HealthRecordForm)"], "class_name": "HealthRecord", "method_name": "setSmoker", "params": ["boolean"]}, "EditHealthHistoryAction.getAllHealthRecords(long)": {"calls": ["HealthRecordsDAO.getAllHealthRecords(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "EditHealthHistoryAction", "method_name": "getAllHealthRecords", "params": ["long"]}, "GenerateCalendarAction.getConflicts()": {"calls": ["ApptBean.getApptType()", "ApptBean.getDate()", "EditApptTypeAction.getDurationByType(String)"], "called_by": [], "class_name": "GenerateCalendarAction", "method_name": "getConflicts", "params": []}, "GenerateCalendarAction.getApptsTable(int,int)": {"calls": ["ApptBean.getDate()", "ViewMyApptsAction.getMyAppointments()"], "called_by": [], "class_name": "GenerateCalendarAction", "method_name": "getApptsTable", "params": ["int", "int"]}, "GenerateCalendarAction.getOfficeVisitsTable(int,int)": {"calls": ["OfficeVisitBean.getVisitDate()", "ViewMyRecordsAction.getAllOfficeVisits()"], "called_by": [], "class_name": "GenerateCalendarAction", "method_name": "getOfficeVisitsTable", "params": ["int", "int"]}, "GenerateCalendarAction.getLabProceduresTable(int,int)": {"calls": ["ViewMyRecordsAction.getLabs()", "LabProcedureBean.getTimestamp()"], "called_by": [], "class_name": "GenerateCalendarAction", "method_name": "getLabProceduresTable", "params": ["int", "int"]}, "LabProcedureBean.getTimestamp()": {"calls": [], "called_by": ["GenerateCalendarAction.getLabProceduresTable(int,int)"], "class_name": "LabProcedureBean", "method_name": "getTimestamp", "params": []}, "ViewOfficeVisitAction.checkRepresented(long,String)": {"calls": ["PatientDAO.represents(long,long)", "Messages.getString(String)"], "called_by": [], "class_name": "ViewOfficeVisitAction", "method_name": "checkRepresented", "params": ["long", "String"]}, "ViewOfficeVisitAction.getOfficeVisit()": {"calls": ["OfficeVisitDAO.getOfficeVisit(long)"], "called_by": [], "class_name": "ViewOfficeVisitAction", "method_name": "getOfficeVisit", "params": []}, "ViewOfficeVisitAction.getPrescriptions()": {"calls": ["OfficeVisitDAO.getPrescriptions(long)"], "called_by": [], "class_name": "ViewOfficeVisitAction", "method_name": "getPrescriptions", "params": []}, "OfficeVisitDAO.getPrescriptions(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PrescriptionBeanLoader.loadList(ResultSet)"], "called_by": ["ViewOfficeVisitAction.getPrescriptions()", "OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "class_name": "OfficeVisitDAO", "method_name": "getPrescriptions", "params": ["long"]}, "ViewOfficeVisitAction.getHCPName(long)": {"calls": ["iTrustException.getMessage()", "iTrustException.printStackTrace()", "PersonnelDAO.getName(long)"], "called_by": [], "class_name": "ViewOfficeVisitAction", "method_name": "getHCPName", "params": ["long"]}, "iTrustException.printStackTrace()": {"calls": [], "called_by": ["ViewOfficeVisitAction.getHCPName(long)", "ResetPasswordAction.checkRole(long,String)", "EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "iTrustException", "method_name": "printStackTrace", "params": []}, "EditOfficeVisitAction.getOfficeVisit()": {"calls": ["OfficeVisitDAO.getOfficeVisit(long)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitAction", "method_name": "getOfficeVisit", "params": []}, "EditOfficeVisitAction.getLabProcedures(long,long)": {"calls": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "LabProcedureDAO.getAllLabProceduresForDocOV(long,long)"], "called_by": [], "class_name": "EditOfficeVisitAction", "method_name": "getLabProcedures", "params": ["long", "long"]}, "LabProcedureDAO.getAllLabProceduresForDocOV(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["EditOfficeVisitAction.getLabProcedures(long,long)"], "class_name": "LabProcedureDAO", "method_name": "getAllLabProceduresForDocOV", "params": ["long", "long"]}, "EditOfficeVisitAction.getHospitals(long)": {"calls": ["PersonnelDAO.getHospitals(long)", "EditOfficeVisitAction.combineLists(List,List)", "HospitalsDAO.getAllHospitals()"], "called_by": [], "class_name": "EditOfficeVisitAction", "method_name": "getHospitals", "params": ["long"]}, "EditOfficeVisitAction.combineLists(List,List)": {"calls": [], "called_by": ["EditOfficeVisitAction.getHospitals(long)"], "class_name": "EditOfficeVisitAction", "method_name": "combineLists", "params": ["List", "List"]}, "EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)": {"calls": ["EditOfficeVisitForm.getRemoveImmunizationID()", "EditOfficeVisitAction.getOfficeVisit()", "EditOfficeVisitForm.getRemoveDiagID()", "iTrustException.printStackTrace()", "OfficeVisitBean.getPatientID()", "EditOfficeVisitForm.getRemoveMedID()", "EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitForm.getHcpID()", "EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String,String)", "EditOfficeVisitAction.checkRemoveSubAction(EditOfficeVisitAction$OVSubAction,String)", "EditOfficeVisitForm.getRemoveLabProcID()", "iTrustException.getMessage()", "EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String)", "EditOfficeVisitForm.getRemoveProcID()", "EditOfficeVisitForm.getAddDiagID()", "EditOfficeVisitForm.getAddLabProcID()", "EditOfficeVisitForm.getAddProcID()", "EditOfficeVisitForm.getAddImmunizationID()", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "EditOfficeVisitAction", "method_name": "updateInformation", "params": ["EditOfficeVisitForm"]}, "EditOfficeVisitForm.getAddDiagID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getAddDiagID", "params": []}, "EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String)": {"calls": ["OfficeVisitDAO.addDiagnosisToOfficeVisit(double,long)", "OfficeVisitDAO.addProcedureToOfficeVisit(String,long,String)", "OfficeVisitDAO.addLabProcedureToOfficeVisit(String,long,long)"], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitAction", "method_name": "checkAddSubAction", "params": ["EditOfficeVisitAction$OVSubAction", "String", "long", "String"]}, "EditOfficeVisitForm.getAddProcID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getAddProcID", "params": []}, "EditOfficeVisitForm.getAddImmunizationID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getAddImmunizationID", "params": []}, "EditOfficeVisitForm.getHcpID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getHcpID", "params": []}, "EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String,String)": {"calls": ["OfficeVisitDAO.addProcedureToOfficeVisit(String,long,String)"], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitAction", "method_name": "checkAddSubAction", "params": ["EditOfficeVisitAction$OVSubAction", "String", "long", "String", "String"]}, "EditOfficeVisitForm.getAddLabProcID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getAddLabProcID", "params": []}, "EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)": {"calls": ["EditOfficeVisitForm.getDosage()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "PrescriptionBean.setVisitID(long)", "MedicationBean.setNDCode(String)", "PrescriptionBean.getMedication()", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)", "EditOfficeVisitForm.getInstructions()", "EditOfficeVisitForm.getStartDate()", "OfficeVisitDAO.addPrescription(PrescriptionBean)", "MedicationBean.getNDCode()", "PrescriptionBean.setDosage(int)", "PrescriptionBean.setInstructions(String)", "PrescriptionBean.setMedication(MedicationBean)", "PrescriptionBean.setStartDateStr(String)", "EditOfficeVisitForm.getAddMedID()", "PrescriptionBean.setEndDateStr(String)", "EditOfficeVisitForm.getEndDate()"], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitAction", "method_name": "checkAddPrescription", "params": ["EditOfficeVisitForm", "long"]}, "EditOfficeVisitForm.getRemoveDiagID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getRemoveDiagID", "params": []}, "EditOfficeVisitAction.checkRemoveSubAction(EditOfficeVisitAction$OVSubAction,String)": {"calls": ["OfficeVisitDAO.removeProcedureFromOfficeVisit(long)", "OfficeVisitDAO.removeDiagnosisFromOfficeVisit(long)", "OfficeVisitDAO.removeLabProcedureFromOfficeVisit(long)", "OfficeVisitDAO.removePrescription(long)"], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitAction", "method_name": "checkRemoveSubAction", "params": ["EditOfficeVisitAction$OVSubAction", "String"]}, "EditOfficeVisitForm.getRemoveLabProcID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getRemoveLabProcID", "params": []}, "EditOfficeVisitForm.getRemoveProcID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getRemoveProcID", "params": []}, "EditOfficeVisitForm.getRemoveImmunizationID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getRemoveImmunizationID", "params": []}, "EditOfficeVisitForm.getRemoveMedID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getRemoveMedID", "params": []}, "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)": {"calls": ["EditOfficeVisitForm.getVisitDate()", "EditOfficeVisitForm.getHcpID()", "OfficeVisitBean.setPatientID(long)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)", "OfficeVisitBean.setHcpID(long)", "OfficeVisitBean.setNotes(String)", "OfficeVisitBean.setVisitDateStr(String)", "EditOfficeVisitForm.getHospitalID()", "OfficeVisitBean.setHospitalID(String)", "OfficeVisitDAO.update(OfficeVisitBean)", "EditOfficeVisitForm.getPatientID()", "EditOfficeVisitForm.getNotes()", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": ["EditOfficeVisitAction.updateInformation(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitAction", "method_name": "updateOv", "params": ["EditOfficeVisitForm"]}, "EditOfficeVisitAction.hasInteraction(String,String,String,String)": {"calls": ["DrugInteractionDAO.getInteractions(String)", "PrescriptionBean.getMedication()", "MedicationBean.getDescription()", "OfficeVisitDAO.getPrescriptionReportsByDate(long,String,String)", "NDCodesDAO.getNDCode(String)", "MedicationBean.getNDCode()", "PrescriptionBean.getStartDateStr()", "PrescriptionBean.getEndDateStr()", "DrugInteractionBean.getDescription()", "PrescriptionReportBean.getPrescription()", "DrugInteractionBean.getFirstDrug()", "DBException.getMessage()", "DBException.printStackTrace()", "DrugInteractionBean.getSecondDrug()"], "called_by": [], "class_name": "EditOfficeVisitAction", "method_name": "hasInteraction", "params": ["String", "String", "String", "String"]}, "OfficeVisitDAO.getPrescriptionReportsByDate(long,String,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PrescriptionReportBeanLoader.loadList(ResultSet)"], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)"], "class_name": "OfficeVisitDAO", "method_name": "getPrescriptionReportsByDate", "params": ["long", "String", "String"]}, "PrescriptionReportBean.getPrescription()": {"calls": [], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)"], "class_name": "PrescriptionReportBean", "method_name": "getPrescription", "params": []}, "DrugInteractionBean.getFirstDrug()": {"calls": [], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)", "DrugInteractionValidator.validate(DrugInteractionBean)"], "class_name": "DrugInteractionBean", "method_name": "getFirstDrug", "params": []}, "DrugInteractionBean.getSecondDrug()": {"calls": [], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)", "DrugInteractionValidator.validate(DrugInteractionBean)", "DrugInteractionDAO.reportInteraction(String,String,String)"], "class_name": "DrugInteractionBean", "method_name": "getSecondDrug", "params": []}, "PrescriptionBean.getStartDateStr()": {"calls": [], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)"], "class_name": "PrescriptionBean", "method_name": "getStartDateStr", "params": []}, "PrescriptionBean.getEndDateStr()": {"calls": [], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)"], "class_name": "PrescriptionBean", "method_name": "getEndDateStr", "params": []}, "NDCodesDAO.getNDCode(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "MedicationBeanLoader.loadSingle(ResultSet)"], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)", "EditOfficeVisitAction.isAllergyOnList(String,String)"], "class_name": "NDCodesDAO", "method_name": "getNDCode", "params": ["String"]}, "DrugInteractionBean.getDescription()": {"calls": [], "called_by": ["EditOfficeVisitAction.hasInteraction(String,String,String,String)", "DrugInteractionValidator.validate(DrugInteractionBean)"], "class_name": "DrugInteractionBean", "method_name": "getDescription", "params": []}, "EditOfficeVisitAction.isAllergyOnList(String,String)": {"calls": ["DBException.printStackTrace()", "MedicationBean.getDescription()", "NDCodesDAO.getNDCode(String)", "AllergyBean.getDescription()", "DBException.getMessage()", "AllergyDAO.getAllergies(long)", "AllergyBean.getFirstFoundStr()"], "called_by": [], "class_name": "EditOfficeVisitAction", "method_name": "isAllergyOnList", "params": ["String", "String"]}, "AllergyBean.getDescription()": {"calls": [], "called_by": ["EditOfficeVisitAction.isAllergyOnList(String,String)", "AllergyBeanValidator.validate(AllergyBean)"], "class_name": "AllergyBean", "method_name": "getDescription", "params": []}, "AllergyBean.getFirstFoundStr()": {"calls": ["AllergyBean.getFirstFound()"], "called_by": ["EditOfficeVisitAction.isAllergyOnList(String,String)"], "class_name": "AllergyBean", "method_name": "getFirstFoundStr", "params": []}, "EditOfficeVisitAction.makeEmailApp(long,String,String)": {"calls": ["Email.setFrom(String)", "Email.setToList(List)", "Email.setSubject(String)", "PersonnelDAO.getName(long)", "PatientDAO.getPatient(long)", "Email.setBody(String)", "PatientBean.getEmail()"], "called_by": [], "class_name": "EditOfficeVisitAction", "method_name": "makeEmailApp", "params": ["long", "String", "String"]}, "EditOfficeVisitForm.getAddMedID()": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)"], "class_name": "EditOfficeVisitForm", "method_name": "getAddMedID", "params": []}, "EditOfficeVisitValidator.validate(EditOfficeVisitForm)": {"calls": ["EditOfficeVisitForm.getHcpID()", "EditOfficeVisitForm.getVisitDate()", "EditOfficeVisitValidator.checkFormat(String,String,ValidationFormat,boolean)", "EditOfficeVisitForm.getDosage()", "EditOfficeVisitForm.getInstructions()", "EditOfficeVisitForm.getStartDate()", "EditOfficeVisitValidator.checkInt(String,String,int,int,boolean)", "EditOfficeVisitForm.getHospitalID()", "ErrorList.addIfNotNull(String)", "ErrorList.hasErrors()", "ValidationFormat.getDescription()", "EditOfficeVisitForm.getPatientID()", "EditOfficeVisitForm.getNotes()", "EditOfficeVisitForm.getEndDate()"], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "EditOfficeVisitValidator.validate(Object)"], "class_name": "EditOfficeVisitValidator", "method_name": "validate", "params": ["EditOfficeVisitForm"]}, "EditOfficeVisitForm.getDosage()": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getDosage", "params": []}, "PrescriptionBean.setDosage(int)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setDosage", "params": ["int"]}, "EditOfficeVisitForm.getEndDate()": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getEndDate", "params": []}, "PrescriptionBean.setEndDateStr(String)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setEndDateStr", "params": ["String"]}, "EditOfficeVisitForm.getStartDate()": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getStartDate", "params": []}, "PrescriptionBean.setStartDateStr(String)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setStartDateStr", "params": ["String"]}, "EditOfficeVisitForm.getInstructions()": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getInstructions", "params": []}, "PrescriptionBean.setInstructions(String)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setInstructions", "params": ["String"]}, "MedicationBean.setNDCode(String)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)"], "class_name": "MedicationBean", "method_name": "setNDCode", "params": ["String"]}, "PrescriptionBean.setMedication(MedicationBean)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setMedication", "params": ["MedicationBean"]}, "PrescriptionBean.setVisitID(long)": {"calls": [], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)", "PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setVisitID", "params": ["long"]}, "OfficeVisitDAO.addPrescription(PrescriptionBean)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "called_by": ["EditOfficeVisitAction.checkAddPrescription(EditOfficeVisitForm,long)"], "class_name": "OfficeVisitDAO", "method_name": "addPrescription", "params": ["PrescriptionBean"]}, "EditOfficeVisitForm.getNotes()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getNotes", "params": []}, "OfficeVisitBean.setNotes(String)": {"calls": [], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "OfficeVisitLoader.loadSingle(ResultSet)"], "class_name": "OfficeVisitBean", "method_name": "setNotes", "params": ["String"]}, "EditOfficeVisitForm.getVisitDate()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getVisitDate", "params": []}, "OfficeVisitBean.setVisitDateStr(String)": {"calls": [], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "OfficeVisitLoader.loadSingle(ResultSet)"], "class_name": "OfficeVisitBean", "method_name": "setVisitDateStr", "params": ["String"]}, "EditOfficeVisitForm.getPatientID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getPatientID", "params": []}, "EditOfficeVisitForm.getHospitalID()": {"calls": [], "called_by": ["EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitForm", "method_name": "getHospitalID", "params": []}, "OfficeVisitBean.setHospitalID(String)": {"calls": [], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)", "EditOfficeVisitAction.updateOv(EditOfficeVisitForm)", "OfficeVisitLoader.loadSingle(ResultSet)"], "class_name": "OfficeVisitBean", "method_name": "setHospitalID", "params": ["String"]}, "OfficeVisitDAO.update(OfficeVisitBean)": {"calls": ["OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "OfficeVisitBean.getID()"], "called_by": ["EditOfficeVisitAction.updateOv(EditOfficeVisitForm)"], "class_name": "OfficeVisitDAO", "method_name": "update", "params": ["OfficeVisitBean"]}, "OfficeVisitDAO.addDiagnosisToOfficeVisit(double,long)": {"calls": ["DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String)"], "class_name": "OfficeVisitDAO", "method_name": "addDiagnosisToOfficeVisit", "params": ["double", "long"]}, "OfficeVisitDAO.addProcedureToOfficeVisit(String,long,String)": {"calls": ["DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String)", "EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String,String)"], "class_name": "OfficeVisitDAO", "method_name": "addProcedureToOfficeVisit", "params": ["String", "long", "String"]}, "OfficeVisitDAO.addLabProcedureToOfficeVisit(String,long,long)": {"calls": ["DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkAddSubAction(EditOfficeVisitAction$OVSubAction,String,long,String)"], "class_name": "OfficeVisitDAO", "method_name": "addLabProcedureToOfficeVisit", "params": ["String", "long", "long"]}, "OfficeVisitDAO.removeDiagnosisFromOfficeVisit(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkRemoveSubAction(EditOfficeVisitAction$OVSubAction,String)"], "class_name": "OfficeVisitDAO", "method_name": "removeDiagnosisFromOfficeVisit", "params": ["long"]}, "OfficeVisitDAO.removeProcedureFromOfficeVisit(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkRemoveSubAction(EditOfficeVisitAction$OVSubAction,String)"], "class_name": "OfficeVisitDAO", "method_name": "removeProcedureFromOfficeVisit", "params": ["long"]}, "OfficeVisitDAO.removePrescription(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkRemoveSubAction(EditOfficeVisitAction$OVSubAction,String)"], "class_name": "OfficeVisitDAO", "method_name": "removePrescription", "params": ["long"]}, "OfficeVisitDAO.removeLabProcedureFromOfficeVisit(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["EditOfficeVisitAction.checkRemoveSubAction(EditOfficeVisitAction$OVSubAction,String)"], "class_name": "OfficeVisitDAO", "method_name": "removeLabProcedureFromOfficeVisit", "params": ["long"]}, "PrescriptionReportAction.representPatient(String)": {"calls": ["PatientDAO.represents(long,long)"], "called_by": [], "class_name": "PrescriptionReportAction", "method_name": "representPatient", "params": ["String"]}, "PrescriptionReportAction.getAllOfficeVisits()": {"calls": ["OfficeVisitDAO.getAllOfficeVisits(long)"], "called_by": [], "class_name": "PrescriptionReportAction", "method_name": "getAllOfficeVisits", "params": []}, "PrescriptionReportAction.getPrescriptionReports(Map,List)": {"calls": ["ParameterUtil.convertMap(Map)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "OfficeVisitBean.getVisitID()", "OfficeVisitDAO.getPrescriptionReports(List,long)"], "called_by": [], "class_name": "PrescriptionReportAction", "method_name": "getPrescriptionReports", "params": ["Map", "List"]}, "ParameterUtil.convertMap(Map)": {"calls": [], "called_by": ["PrescriptionReportAction.getPrescriptionReports(Map,List)", "PrescriptionReportAction.getQueryString(Map,List)"], "class_name": "ParameterUtil", "method_name": "convertMap", "params": ["Map"]}, "OfficeVisitDAO.getPrescriptionReports(List,long)": {"calls": ["OfficeVisitDAO.buildPreps(int)", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "OfficeVisitDAO.prepareOVIDs(PreparedStatement,List)", "PrescriptionReportBeanLoader.loadList(ResultSet)"], "called_by": ["PrescriptionReportAction.getPrescriptionReports(Map,List)"], "class_name": "OfficeVisitDAO", "method_name": "getPrescriptionReports", "params": ["List", "long"]}, "PrescriptionReportAction.getPatient()": {"calls": ["PatientDAO.getPatient(long)"], "called_by": [], "class_name": "PrescriptionReportAction", "method_name": "getPatient", "params": []}, "PrescriptionReportAction.getQueryString(Map,List)": {"calls": ["ParameterUtil.convertMap(Map)", "PrescriptionReportAction.buildQueryString(List)", "PrescriptionReportAction.checkOfficeVisits(HashMap,List)"], "called_by": [], "class_name": "PrescriptionReportAction", "method_name": "getQueryString", "params": ["Map", "List"]}, "PrescriptionReportAction.checkOfficeVisits(HashMap,List)": {"calls": [], "called_by": ["PrescriptionReportAction.getQueryString(Map,List)"], "class_name": "PrescriptionReportAction", "method_name": "checkOfficeVisits", "params": ["HashMap", "List"]}, "PrescriptionReportAction.buildQueryString(List)": {"calls": [], "called_by": ["PrescriptionReportAction.getQueryString(Map,List)"], "class_name": "PrescriptionReportAction", "method_name": "buildQueryString", "params": ["List"]}, "EditPersonnelAction.updateInformation(PersonnelBean)": {"calls": ["PersonnelBean.setMID(long)", "TransactionDAO.logTransaction(TransactionType,long)", "PersonnelDAO.editPersonnel(PersonnelBean)", "PersonnelValidator.validate(PersonnelBean)"], "called_by": ["EditPersonnelAction.editMessageFilter(String)"], "class_name": "EditPersonnelAction", "method_name": "updateInformation", "params": ["PersonnelBean"]}, "PersonnelValidator.validate(PersonnelBean)": {"calls": ["PersonnelBean.getFirstName()", "PersonnelBean.getCity()", "PersonnelValidator.checkFormat(String,String,ValidationFormat,boolean)", "PersonnelBean.getStreetAddress1()", "ErrorList.addIfNotNull(String)", "PersonnelBean.getLastName()", "PersonnelBean.getEmail()", "ErrorList.hasErrors()", "PersonnelBean.getZip()", "PersonnelBean.getStreetAddress2()", "PersonnelBean.getPhone()", "PersonnelBean.getState()"], "called_by": ["PersonnelValidator.validate(Object)", "EditPersonnelAction.updateInformation(PersonnelBean)"], "class_name": "PersonnelValidator", "method_name": "validate", "params": ["PersonnelBean"]}, "EditPersonnelAction.editMessageFilter(String)": {"calls": ["EditPersonnelAction.getPid()", "PersonnelDAO.getPersonnel(long)", "PersonnelBean.setMessageFilter(String)", "EditPersonnelAction.updateInformation(PersonnelBean)"], "called_by": [], "class_name": "EditPersonnelAction", "method_name": "editMessageFilter", "params": ["String"]}, "EditPersonnelAction.getPid()": {"calls": [], "called_by": ["EditPersonnelAction.editMessageFilter(String)"], "class_name": "EditPersonnelAction", "method_name": "getPid", "params": []}, "PersonnelBean.setMessageFilter(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)", "EditPersonnelAction.editMessageFilter(String)"], "class_name": "PersonnelBean", "method_name": "setMessageFilter", "params": ["String"]}, "SearchUsersAction.searchForPersonnelWithName(String,String)": {"calls": ["DBException.printStackTrace()", "PersonnelDAO.searchForPersonnelWithName(String,String)"], "called_by": [], "class_name": "SearchUsersAction", "method_name": "searchForPersonnelWithName", "params": ["String", "String"]}, "PersonnelDAO.searchForPersonnelWithName(String,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "PersonnelLoader.loadList(ResultSet)"], "called_by": ["SearchUsersAction.searchForPersonnelWithName(String,String)"], "class_name": "PersonnelDAO", "method_name": "searchForPersonnelWithName", "params": ["String", "String"]}, "SearchUsersAction.searchForPatientsWithName(String,String)": {"calls": ["DBException.printStackTrace()", "PatientDAO.searchForPatientsWithName(String,String)"], "called_by": [], "class_name": "SearchUsersAction", "method_name": "searchForPatientsWithName", "params": ["String", "String"]}, "PatientDAO.searchForPatientsWithName(String,String)": {"calls": ["PatientLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["SearchUsersAction.searchForPatientsWithName(String,String)"], "class_name": "PatientDAO", "method_name": "searchForPatientsWithName", "params": ["String", "String"]}, "ResetPasswordAction.checkMID(String)": {"calls": ["AuthDAO.checkUserExists(long)"], "called_by": [], "class_name": "ResetPasswordAction", "method_name": "checkMID", "params": ["String"]}, "AuthDAO.checkUserExists(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ResetPasswordAction.checkMID(String)", "SetSecurityQuestionAction.checkMID(long)"], "class_name": "AuthDAO", "method_name": "checkUserExists", "params": ["long"]}, "ResetPasswordAction.isMaxedOut(String)": {"calls": ["AuthDAO.getResetPasswordFailures(String)"], "called_by": [], "class_name": "ResetPasswordAction", "method_name": "isMaxedOut", "params": ["String"]}, "AuthDAO.getResetPasswordFailures(String)": {"calls": ["AuthDAO.updateResetFailuresToZero(String,Connection)", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "AuthDAO.insertResetPasswordRow(String,int,Connection)"], "called_by": ["ResetPasswordAction.resetPassword(long,String,String,String,String,String)", "ResetPasswordAction.isMaxedOut(String)"], "class_name": "AuthDAO", "method_name": "getResetPasswordFailures", "params": ["String"]}, "ResetPasswordAction.checkRole(long,String)": {"calls": ["PatientDAO.getRole(long,String)", "iTrustException.printStackTrace()", "DBException.printStackTrace()"], "called_by": [], "class_name": "ResetPasswordAction", "method_name": "checkRole", "params": ["long", "String"]}, "PatientDAO.getRole(long,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ResetPasswordAction.checkRole(long,String)"], "class_name": "PatientDAO", "method_name": "getRole", "params": ["long", "String"]}, "ResetPasswordAction.getSecurityQuestion(long)": {"calls": ["DBException.printStackTrace()", "AuthDAO.getSecurityQuestion(long)"], "called_by": [], "class_name": "ResetPasswordAction", "method_name": "getSecurityQuestion", "params": ["long"]}, "AuthDAO.getSecurityQuestion(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ResetPasswordAction.getSecurityQuestion(long)", "SetSecurityQuestionAction.retrieveInformation()"], "class_name": "AuthDAO", "method_name": "getSecurityQuestion", "params": ["long"]}, "ResetPasswordAction.resetPassword(long,String,String,String,String,String)": {"calls": ["Role.equals(Object)", "ResetPasswordAction.makeEmailApp(long,String)", "AuthDAO.resetPassword(long,String)", "AuthDAO.getSecurityAnswer(long)", "AuthDAO.recordResetPasswordFailure(String)", "AuthDAO.getUserRole(long)", "ResetPasswordAction.validatePassword(String,String)", "Role.parse(String)", "AuthDAO.getResetPasswordFailures(String)", "EmailUtil.sendEmail(Email)"], "called_by": [], "class_name": "ResetPasswordAction", "method_name": "resetPassword", "params": ["long", "String", "String", "String", "String", "String"]}, "Role.parse(String)": {"calls": ["Role.values()"], "called_by": ["ResetPasswordAction.makeEmailApp(long,String)", "PersonnelLoader.loadSingle(ResultSet)", "AuthDAO.getUserRole(long)", "ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "Role", "method_name": "parse", "params": ["String"]}, "Role.equals(Object)": {"calls": [], "called_by": ["ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "Role", "method_name": "equals", "params": ["Object"]}, "ResetPasswordAction.validatePassword(String,String)": {"calls": ["ValidationFormat.getDescription()", "ErrorList.hasErrors()", "ValidationFormat.getRegex()", "ErrorList.addIfNotNull(String)"], "called_by": ["ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "ResetPasswordAction", "method_name": "validatePassword", "params": ["String", "String"]}, "AuthDAO.getSecurityAnswer(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["SetSecurityQuestionAction.retrieveInformation()", "ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "AuthDAO", "method_name": "getSecurityAnswer", "params": ["long"]}, "AuthDAO.resetPassword(long,String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "AuthDAO", "method_name": "resetPassword", "params": ["long", "String"]}, "ResetPasswordAction.makeEmailApp(long,String)": {"calls": ["Email.setSubject(String)", "Email.setToList(List)", "PatientBean.getFullName()", "PatientDAO.getPatient(long)", "PatientBean.getEmail()", "Email.setFrom(String)", "PersonnelBean.getEmail()", "PersonnelBean.getFullName()", "Role.parse(String)", "Email.setBody(String)", "PersonnelDAO.getPersonnel(long)"], "called_by": ["ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "ResetPasswordAction", "method_name": "makeEmailApp", "params": ["long", "String"]}, "AuthDAO.recordResetPasswordFailure(String)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "AuthDAO.insertResetPasswordRow(String,int,Connection)"], "called_by": ["ResetPasswordAction.resetPassword(long,String,String,String,String,String)"], "class_name": "AuthDAO", "method_name": "recordResetPasswordFailure", "params": ["String"]}, "ErrorList.addIfNotNull(String)": {"calls": [], "called_by": ["MedicationBeanValidator.validate(MedicationBean)", "SecurityQAValidator.validate(SecurityQA)", "AddPersonnelValidator.validate(PersonnelBean)", "ProcedureBeanValidator.validate(ProcedureBean)", "DrugInteractionValidator.validate(DrugInteractionBean)", "ApptBeanValidator.validate(ApptBean)", "LabProcedureValidator.validate(LabProcedureBean)", "LOINCBeanValidator.validate(LOINCbean)", "EMailValidator.validate(MessageBean)", "HospitalBeanValidator.validate(HospitalBean)", "DiagnosisBeanValidator.validate(DiagnosisBean)", "MessageValidator.validate(MessageBean)", "PatientValidator.validate(PatientBean)", "AddPatientValidator.validate(PatientBean)", "AdverseEventValidator.validate(AdverseEventBean)", "SurveySearchValidator.validate(SurveyResultBean)", "PersonnelValidator.validate(PersonnelBean)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)", "RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)", "ApptTypeBeanValidator.validate(ApptTypeBean)", "ResetPasswordAction.validatePassword(String,String)", "AllergyBeanValidator.validate(AllergyBean)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "ErrorList", "method_name": "addIfNotNull", "params": ["String"]}, "ValidationFormat.getRegex()": {"calls": [], "called_by": ["LabProcedureValidator.checkFormat(String,String,ValidationFormat,boolean)", "BeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ResetPasswordAction.validatePassword(String,String)"], "class_name": "ValidationFormat", "method_name": "getRegex", "params": []}, "ValidationFormat.getDescription()": {"calls": [], "called_by": ["LabProcedureValidator.checkFormat(String,String,ValidationFormat,boolean)", "BeanValidator.checkFormat(String,String,ValidationFormat,boolean)", "ResetPasswordAction.validatePassword(String,String)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "ValidationFormat", "method_name": "getDescription", "params": []}, "ErrorList.hasErrors()": {"calls": [], "called_by": ["MedicationBeanValidator.validate(MedicationBean)", "SecurityQAValidator.validate(SecurityQA)", "AddPersonnelValidator.validate(PersonnelBean)", "ProcedureBeanValidator.validate(ProcedureBean)", "DrugInteractionValidator.validate(DrugInteractionBean)", "ApptBeanValidator.validate(ApptBean)", "LabProcedureValidator.validate(LabProcedureBean)", "LOINCBeanValidator.validate(LOINCbean)", "EMailValidator.validate(MessageBean)", "HospitalBeanValidator.validate(HospitalBean)", "DiagnosisBeanValidator.validate(DiagnosisBean)", "MessageValidator.validate(MessageBean)", "PatientValidator.validate(PatientBean)", "AddPatientValidator.validate(PatientBean)", "AdverseEventValidator.validate(AdverseEventBean)", "SurveySearchValidator.validate(SurveyResultBean)", "PersonnelValidator.validate(PersonnelBean)", "EditOfficeVisitValidator.validate(EditOfficeVisitForm)", "RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)", "ApptTypeBeanValidator.validate(ApptTypeBean)", "ResetPasswordAction.validatePassword(String,String)", "AllergyBeanValidator.validate(AllergyBean)", "HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "ErrorList", "method_name": "hasErrors", "params": []}, "SetSecurityQuestionAction.updateInformation(SecurityQA)": {"calls": ["SecurityQA.getQuestion()", "SecurityQAValidator.validate(SecurityQA)", "AuthDAO.setSecurityQuestionAnswer(String,String,long)", "SecurityQA.getAnswer()"], "called_by": [], "class_name": "SetSecurityQuestionAction", "method_name": "updateInformation", "params": ["SecurityQA"]}, "SecurityQAValidator.validate(SecurityQA)": {"calls": ["ErrorList.hasErrors()", "SecurityQA.getQuestion()", "ErrorList.addIfNotNull(String)", "SecurityQA.getAnswer()", "SecurityQA.getConfirmAnswer()", "SecurityQAValidator.checkFormat(String,String,ValidationFormat,boolean)"], "called_by": ["SecurityQAValidator.validate(Object)", "SetSecurityQuestionAction.updateInformation(SecurityQA)"], "class_name": "SecurityQAValidator", "method_name": "validate", "params": ["SecurityQA"]}, "SecurityQA.getQuestion()": {"calls": [], "called_by": ["SecurityQAValidator.validate(SecurityQA)", "SetSecurityQuestionAction.updateInformation(SecurityQA)"], "class_name": "SecurityQA", "method_name": "getQuestion", "params": []}, "SecurityQA.getAnswer()": {"calls": [], "called_by": ["SecurityQAValidator.validate(SecurityQA)", "SetSecurityQuestionAction.updateInformation(SecurityQA)"], "class_name": "SecurityQA", "method_name": "getAnswer", "params": []}, "AuthDAO.setSecurityQuestionAnswer(String,String,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["SetSecurityQuestionAction.updateInformation(SecurityQA)"], "class_name": "AuthDAO", "method_name": "setSecurityQuestionAnswer", "params": ["String", "String", "long"]}, "SetSecurityQuestionAction.retrieveInformation()": {"calls": ["SecurityQA.setQuestion(String)", "SecurityQA.setAnswer(String)", "AuthDAO.getSecurityQuestion(long)", "AuthDAO.getSecurityAnswer(long)"], "called_by": [], "class_name": "SetSecurityQuestionAction", "method_name": "retrieveInformation", "params": []}, "SecurityQA.setAnswer(String)": {"calls": [], "called_by": ["SetSecurityQuestionAction.retrieveInformation()"], "class_name": "SecurityQA", "method_name": "setAnswer", "params": ["String"]}, "SecurityQA.setQuestion(String)": {"calls": [], "called_by": ["SetSecurityQuestionAction.retrieveInformation()"], "class_name": "SecurityQA", "method_name": "setQuestion", "params": ["String"]}, "SetSecurityQuestionAction.checkMID(long)": {"calls": ["AuthDAO.checkUserExists(long)"], "called_by": [], "class_name": "SetSecurityQuestionAction", "method_name": "checkMID", "params": ["long"]}, "MonitorAdverseEventAction.getReports(boolean,String,String)": {"calls": ["AdverseEventDAO.getPerscriptions(String,String)", "AdverseEventDAO.getImmunizations(String,String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)"], "called_by": [], "class_name": "MonitorAdverseEventAction", "method_name": "getReports", "params": ["boolean", "String", "String"]}, "AdverseEventDAO.getPerscriptions(String,String)": {"calls": ["DAOFactory.getConnection()", "AdverseEventBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["MonitorAdverseEventAction.getReports(boolean,String,String)"], "class_name": "AdverseEventDAO", "method_name": "getPerscriptions", "params": ["String", "String"]}, "AdverseEventDAO.getImmunizations(String,String)": {"calls": ["DAOFactory.getConnection()", "AdverseEventBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["MonitorAdverseEventAction.getReports(boolean,String,String)"], "class_name": "AdverseEventDAO", "method_name": "getImmunizations", "params": ["String", "String"]}, "MonitorAdverseEventAction.getName(long)": {"calls": ["PatientDAO.getName(long)"], "called_by": [], "class_name": "MonitorAdverseEventAction", "method_name": "getName", "params": ["long"]}, "MonitorAdverseEventAction.sendEmail(long,String)": {"calls": ["Email.getFrom()", "Email.setToList(List)", "PatientDAO.getPatient(long)", "PatientBean.getEmail()", "Email.setFrom(String)", "Email.getBody()", "Email.setBody(String)", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "EmailUtil.sendEmail(Email)"], "called_by": [], "class_name": "MonitorAdverseEventAction", "method_name": "sendEmail", "params": ["long", "String"]}, "Email.getFrom()": {"calls": [], "called_by": ["MonitorAdverseEventAction.sendEmail(long,String)", "EmailBeanLoader.loadParameters(PreparedStatement,Email)"], "class_name": "Email", "method_name": "getFrom", "params": []}, "Email.getBody()": {"calls": [], "called_by": ["MonitorAdverseEventAction.sendEmail(long,String)", "EmailBeanLoader.loadParameters(PreparedStatement,Email)"], "class_name": "Email", "method_name": "getBody", "params": []}, "MonitorAdverseEventAction.remove(int)": {"calls": ["AdverseEventDAO.getHCPMID(int)", "MessageBean.setBody(String)", "MessageBean.setFrom(long)", "AdverseEventBean.getDrug()", "AdverseEventDAO.removeReport(int)", "SendMessageAction.sendMessage(MessageBean)", "MessageBean.setSubject(String)", "PatientDAO.getName(long)", "MessageBean.setTo(long)", "AdverseEventBean.getDescription()", "AdverseEventBean.getMID()", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "AdverseEventDAO.getReport(int)"], "called_by": [], "class_name": "MonitorAdverseEventAction", "method_name": "remove", "params": ["int"]}, "AdverseEventDAO.removeReport(int)": {"calls": ["DBUtil.getLastInsert(Connection)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["MonitorAdverseEventAction.remove(int)"], "class_name": "AdverseEventDAO", "method_name": "removeReport", "params": ["int"]}, "AdverseEventDAO.getHCPMID(int)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["MonitorAdverseEventAction.remove(int)"], "class_name": "AdverseEventDAO", "method_name": "getHCPMID", "params": ["int"]}, "MessageBean.setTo(long)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)", "MonitorAdverseEventAction.remove(int)"], "class_name": "MessageBean", "method_name": "setTo", "params": ["long"]}, "MessageBean.setSubject(String)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)", "MonitorAdverseEventAction.remove(int)"], "class_name": "MessageBean", "method_name": "setSubject", "params": ["String"]}, "MessageBean.setBody(String)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)", "MonitorAdverseEventAction.remove(int)"], "class_name": "MessageBean", "method_name": "setBody", "params": ["String"]}, "MessageBean.setFrom(long)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)", "MonitorAdverseEventAction.remove(int)"], "class_name": "MessageBean", "method_name": "setFrom", "params": ["long"]}, "PatientBaseAction.checkPatientID(String)": {"calls": ["PatientDAO.checkPatientExists(long)", "HtmlEncoder.encode(String)", "DAOFactory.getPatientDAO()"], "called_by": [], "class_name": "PatientBaseAction", "method_name": "checkPatientID", "params": ["String"]}, "DAOFactory.getPatientDAO()": {"calls": [], "called_by": ["PatientBaseAction.checkPatientID(String)", "AuthDAO.getUserName(long)"], "class_name": "DAOFactory", "method_name": "getPatientDAO", "params": []}, "PatientDAO.checkPatientExists(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["PatientBaseAction.checkPatientID(String)"], "class_name": "PatientDAO", "method_name": "checkPatientExists", "params": ["long"]}, "HtmlEncoder.encode(String)": {"calls": [], "called_by": ["PatientBaseAction.checkPatientID(String)"], "class_name": "HtmlEncoder", "method_name": "encode", "params": ["String"]}, "PersonnelBaseAction.checkPersonnelID(String)": {"calls": ["DAOFactory.getPersonnelDAO()", "PersonnelDAO.checkPersonnelExists(long)"], "called_by": [], "class_name": "PersonnelBaseAction", "method_name": "checkPersonnelID", "params": ["String"]}, "DAOFactory.getPersonnelDAO()": {"calls": [], "called_by": ["AuthDAO.getUserName(long)", "PersonnelBaseAction.checkPersonnelID(String)"], "class_name": "DAOFactory", "method_name": "getPersonnelDAO", "params": []}, "OfficeVisitBaseAction.checkOfficeVisitID(String)": {"calls": ["OfficeVisitBaseAction.encode(String)", "OfficeVisitDAO.checkOfficeVisitExists(long,long)"], "called_by": [], "class_name": "OfficeVisitBaseAction", "method_name": "checkOfficeVisitID", "params": ["String"]}, "OfficeVisitBaseAction.encode(String)": {"calls": [], "called_by": ["OfficeVisitBaseAction.checkOfficeVisitID(String)"], "class_name": "OfficeVisitBaseAction", "method_name": "encode", "params": ["String"]}, "OfficeVisitDAO.checkOfficeVisitExists(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["OfficeVisitBaseAction.checkOfficeVisitID(String)"], "class_name": "OfficeVisitDAO", "method_name": "checkOfficeVisitExists", "params": ["long", "long"]}, "FamilyMemberBean.getFullName()": {"calls": ["FamilyMemberBean.getLastName()", "FamilyMemberBean.getFirstName()"], "called_by": [], "class_name": "FamilyMemberBean", "method_name": "getFullName", "params": []}, "FamilyMemberBean.getFirstName()": {"calls": [], "called_by": ["FamilyMemberBean.getFullName()"], "class_name": "FamilyMemberBean", "method_name": "getFirstName", "params": []}, "FamilyMemberBean.getLastName()": {"calls": [], "called_by": ["FamilyMemberBean.getFullName()"], "class_name": "FamilyMemberBean", "method_name": "getLastName", "params": []}, "HealthRecord.getBloodPressure()": {"calls": ["HealthRecord.getBloodPressureN()", "HealthRecord.getBloodPressureD()"], "called_by": [], "class_name": "HealthRecord", "method_name": "getBloodPressure", "params": []}, "HealthRecord.getBloodPressureN()": {"calls": [], "called_by": ["HealthRecord.getBloodPressure()", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "class_name": "HealthRecord", "method_name": "getBloodPressureN", "params": []}, "HealthRecord.getBloodPressureD()": {"calls": [], "called_by": ["HealthRecord.getBloodPressure()", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "class_name": "HealthRecord", "method_name": "getBloodPressureD", "params": []}, "HealthRecord.getCholesterolTri()": {"calls": [], "called_by": ["HealthRecord.getTotalCholesterol()", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)", "CholesterolFactor.hasFactor()"], "class_name": "HealthRecord", "method_name": "getCholesterolTri", "params": []}, "PatientBean.setBloodTypeStr(String)": {"calls": ["BloodType.parse(String)"], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setBloodTypeStr", "params": ["String"]}, "BloodType.parse(String)": {"calls": ["BloodType.getName()", "BloodType.values()"], "called_by": ["PatientBean.setBloodTypeStr(String)"], "class_name": "BloodType", "method_name": "parse", "params": ["String"]}, "PatientBean.setEthnicityStr(String)": {"calls": ["Ethnicity.parse(String)"], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setEthnicityStr", "params": ["String"]}, "Ethnicity.parse(String)": {"calls": ["Ethnicity.values()"], "called_by": ["PatientBean.setEthnicityStr(String)"], "class_name": "Ethnicity", "method_name": "parse", "params": ["String"]}, "PatientBean.setGenderStr(String)": {"calls": ["Gender.parse(String)"], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setGenderStr", "params": ["String"]}, "Gender.parse(String)": {"calls": ["Gender.values()"], "called_by": ["PatientBean.setGenderStr(String)"], "class_name": "Gender", "method_name": "parse", "params": ["String"]}, "PatientBean.getIcAddress3()": {"calls": ["PatientBean.getIcCity()", "PatientBean.getIcZip()", "PatientBean.getIcState()"], "called_by": [], "class_name": "PatientBean", "method_name": "getIcAddress3", "params": []}, "PatientBean.getIcCity()": {"calls": [], "called_by": ["PatientBean.getIcAddress3()", "PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcCity", "params": []}, "PatientBean.getIcState()": {"calls": [], "called_by": ["PatientBean.getIcAddress3()", "PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcState", "params": []}, "PatientBean.getIcZip()": {"calls": ["PatientBean.getIcZip2()", "PatientBean.getIcZip1()"], "called_by": ["PatientBean.getIcAddress3()", "PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getIcZip", "params": []}, "PatientBean.getIcZip2()": {"calls": [], "called_by": ["PatientBean.getIcZip()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcZip2", "params": []}, "PatientBean.getIcZip1()": {"calls": [], "called_by": ["PatientBean.getIcZip()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcZip1", "params": []}, "PatientBean.getPhone()": {"calls": ["PatientBean.getPhone1()", "PatientBean.getPhone3()", "PatientBean.getPhone2()"], "called_by": ["PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getPhone", "params": []}, "PatientBean.getPhone1()": {"calls": [], "called_by": ["PatientBean.getPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getPhone1", "params": []}, "PatientBean.getPhone2()": {"calls": [], "called_by": ["PatientBean.getPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getPhone2", "params": []}, "PatientBean.getPhone3()": {"calls": [], "called_by": ["PatientBean.getPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getPhone3", "params": []}, "PatientBean.getStreetAddress3()": {"calls": ["PatientBean.getState()", "PatientBean.getCity()", "PatientBean.getZip()"], "called_by": [], "class_name": "PatientBean", "method_name": "getStreetAddress3", "params": []}, "PatientBean.getZip2()": {"calls": [], "called_by": ["PatientBean.getZip()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getZip2", "params": []}, "PatientBean.getEmergencyPhone1()": {"calls": [], "called_by": ["PatientBean.getEmergencyPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getEmergencyPhone1", "params": []}, "PatientBean.getEmergencyPhone2()": {"calls": [], "called_by": ["PatientBean.getEmergencyPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getEmergencyPhone2", "params": []}, "PatientBean.getEmergencyPhone3()": {"calls": [], "called_by": ["PatientBean.getEmergencyPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getEmergencyPhone3", "params": []}, "PatientBean.getIcPhone()": {"calls": ["PatientBean.getIcPhone2()", "PatientBean.getIcPhone3()", "PatientBean.getIcPhone1()"], "called_by": ["PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getIcPhone", "params": []}, "PatientBean.getIcPhone1()": {"calls": [], "called_by": ["PatientBean.getIcPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcPhone1", "params": []}, "PatientBean.getIcPhone2()": {"calls": [], "called_by": ["PatientBean.getIcPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcPhone2", "params": []}, "PatientBean.getIcPhone3()": {"calls": [], "called_by": ["PatientBean.getIcPhone()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcPhone3", "params": []}, "AllergyBean.getFirstFound()": {"calls": [], "called_by": ["AllergyBean.getFirstFoundStr()"], "class_name": "AllergyBean", "method_name": "getFirstFound", "params": []}, "HospitalBean.equals(Object)": {"calls": ["HospitalBean.equals(HospitalBean)"], "called_by": [], "class_name": "HospitalBean", "method_name": "equals", "params": ["Object"]}, "HospitalBean.equals(HospitalBean)": {"calls": [], "called_by": ["HospitalBean.equals(Object)"], "class_name": "HospitalBean", "method_name": "equals", "params": ["HospitalBean"]}, "Email.equals(Object)": {"calls": ["Email.equals(Email)"], "called_by": [], "class_name": "Email", "method_name": "equals", "params": ["Object"]}, "Email.equals(Email)": {"calls": ["Email.listEquals(List,List)"], "called_by": ["Email.equals(Object)"], "class_name": "Email", "method_name": "equals", "params": ["Email"]}, "Email.listEquals(List,List)": {"calls": [], "called_by": ["Email.equals(Email)"], "class_name": "Email", "method_name": "listEquals", "params": ["List", "List"]}, "OperationalProfile.createEmptyMap()": {"calls": ["TransactionType.values()"], "called_by": [], "class_name": "OperationalProfile", "method_name": "createEmptyMap", "params": []}, "TransactionType.values()": {"calls": [], "called_by": ["OperationalProfile.createEmptyMap()", "TransactionType.parse(int)"], "class_name": "TransactionType", "method_name": "values", "params": []}, "PrescriptionBean.equals(Object)": {"calls": ["PrescriptionBean.equals(PrescriptionBean)"], "called_by": [], "class_name": "PrescriptionBean", "method_name": "equals", "params": ["Object"]}, "PrescriptionBean.equals(PrescriptionBean)": {"calls": ["MedicationBean.equals(Object)"], "called_by": ["PrescriptionBean.equals(Object)"], "class_name": "PrescriptionBean", "method_name": "equals", "params": ["PrescriptionBean"]}, "MedicationBean.equals(Object)": {"calls": ["MedicationBean.equals(MedicationBean)"], "called_by": ["PrescriptionBean.equals(PrescriptionBean)"], "class_name": "MedicationBean", "method_name": "equals", "params": ["Object"]}, "PersonnelBean.getFirstName()": {"calls": [], "called_by": ["PersonnelBean.getFullName()", "AddPersonnelValidator.validate(PersonnelBean)", "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "PersonnelValidator.validate(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getFirstName", "params": []}, "PersonnelBean.getZip2()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)", "PersonnelBean.getZip()"], "class_name": "PersonnelBean", "method_name": "getZip2", "params": []}, "ReferralBean.equals(Object)": {"calls": ["ReferralBean.equals(ReferralBean)"], "called_by": [], "class_name": "ReferralBean", "method_name": "equals", "params": ["Object"]}, "ReferralBean.equals(ReferralBean)": {"calls": [], "called_by": ["ReferralBean.equals(Object)"], "class_name": "ReferralBean", "method_name": "equals", "params": ["ReferralBean"]}, "SurveyBean.setSurveyDateString(String)": {"calls": ["SurveyBean.setSurveyDate(Date)"], "called_by": [], "class_name": "SurveyBean", "method_name": "setSurveyDateString", "params": ["String"]}, "SurveyBean.setSurveyDate(Date)": {"calls": [], "called_by": ["SurveyBean.setSurveyDateString(String)", "SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyBean", "method_name": "setSurveyDate", "params": ["Date"]}, "SurveyBean.getSurveyDateString()": {"calls": ["SurveyBean.getSurveyDate()"], "called_by": [], "class_name": "SurveyBean", "method_name": "getSurveyDateString", "params": []}, "SurveyBean.getSurveyDate()": {"calls": [], "called_by": ["SurveyBean.getSurveyDateString()"], "class_name": "SurveyBean", "method_name": "getSurveyDate", "params": []}, "MedicationBean.getNDCodeFormatted()": {"calls": ["MedicationBean.getNDCode()"], "called_by": [], "class_name": "MedicationBean", "method_name": "getNDCodeFormatted", "params": []}, "MedicationBean.equals(MedicationBean)": {"calls": [], "called_by": ["MedicationBean.equals(Object)"], "class_name": "MedicationBean", "method_name": "equals", "params": ["MedicationBean"]}, "ReportRequestBean.<clinit>()": {"calls": ["Messages.getString(String)"], "called_by": [], "class_name": "ReportRequestBean", "method_name": "<clinit>", "params": []}, "ReportRequestBean.setRequestedDateString(String)": {"calls": ["ReportRequestBean.setRequestedDate(Date)"], "called_by": [], "class_name": "ReportRequestBean", "method_name": "setRequestedDateString", "params": ["String"]}, "ReportRequestBean.setRequestedDate(Date)": {"calls": [], "called_by": ["ReportRequestBeanLoader.loadSingle(ResultSet)", "ReportRequestBean.setRequestedDateString(String)"], "class_name": "ReportRequestBean", "method_name": "setRequestedDate", "params": ["Date"]}, "ReportRequestBean.setViewedDateString(String)": {"calls": ["ReportRequestBean.setViewedDate(Date)"], "called_by": [], "class_name": "ReportRequestBean", "method_name": "setViewedDateString", "params": ["String"]}, "ReportRequestBean.setViewedDate(Date)": {"calls": [], "called_by": ["ReportRequestBean.setViewedDateString(String)", "ReportRequestBeanLoader.loadSingle(ResultSet)"], "class_name": "ReportRequestBean", "method_name": "setViewedDate", "params": ["Date"]}, "LOINCBeanLoader.loadList(ResultSet)": {"calls": ["LOINCBeanLoader.loadSingle(ResultSet)"], "called_by": ["LOINCDAO.getAllLOINC()", "LOINCDAO.getProcedures(String)"], "class_name": "LOINCBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "LOINCBeanLoader.loadSingle(ResultSet)": {"calls": ["LOINCBeanLoader.loadSingle(ResultSet)", "LOINCbean.setMethodType(String)", "LOINCbean.setSystem(String)", "LOINCbean.setTimeAspect(String)", "LOINCbean.setLabProcedureCode(String)", "LOINCbean.setComponent(String)", "LOINCbean.setScaleType(String)", "LOINCbean.setKindOfProperty(String)"], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)", "LOINCBeanLoader.loadList(ResultSet)"], "class_name": "LOINCBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "LOINCbean.setLabProcedureCode(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setLabProcedureCode", "params": ["String"]}, "LOINCbean.setComponent(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setComponent", "params": ["String"]}, "LOINCbean.setKindOfProperty(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setKindOfProperty", "params": ["String"]}, "LOINCbean.setTimeAspect(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setTimeAspect", "params": ["String"]}, "LOINCbean.setSystem(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setSystem", "params": ["String"]}, "LOINCbean.setScaleType(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setScaleType", "params": ["String"]}, "LOINCbean.setMethodType(String)": {"calls": [], "called_by": ["LOINCBeanLoader.loadSingle(ResultSet)"], "class_name": "LOINCbean", "method_name": "setMethodType", "params": ["String"]}, "LOINCBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["LOINCBeanLoader.loadParameters(PreparedStatement,LOINCbean)"], "called_by": [], "class_name": "LOINCBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "LOINCBeanLoader.loadParameters(PreparedStatement,LOINCbean)": {"calls": [], "called_by": ["LOINCBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "LOINCBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "LOINCbean"]}, "EmailBeanLoader.loadList(ResultSet)": {"calls": ["EmailBeanLoader.loadSingle(ResultSet)"], "called_by": ["FakeEmailDAO.getAllEmails()", "FakeEmailDAO.getEmailWithBody(String)", "FakeEmailDAO.getEmailsByPerson(String)"], "class_name": "EmailBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "EmailBeanLoader.loadSingle(ResultSet)": {"calls": ["Email.setFrom(String)", "Email.setToList(List)", "Email.setSubject(String)", "Email.setTimeAdded(Timestamp)", "EmailBeanLoader.loadSingle(ResultSet)", "Email.setBody(String)"], "called_by": ["EmailBeanLoader.loadSingle(ResultSet)", "EmailBeanLoader.loadList(ResultSet)"], "class_name": "EmailBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "EmailBeanLoader.loadParameters(PreparedStatement,Email)": {"calls": ["Email.getFrom()", "Email.getSubject()", "Email.getToListStr()", "Email.getBody()"], "called_by": ["FakeEmailDAO.sendEmailRecord(Email)", "EmailBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "EmailBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Email"]}, "Email.getToListStr()": {"calls": [], "called_by": ["EmailBeanLoader.loadParameters(PreparedStatement,Email)"], "class_name": "Email", "method_name": "getToListStr", "params": []}, "Email.getSubject()": {"calls": [], "called_by": ["EmailBeanLoader.loadParameters(PreparedStatement,Email)"], "class_name": "Email", "method_name": "getSubject", "params": []}, "Email.setTimeAdded(Timestamp)": {"calls": [], "called_by": ["EmailBeanLoader.loadSingle(ResultSet)"], "class_name": "Email", "method_name": "setTimeAdded", "params": ["Timestamp"]}, "EmailBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["EmailBeanLoader.loadParameters(PreparedStatement,Email)"], "called_by": [], "class_name": "EmailBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "AdverseEventBeanLoader.loadList(ResultSet)": {"calls": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "called_by": ["AdverseEventDAO.getUnremovedAdverseEventsByCode(String)", "AdverseEventDAO.getImmunizations(String,String)", "AdverseEventDAO.getReportsFor(long)", "AdverseEventDAO.getPerscriptions(String,String)", "AdverseEventDAO.getReport(int)"], "class_name": "AdverseEventBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "AdverseEventBeanLoader.loadSingle(ResultSet)": {"calls": ["AdverseEventBean.setId(int)", "AdverseEventBean.setDrug(String)", "AdverseEventBean.setMID(String)", "AdverseEventBean.setCode(String)", "AdverseEventBean.setDate(String)", "AdverseEventBeanLoader.loadSingle(ResultSet)", "AdverseEventBean.setStatus(String)", "AdverseEventBean.setDescription(String)"], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)", "AdverseEventBeanLoader.loadList(ResultSet)"], "class_name": "AdverseEventBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "AdverseEventBean.setMID(String)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setMID", "params": ["String"]}, "AdverseEventBean.setDrug(String)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setDrug", "params": ["String"]}, "AdverseEventBean.setCode(String)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setCode", "params": ["String"]}, "AdverseEventBean.setDate(String)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setDate", "params": ["String"]}, "AdverseEventBean.setId(int)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setId", "params": ["int"]}, "AdverseEventBean.setStatus(String)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadSingle(ResultSet)"], "class_name": "AdverseEventBean", "method_name": "setStatus", "params": ["String"]}, "AdverseEventBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["AdverseEventBeanLoader.loadParameters(PreparedStatement,AdverseEventBean)"], "called_by": [], "class_name": "AdverseEventBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "AdverseEventBeanLoader.loadParameters(PreparedStatement,AdverseEventBean)": {"calls": [], "called_by": ["AdverseEventBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "AdverseEventBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "AdverseEventBean"]}, "AllergyBeanLoader.loadList(ResultSet)": {"calls": ["AllergyBeanLoader.loadSingle(ResultSet)"], "called_by": ["AllergyDAO.getAllergies(long)"], "class_name": "AllergyBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "AllergyBeanLoader.loadSingle(ResultSet)": {"calls": ["AllergyBean.setId(long)", "AllergyBean.setDescription(String)", "AllergyBean.setPatientID(long)", "AllergyBean.setFirstFound(Date)", "AllergyBeanLoader.loadSingle(ResultSet)"], "called_by": ["AllergyBeanLoader.loadList(ResultSet)", "AllergyBeanLoader.loadSingle(ResultSet)"], "class_name": "AllergyBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "AllergyBean.setId(long)": {"calls": [], "called_by": ["AllergyBeanLoader.loadSingle(ResultSet)"], "class_name": "AllergyBean", "method_name": "setId", "params": ["long"]}, "AllergyBean.setPatientID(long)": {"calls": [], "called_by": ["AllergyBeanLoader.loadSingle(ResultSet)"], "class_name": "AllergyBean", "method_name": "setPatientID", "params": ["long"]}, "AllergyBean.setFirstFound(Date)": {"calls": [], "called_by": ["AllergyBeanLoader.loadSingle(ResultSet)"], "class_name": "AllergyBean", "method_name": "setFirstFound", "params": ["Date"]}, "AllergyBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["AllergyBeanLoader.loadParameters(PreparedStatement,AllergyBean)"], "called_by": [], "class_name": "AllergyBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "AllergyBeanLoader.loadParameters(PreparedStatement,AllergyBean)": {"calls": [], "called_by": ["AllergyBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "AllergyBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "AllergyBean"]}, "FamilyBeanLoader.loadList(ResultSet)": {"calls": ["FamilyBeanLoader.loadSingle(ResultSet)"], "called_by": ["FamilyDAO.getFamilyMembers(long,String,String,boolean)"], "class_name": "FamilyBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "FamilyBeanLoader.loadSingle(ResultSet)": {"calls": ["FamilyMemberBean.setMid(long)", "FamilyMemberBean.setFirstName(String)", "FamilyMemberBean.setLastName(String)", "FamilyBeanLoader.loadSingle(ResultSet)", "FamilyMemberBean.setRelation(String)"], "called_by": ["FamilyBeanLoader.loadSingle(ResultSet)", "FamilyBeanLoader.loadList(ResultSet)"], "class_name": "FamilyBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "FamilyMemberBean.setFirstName(String)": {"calls": [], "called_by": ["FamilyBeanLoader.loadSingle(ResultSet)"], "class_name": "FamilyMemberBean", "method_name": "setFirstName", "params": ["String"]}, "FamilyMemberBean.setLastName(String)": {"calls": [], "called_by": ["FamilyBeanLoader.loadSingle(ResultSet)"], "class_name": "FamilyMemberBean", "method_name": "setLastName", "params": ["String"]}, "FamilyMemberBean.setMid(long)": {"calls": [], "called_by": ["FamilyBeanLoader.loadSingle(ResultSet)"], "class_name": "FamilyMemberBean", "method_name": "setMid", "params": ["long"]}, "FamilyBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["FamilyBeanLoader.loadParameters(PreparedStatement,FamilyMemberBean)"], "called_by": [], "class_name": "FamilyBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "FamilyBeanLoader.loadParameters(PreparedStatement,FamilyMemberBean)": {"calls": [], "called_by": ["FamilyBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "FamilyBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "FamilyMemberBean"]}, "LabProcedureBeanLoader.loadList(ResultSet)": {"calls": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "called_by": ["LabProcedureDAO.getAllLabProceduresLOINC(long)", "LabProcedureDAO.getAllLabProceduresDate(long)", "LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)", "LabProcedureDAO.getLabProceduresForPatientForNextMonth(long)", "LabProcedureDAO.getAllLabProceduresForDocOV(long,long)", "LabProcedureDAO.getAllLabProceduresForDocOV(long)", "LabProcedureDAO.getLabProceduresForPatient(long)", "LabProcedureDAO.getAllLabProcedures()"], "class_name": "LabProcedureBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "LabProcedureBeanLoader.loadSingle(ResultSet)": {"calls": ["LabProcedureBean.setTimestamp(Timestamp)", "LabProcedureBean.setStatus(String)", "LabProcedureBean.setRights(String)", "LabProcedureBean.setPid(long)", "LabProcedureBean.setResults(String)", "LabProcedureBean.setOvID(long)", "LabProcedureBeanLoader.loadSingle(ResultSet)", "LabProcedureBean.setLoinc(String)", "LabProcedureBean.setCommentary(String)", "LabProcedureBean.setProcedureID(long)"], "called_by": ["LabProcedureDAO.getLabProcedure(long)", "LabProcedureBeanLoader.loadSingle(ResultSet)", "LabProcedureBeanLoader.loadList(ResultSet)"], "class_name": "LabProcedureBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "LabProcedureBean.setProcedureID(long)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setProcedureID", "params": ["long"]}, "LabProcedureBean.setPid(long)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setPid", "params": ["long"]}, "LabProcedureBean.setLoinc(String)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setLoinc", "params": ["String"]}, "LabProcedureBean.setStatus(String)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setStatus", "params": ["String"]}, "LabProcedureBean.setCommentary(String)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setCommentary", "params": ["String"]}, "LabProcedureBean.setResults(String)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setResults", "params": ["String"]}, "LabProcedureBean.setOvID(long)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setOvID", "params": ["long"]}, "LabProcedureBean.setTimestamp(Timestamp)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setTimestamp", "params": ["Timestamp"]}, "LabProcedureBean.setRights(String)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "LabProcedureBean", "method_name": "setRights", "params": ["String"]}, "LabProcedureBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["LabProcedureBeanLoader.loadParameters(PreparedStatement,LabProcedureBean)"], "called_by": [], "class_name": "LabProcedureBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "LabProcedureBeanLoader.loadParameters(PreparedStatement,LabProcedureBean)": {"calls": [], "called_by": ["LabProcedureBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "LabProcedureBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "LabProcedureBean"]}, "RemoteMonitoringDataBeanLoader.loadList(ResultSet)": {"calls": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)"], "called_by": ["RemoteMonitoringDAO.getPatientsData(long)", "RemoteMonitoringDAO.getPatientDataByDate(long,Date,Date)", "RemoteMonitoringDAO.getNumberOfDailyEntries(long)"], "class_name": "RemoteMonitoringDataBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)": {"calls": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)", "RemoteMonitoringDataBean.setReporterMID(long)", "RemoteMonitoringDataBean.setDiastolicBloodPressure(int)", "RemoteMonitoringDataBean.setLoggedInMID(long)", "RemoteMonitoringDataBean.setReporterRole(String)", "RemoteMonitoringDataBean.setSystolicBloodPressure(int)", "RemoteMonitoringDataBean.setGlucoseLevel(int)", "RemoteMonitoringDataBean.setTime(Timestamp)"], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)", "RemoteMonitoringDataBeanLoader.loadList(ResultSet)"], "class_name": "RemoteMonitoringDataBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "RemoteMonitoringDataBean.setLoggedInMID(long)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setLoggedInMID", "params": ["long"]}, "RemoteMonitoringDataBean.setTime(Timestamp)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setTime", "params": ["Timestamp"]}, "RemoteMonitoringDataBean.setReporterRole(String)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setReporterRole", "params": ["String"]}, "RemoteMonitoringDataBean.setReporterMID(long)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadSingle(ResultSet)"], "class_name": "RemoteMonitoringDataBean", "method_name": "setReporterMID", "params": ["long"]}, "RemoteMonitoringDataBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["RemoteMonitoringDataBeanLoader.loadParameters(PreparedStatement,RemoteMonitoringDataBean)"], "called_by": [], "class_name": "RemoteMonitoringDataBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "RemoteMonitoringDataBeanLoader.loadParameters(PreparedStatement,RemoteMonitoringDataBean)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "RemoteMonitoringDataBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "RemoteMonitoringDataBean"]}, "OfficeVisitLoader.loadList(ResultSet)": {"calls": ["OfficeVisitLoader.loadSingle(ResultSet)"], "called_by": ["OfficeVisitDAO.getAllOfficeVisits(long)", "OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)", "OfficeVisitDAO.getOfficeVisitsWithNoSurvey(long)", "OfficeVisitDAO.getOfficeVisitsFromHospital(String)"], "class_name": "OfficeVisitLoader", "method_name": "loadList", "params": ["ResultSet"]}, "OfficeVisitLoader.loadSingle(ResultSet)": {"calls": ["OfficeVisitLoader.loadSingle(ResultSet)", "OfficeVisitBean.setNotes(String)", "OfficeVisitBean.setPatientID(long)", "OfficeVisitBean.setHcpID(long)", "OfficeVisitBean.setHospitalID(String)", "OfficeVisitBean.setVisitDateStr(String)"], "called_by": ["OfficeVisitLoader.loadSingle(ResultSet)", "PrescriptionReportBeanLoader.loadSingle(ResultSet)", "OfficeVisitLoader.loadList(ResultSet)"], "class_name": "OfficeVisitLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "OfficeVisitLoader.loadParameters(PreparedStatement,Object)": {"calls": ["OfficeVisitLoader.loadParameters(PreparedStatement,OfficeVisitBean)"], "called_by": [], "class_name": "OfficeVisitLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "OfficeVisitLoader.loadParameters(PreparedStatement,OfficeVisitBean)": {"calls": [], "called_by": ["OfficeVisitLoader.loadParameters(PreparedStatement,Object)"], "class_name": "OfficeVisitLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "OfficeVisitBean"]}, "PersonnelLoader.loadList(ResultSet)": {"calls": ["PersonnelLoader.loadSingle(ResultSet)"], "called_by": ["PersonnelDAO.getUAPsForHCP(long)", "PersonnelDAO.searchForPersonnelWithName(String,String)", "PersonnelDAO.getAllPersonnel()", "PersonnelDAO.getPrescribingDoctor(PrescriptionBean)", "PatientDAO.getDeclaredHCPs(long)"], "class_name": "PersonnelLoader", "method_name": "loadList", "params": ["ResultSet"]}, "PersonnelLoader.loadSingle(ResultSet)": {"calls": ["PersonnelBean.setFirstName(String)", "PersonnelBean.setLastName(String)", "PersonnelLoader.loadSingle(ResultSet)", "PersonnelBean.setRole(Role)", "PersonnelBean.setStreetAddress1(String)", "PersonnelBean.setCity(String)", "PersonnelBean.setSpecialty(String)", "PersonnelBean.setPhone1(String)", "PersonnelBean.setEmail(String)", "PersonnelBean.setZip2(String)", "PersonnelBean.setMID(long)", "PersonnelBean.setMessageFilter(String)", "PersonnelBean.setPhone3(String)", "PersonnelBean.setPhone2(String)", "PersonnelBean.setStreetAddress2(String)", "PersonnelBean.setZip1(String)", "Role.parse(String)", "PersonnelBean.setAMID(long)", "PersonnelBean.setState(String)"], "called_by": ["PersonnelLoader.loadSingle(ResultSet)", "PersonnelDAO.getPersonnel(long)", "PersonnelLoader.loadList(ResultSet)"], "class_name": "PersonnelLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "PersonnelBean.setAMID(long)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setAMID", "params": ["long"]}, "PersonnelBean.setRole(Role)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setRole", "params": ["Role"]}, "PersonnelBean.setLastName(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setLastName", "params": ["String"]}, "PersonnelBean.setFirstName(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setFirstName", "params": ["String"]}, "PersonnelBean.setPhone1(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setPhone1", "params": ["String"]}, "PersonnelBean.setPhone2(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setPhone2", "params": ["String"]}, "PersonnelBean.setPhone3(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setPhone3", "params": ["String"]}, "PersonnelBean.setStreetAddress1(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setStreetAddress1", "params": ["String"]}, "PersonnelBean.setStreetAddress2(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setStreetAddress2", "params": ["String"]}, "PersonnelBean.setCity(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setCity", "params": ["String"]}, "PersonnelBean.setState(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setState", "params": ["String"]}, "PersonnelBean.setZip1(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setZip1", "params": ["String"]}, "PersonnelBean.setZip2(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setZip2", "params": ["String"]}, "PersonnelBean.setEmail(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setEmail", "params": ["String"]}, "PersonnelBean.setSpecialty(String)": {"calls": [], "called_by": ["PersonnelLoader.loadSingle(ResultSet)"], "class_name": "PersonnelBean", "method_name": "setSpecialty", "params": ["String"]}, "PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)": {"calls": ["PersonnelBean.getZip1()", "PersonnelBean.getPhone3()", "PersonnelBean.getPhone1()", "PersonnelBean.getFirstName()", "PersonnelBean.getCity()", "PersonnelBean.getPhone2()", "PersonnelBean.getStreetAddress1()", "PersonnelBean.getState()", "PersonnelBean.getLastName()", "PersonnelBean.getZip2()", "PersonnelBean.getEmail()", "PersonnelBean.getZip()", "PersonnelBean.getMessageFilter()", "PersonnelBean.getStreetAddress2()", "PersonnelBean.getAMID()"], "called_by": ["PersonnelDAO.editPersonnel(PersonnelBean)", "PersonnelLoader.loadParameters(PreparedStatement,Object)"], "class_name": "PersonnelLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "PersonnelBean"]}, "PersonnelBean.getAMID()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getAMID", "params": []}, "PersonnelBean.getPhone1()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getPhone1", "params": []}, "PersonnelBean.getPhone2()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getPhone2", "params": []}, "PersonnelBean.getPhone3()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getPhone3", "params": []}, "PersonnelBean.getMessageFilter()": {"calls": [], "called_by": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getMessageFilter", "params": []}, "PersonnelLoader.loadParameters(PreparedStatement,Object)": {"calls": ["PersonnelLoader.loadParameters(PreparedStatement,PersonnelBean)"], "called_by": [], "class_name": "PersonnelLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "DrugInteractionBeanLoader.loadList(ResultSet)": {"calls": ["DrugInteractionBeanLoader.loadSingle(ResultSet)"], "called_by": ["DrugInteractionDAO.getInteractions(String)"], "class_name": "DrugInteractionBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "DrugInteractionBeanLoader.loadSingle(ResultSet)": {"calls": ["DrugInteractionBean.setDescription(String)", "DrugInteractionBeanLoader.loadSingle(ResultSet)", "DrugInteractionBean.setSecondDrug(String)", "DrugInteractionBean.setFirstDrug(String)"], "called_by": ["DrugInteractionBeanLoader.loadSingle(ResultSet)", "DrugInteractionBeanLoader.loadList(ResultSet)"], "class_name": "DrugInteractionBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "DrugInteractionBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["DrugInteractionBeanLoader.loadParameters(PreparedStatement,DrugInteractionBean)"], "called_by": [], "class_name": "DrugInteractionBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "DrugInteractionBeanLoader.loadParameters(PreparedStatement,DrugInteractionBean)": {"calls": [], "called_by": ["DrugInteractionBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "DrugInteractionBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "DrugInteractionBean"]}, "PrescriptionBeanLoader.loadList(ResultSet)": {"calls": ["PrescriptionBeanLoader.loadSingle(ResultSet)"], "called_by": ["PatientDAO.getCurrentPrescriptions(long)", "PatientDAO.getPrescriptions(long)", "OfficeVisitDAO.getPrescriptions(long)", "PatientDAO.getExpiredPrescriptions(long)"], "class_name": "PrescriptionBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "PrescriptionBeanLoader.loadSingle(ResultSet)": {"calls": ["PrescriptionBean.setVisitID(long)", "PrescriptionBeanLoader.loadSingle(ResultSet)", "PrescriptionBean.setId(long)", "PrescriptionBean.setInstructions(String)", "MedicationBeanLoader.loadSingle(ResultSet)", "PrescriptionBean.setMedication(MedicationBean)", "PrescriptionBean.setStartDateStr(String)", "PrescriptionBean.setDosage(int)", "PrescriptionBean.setEndDateStr(String)"], "called_by": ["PrescriptionBeanLoader.loadSingle(ResultSet)", "PrescriptionReportBeanLoader.loadSingle(ResultSet)", "PrescriptionBeanLoader.loadList(ResultSet)"], "class_name": "PrescriptionBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "PrescriptionBean.setId(long)": {"calls": [], "called_by": ["PrescriptionBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionBean", "method_name": "setId", "params": ["long"]}, "MedicationBeanLoader.loadSingle(ResultSet)": {"calls": ["MedicationBeanLoader.loadSingle(ResultSet)", "MedicationBean.setDescription(String)"], "called_by": ["PrescriptionBeanLoader.loadSingle(ResultSet)", "MedicationBeanLoader.loadList(ResultSet)", "MedicationBeanLoader.loadSingle(ResultSet)", "NDCodesDAO.getNDCode(String)"], "class_name": "MedicationBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)": {"calls": ["PrescriptionBean.getDosage()", "PrescriptionBean.getInstructions()", "PrescriptionBean.getMedication()", "PrescriptionBean.getStartDate()", "PrescriptionBean.getVisitID()", "PrescriptionBean.getEndDate()", "MedicationBean.getNDCode()"], "called_by": ["OfficeVisitDAO.editPrescription(PrescriptionBean)", "OfficeVisitDAO.addPrescription(PrescriptionBean)", "PrescriptionBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "PrescriptionBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "PrescriptionBean"]}, "PrescriptionBean.getVisitID()": {"calls": [], "called_by": ["PersonnelDAO.getPrescribingDoctor(PrescriptionBean)", "PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getVisitID", "params": []}, "PrescriptionBean.getStartDate()": {"calls": [], "called_by": ["PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getStartDate", "params": []}, "PrescriptionBean.getEndDate()": {"calls": [], "called_by": ["PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getEndDate", "params": []}, "PrescriptionBean.getDosage()": {"calls": [], "called_by": ["PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getDosage", "params": []}, "PrescriptionBean.getInstructions()": {"calls": [], "called_by": ["PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getInstructions", "params": []}, "PrescriptionBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["PrescriptionBeanLoader.loadParameters(PreparedStatement,PrescriptionBean)"], "called_by": [], "class_name": "PrescriptionBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "ApptBeanLoader.loadList(ResultSet)": {"calls": ["ApptBeanLoader.loadSingle(ResultSet)"], "called_by": ["ApptDAO.getApptsFor(long)", "ApptDAO.getAllAppts()"], "class_name": "ApptBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "ApptBeanLoader.loadSingle(ResultSet)": {"calls": ["ApptBean.setComment(String)", "ApptBean.setApptType(String)", "ApptBean.setDate(Timestamp)", "ApptBeanLoader.loadSingle(ResultSet)", "ApptBean.setHcp(long)", "ApptBean.setPatient(long)"], "called_by": ["ApptBeanLoader.loadSingle(ResultSet)", "ApptBeanLoader.loadList(ResultSet)"], "class_name": "ApptBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)": {"calls": ["ApptBean.getHcp()", "ApptBean.getDate()", "ApptBean.getPatient()", "ApptBean.getApptType()", "ApptBean.getComment()"], "called_by": ["ApptBeanLoader.loadParameters(PreparedStatement,Object)", "ApptDAO.scheduleAppt(ApptBean)"], "class_name": "ApptBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "ApptBean"]}, "ApptBean.getPatient()": {"calls": [], "called_by": ["ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)"], "class_name": "ApptBean", "method_name": "getPatient", "params": []}, "ApptBean.getHcp()": {"calls": [], "called_by": ["ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)"], "class_name": "ApptBean", "method_name": "getHcp", "params": []}, "ApptBean.getComment()": {"calls": [], "called_by": ["ApptBeanValidator.validate(ApptBean)", "ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)"], "class_name": "ApptBean", "method_name": "getComment", "params": []}, "ApptBean.setApptType(String)": {"calls": [], "called_by": ["ApptBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptBean", "method_name": "setApptType", "params": ["String"]}, "ApptBean.setPatient(long)": {"calls": [], "called_by": ["ApptBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptBean", "method_name": "setPatient", "params": ["long"]}, "ApptBean.setHcp(long)": {"calls": [], "called_by": ["ApptBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptBean", "method_name": "setHcp", "params": ["long"]}, "ApptBean.setDate(Timestamp)": {"calls": [], "called_by": ["ApptBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptBean", "method_name": "setDate", "params": ["Timestamp"]}, "ApptBean.setComment(String)": {"calls": [], "called_by": ["ApptBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptBean", "method_name": "setComment", "params": ["String"]}, "ApptBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["ApptBeanLoader.loadParameters(PreparedStatement,ApptBean)"], "called_by": [], "class_name": "ApptBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "MedicationBeanLoader.loadList(ResultSet)": {"calls": ["MedicationBeanLoader.loadSingle(ResultSet)"], "called_by": ["NDCodesDAO.getAllNDCodes()"], "class_name": "MedicationBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "MedicationBean.setDescription(String)": {"calls": [], "called_by": ["MedicationBeanLoader.loadSingle(ResultSet)"], "class_name": "MedicationBean", "method_name": "setDescription", "params": ["String"]}, "MedicationBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["MedicationBeanLoader.loadParameters(PreparedStatement,MedicationBean)"], "called_by": [], "class_name": "MedicationBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "MedicationBeanLoader.loadParameters(PreparedStatement,MedicationBean)": {"calls": [], "called_by": ["MedicationBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "MedicationBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "MedicationBean"]}, "ProcedureBeanLoader.loadList(ResultSet)": {"calls": ["ProcedureBeanLoader.loadSingle(ResultSet)"], "called_by": ["OfficeVisitDAO.getProcedures(long)", "PatientDAO.getProcedures(long)", "CPTCodesDAO.getAllCPTCodes()", "PatientDAO.getImmunizationProcedures(long)", "CPTCodesDAO.getImmunizationCPTCodes()"], "class_name": "ProcedureBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "ProcedureBeanLoader.loadSingle(ResultSet)": {"calls": ["ProcedureBeanLoader.loadSingle(ResultSet)", "ProcedureBean.setDescription(String)", "ProcedureBean.setAttribute(String)", "ProcedureBean.setOvProcedureID(long)", "ProcedureBean.setDate(Date)"], "called_by": ["ProcedureBeanLoader.loadSingle(ResultSet)", "ProcedureBeanLoader.loadList(ResultSet)", "CPTCodesDAO.getCPTCode(String)"], "class_name": "ProcedureBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "ProcedureBean.setDescription(String)": {"calls": [], "called_by": ["ProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "ProcedureBean", "method_name": "setDescription", "params": ["String"]}, "ProcedureBean.setAttribute(String)": {"calls": [], "called_by": ["ProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "ProcedureBean", "method_name": "setAttribute", "params": ["String"]}, "ProcedureBean.setOvProcedureID(long)": {"calls": [], "called_by": ["ProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "ProcedureBean", "method_name": "setOvProcedureID", "params": ["long"]}, "ProcedureBean.setDate(Date)": {"calls": [], "called_by": ["ProcedureBeanLoader.loadSingle(ResultSet)"], "class_name": "ProcedureBean", "method_name": "setDate", "params": ["Date"]}, "ProcedureBeanLoader.loadParameters(PreparedStatement,ProcedureBean)": {"calls": ["ProcedureBean.getDescription()"], "called_by": ["ProcedureBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "ProcedureBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "ProcedureBean"]}, "ProcedureBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["ProcedureBeanLoader.loadParameters(PreparedStatement,ProcedureBean)"], "called_by": [], "class_name": "ProcedureBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "SurveyLoader.loadSingle(ResultSet)": {"calls": ["SurveyBean.setWaitingRoomMinutes(int)", "SurveyBean.setVisitSatisfaction(int)", "SurveyLoader.loadSingle(ResultSet)", "SurveyBean.setSurveyDate(Date)", "SurveyBean.setTreatmentSatisfaction(int)", "SurveyBean.setExamRoomMinutes(int)", "SurveyBean.setVisitID(long)"], "called_by": ["SurveyDAO.getSurveyData(long)", "SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "SurveyBean.setExamRoomMinutes(int)": {"calls": [], "called_by": ["SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyBean", "method_name": "setExamRoomMinutes", "params": ["int"]}, "SurveyBean.setWaitingRoomMinutes(int)": {"calls": [], "called_by": ["SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyBean", "method_name": "setWaitingRoomMinutes", "params": ["int"]}, "SurveyBean.setTreatmentSatisfaction(int)": {"calls": [], "called_by": ["SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyBean", "method_name": "setTreatmentSatisfaction", "params": ["int"]}, "SurveyBean.setVisitSatisfaction(int)": {"calls": [], "called_by": ["SurveyLoader.loadSingle(ResultSet)"], "class_name": "SurveyBean", "method_name": "setVisitSatisfaction", "params": ["int"]}, "SurveyLoader.loadParameters(PreparedStatement,Object)": {"calls": ["SurveyLoader.loadParameters(PreparedStatement,SurveyBean)"], "called_by": [], "class_name": "SurveyLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "SurveyLoader.loadParameters(PreparedStatement,SurveyBean)": {"calls": [], "called_by": ["SurveyLoader.loadParameters(PreparedStatement,Object)"], "class_name": "SurveyLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "SurveyBean"]}, "ReportRequestBeanLoader.loadList(ResultSet)": {"calls": ["ReportRequestBeanLoader.loadSingle(ResultSet)"], "called_by": ["ReportRequestDAO.getAllReportRequestsForRequester(long)", "ReportRequestDAO.getAllReportRequestsForPatient(long)"], "class_name": "ReportRequestBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "ReportRequestBeanLoader.loadSingle(ResultSet)": {"calls": ["ReportRequestBean.setID(long)", "ReportRequestBean.setPatientMID(long)", "ReportRequestBeanLoader.loadSingle(ResultSet)", "ReportRequestBean.setViewedDate(Date)", "ReportRequestBean.setRequesterMID(long)", "ReportRequestBean.setStatus(String)", "ReportRequestBean.setRequestedDate(Date)"], "called_by": ["ReportRequestBeanLoader.loadSingle(ResultSet)", "ReportRequestBeanLoader.loadList(ResultSet)", "ReportRequestDAO.getReportRequest(long)"], "class_name": "ReportRequestBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "ReportRequestBean.setID(long)": {"calls": [], "called_by": ["ReportRequestBeanLoader.loadSingle(ResultSet)"], "class_name": "ReportRequestBean", "method_name": "setID", "params": ["long"]}, "ReportRequestBean.setRequesterMID(long)": {"calls": [], "called_by": ["ReportRequestBeanLoader.loadSingle(ResultSet)"], "class_name": "ReportRequestBean", "method_name": "setRequesterMID", "params": ["long"]}, "ReportRequestBean.setPatientMID(long)": {"calls": [], "called_by": ["ReportRequestBeanLoader.loadSingle(ResultSet)"], "class_name": "ReportRequestBean", "method_name": "setPatientMID", "params": ["long"]}, "ReportRequestBean.setStatus(String)": {"calls": [], "called_by": ["ReportRequestBeanLoader.loadSingle(ResultSet)"], "class_name": "ReportRequestBean", "method_name": "setStatus", "params": ["String"]}, "ReportRequestBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["ReportRequestBeanLoader.loadParameters(PreparedStatement,ReportRequestBean)"], "called_by": [], "class_name": "ReportRequestBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "ReportRequestBeanLoader.loadParameters(PreparedStatement,ReportRequestBean)": {"calls": [], "called_by": ["ReportRequestBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "ReportRequestBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "ReportRequestBean"]}, "HospitalBeanLoader.loadList(ResultSet)": {"calls": ["HospitalBeanLoader.loadSingle(ResultSet)"], "called_by": ["HospitalsDAO.getAllHospitals()", "PersonnelDAO.getHospitals(long)"], "class_name": "HospitalBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "HospitalBeanLoader.loadSingle(ResultSet)": {"calls": ["HospitalBeanLoader.loadSingle(ResultSet)"], "called_by": ["HospitalBeanLoader.loadSingle(ResultSet)", "HospitalBeanLoader.loadList(ResultSet)", "HospitalsDAO.getHospital(String)"], "class_name": "HospitalBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "HospitalBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["HospitalBeanLoader.loadParameters(PreparedStatement,HospitalBean)"], "called_by": [], "class_name": "HospitalBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "HospitalBeanLoader.loadParameters(PreparedStatement,HospitalBean)": {"calls": [], "called_by": ["HospitalBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "HospitalBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "HospitalBean"]}, "ReferralBeanLoader.loadList(ResultSet)": {"calls": ["ReferralBeanLoader.loadSingle(ResultSet)"], "called_by": ["ReferralDAO.getReferralsSentTo(long)", "ReferralDAO.getReferralsSentFrom(long)"], "class_name": "ReferralBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "ReferralBeanLoader.loadSingle(ResultSet)": {"calls": ["ReferralBean.setId(long)", "ReferralBean.setConsultationDetails(String)", "ReferralBean.setReferralDetails(String)", "ReferralBean.setStatus(ReferralBean$ReferralStatus)", "ReferralBean.setPatientID(long)", "ReferralBean.setReceiverID(long)", "ReferralBeanLoader.loadSingle(ResultSet)", "ReferralBean.setSenderID(long)"], "called_by": ["ReferralBeanLoader.loadList(ResultSet)", "ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "ReferralBean.setId(long)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setId", "params": ["long"]}, "ReferralBean.setSenderID(long)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setSenderID", "params": ["long"]}, "ReferralBean.setReceiverID(long)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setReceiverID", "params": ["long"]}, "ReferralBean.setPatientID(long)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setPatientID", "params": ["long"]}, "ReferralBean.setReferralDetails(String)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setReferralDetails", "params": ["String"]}, "ReferralBean.setConsultationDetails(String)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setConsultationDetails", "params": ["String"]}, "ReferralBean.setStatus(ReferralBean$ReferralStatus)": {"calls": [], "called_by": ["ReferralBeanLoader.loadSingle(ResultSet)"], "class_name": "ReferralBean", "method_name": "setStatus", "params": ["ReferralBean$ReferralStatus"]}, "ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)": {"calls": ["ReferralBean.getReceiverID()", "ReferralBean.getReferralDetails()", "ReferralBean.getSenderID()", "ReferralBean.getStatus()", "ReferralBean.getConsultationDetails()", "ReferralBean.getPatientID()"], "called_by": ["ReferralDAO.addReferral(ReferralBean)", "ReferralDAO.editReferral(ReferralBean)", "ReferralBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "ReferralBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "ReferralBean"]}, "ReferralBean.getPatientID()": {"calls": [], "called_by": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "class_name": "ReferralBean", "method_name": "getPatientID", "params": []}, "ReferralBean.getSenderID()": {"calls": [], "called_by": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "class_name": "ReferralBean", "method_name": "getSenderID", "params": []}, "ReferralBean.getReceiverID()": {"calls": [], "called_by": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "class_name": "ReferralBean", "method_name": "getReceiverID", "params": []}, "ReferralBean.getReferralDetails()": {"calls": [], "called_by": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "class_name": "ReferralBean", "method_name": "getReferralDetails", "params": []}, "ReferralBean.getConsultationDetails()": {"calls": [], "called_by": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "class_name": "ReferralBean", "method_name": "getConsultationDetails", "params": []}, "ReferralBean.getStatus()": {"calls": [], "called_by": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "class_name": "ReferralBean", "method_name": "getStatus", "params": []}, "ReferralBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["ReferralBeanLoader.loadParameters(PreparedStatement,ReferralBean)"], "called_by": [], "class_name": "ReferralBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "SurveyResultBeanLoader.loadList(ResultSet)": {"calls": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "called_by": ["SurveyResultDAO.getSurveyResultsForZip(String,String)", "SurveyResultDAO.getSurveyResultsForHospital(String,String)"], "class_name": "SurveyResultBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "SurveyResultBeanLoader.loadSingle(ResultSet)": {"calls": ["SurveyResultBean.setPercentSatisfactionResults(float)", "SurveyResultBean.setHCPaddress1(String)", "SurveyResultBean.setHCPhospital(String)", "SurveyResultBean.setHCPMID(long)", "SurveyResultBean.setHCPaddress2(String)", "SurveyResultBean.setAvgTreatmentSatisfaction(float)", "SurveyResultBean.setHCPspecialty(String)", "SurveyResultBean.setAvgWaitingRoomMinutes(float)", "SurveyResultBean.setAvgExamRoomMinutes(float)", "SurveyResultBean.setHCPzip(String)", "SurveyResultBean.setHCPcity(String)", "SurveyResultBean.setHCPLastName(String)", "SurveyResultBean.setAvgVisitSatisfaction(float)", "SurveyResultBean.setHCPFirstName(String)", "SurveyResultBean.setHCPstate(String)", "SurveyResultBeanLoader.loadSingle(ResultSet)"], "called_by": ["SurveyResultBeanLoader.loadList(ResultSet)", "SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "SurveyResultBean.setHCPMID(long)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPMID", "params": ["long"]}, "SurveyResultBean.setAvgExamRoomMinutes(float)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setAvgExamRoomMinutes", "params": ["float"]}, "SurveyResultBean.setAvgTreatmentSatisfaction(float)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setAvgTreatmentSatisfaction", "params": ["float"]}, "SurveyResultBean.setAvgVisitSatisfaction(float)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setAvgVisitSatisfaction", "params": ["float"]}, "SurveyResultBean.setAvgWaitingRoomMinutes(float)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setAvgWaitingRoomMinutes", "params": ["float"]}, "SurveyResultBean.setHCPaddress1(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPaddress1", "params": ["String"]}, "SurveyResultBean.setHCPaddress2(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPaddress2", "params": ["String"]}, "SurveyResultBean.setHCPcity(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPcity", "params": ["String"]}, "SurveyResultBean.setHCPstate(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPstate", "params": ["String"]}, "SurveyResultBean.setHCPzip(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPzip", "params": ["String"]}, "SurveyResultBean.setHCPhospital(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPhospital", "params": ["String"]}, "SurveyResultBean.setHCPFirstName(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPFirstName", "params": ["String"]}, "SurveyResultBean.setHCPLastName(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPLastName", "params": ["String"]}, "SurveyResultBean.setHCPspecialty(String)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setHCPspecialty", "params": ["String"]}, "SurveyResultBean.setPercentSatisfactionResults(float)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadSingle(ResultSet)"], "class_name": "SurveyResultBean", "method_name": "setPercentSatisfactionResults", "params": ["float"]}, "SurveyResultBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["SurveyResultBeanLoader.loadParameters(PreparedStatement,SurveyResultBean)"], "called_by": [], "class_name": "SurveyResultBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "SurveyResultBeanLoader.loadParameters(PreparedStatement,SurveyResultBean)": {"calls": [], "called_by": ["SurveyResultBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "SurveyResultBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "SurveyResultBean"]}, "TransactionBeanLoader.loadList(ResultSet)": {"calls": ["TransactionBeanLoader.loadSingle(ResultSet)"], "called_by": ["TransactionDAO.getAllRecordAccesses(long,boolean)", "TransactionDAO.getRecordAccesses(long,Date,Date,boolean)", "TransactionDAO.getTransactionsFor(String,String,Date,Date,TransactionType)", "TransactionDAO.getAllTransactions()"], "class_name": "TransactionBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "TransactionBeanLoader.loadSingle(ResultSet)": {"calls": ["TransactionBean.setTimeLogged(Timestamp)", "TransactionType.parse(int)", "TransactionBean.setLoggedInMID(long)", "TransactionBean.setTransactionID(long)", "TransactionBean.setSecondaryMID(long)", "TransactionBean.setAddedInfo(String)", "TransactionBeanLoader.loadSingle(ResultSet)", "TransactionBean.setTransactionType(TransactionType)"], "called_by": ["TransactionBeanLoader.loadList(ResultSet)", "TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "TransactionBean.setAddedInfo(String)": {"calls": [], "called_by": ["TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBean", "method_name": "setAddedInfo", "params": ["String"]}, "TransactionBean.setLoggedInMID(long)": {"calls": [], "called_by": ["TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBean", "method_name": "setLoggedInMID", "params": ["long"]}, "TransactionBean.setSecondaryMID(long)": {"calls": [], "called_by": ["TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBean", "method_name": "setSecondaryMID", "params": ["long"]}, "TransactionBean.setTimeLogged(Timestamp)": {"calls": [], "called_by": ["TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBean", "method_name": "setTimeLogged", "params": ["Timestamp"]}, "TransactionType.parse(int)": {"calls": ["TransactionType.values()"], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)", "TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionType", "method_name": "parse", "params": ["int"]}, "TransactionBean.setTransactionType(TransactionType)": {"calls": [], "called_by": ["TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBean", "method_name": "setTransactionType", "params": ["TransactionType"]}, "TransactionBean.setTransactionID(long)": {"calls": [], "called_by": ["TransactionBeanLoader.loadSingle(ResultSet)"], "class_name": "TransactionBean", "method_name": "setTransactionID", "params": ["long"]}, "TransactionBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["TransactionBeanLoader.loadParameters(PreparedStatement,TransactionBean)"], "called_by": [], "class_name": "TransactionBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "TransactionBeanLoader.loadParameters(PreparedStatement,TransactionBean)": {"calls": [], "called_by": ["TransactionBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "TransactionBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "TransactionBean"]}, "DiagnosisBeanLoader.loadList(ResultSet)": {"calls": ["DiagnosisBeanLoader.loadSingle(ResultSet)"], "called_by": ["OfficeVisitDAO.getDiagnoses(long)", "PatientDAO.getDiagnoses(long)", "ICDCodesDAO.getAllICDCodes()", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)"], "class_name": "DiagnosisBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "DiagnosisBeanLoader.loadSingle(ResultSet)": {"calls": ["DiagnosisBean.setOvDiagnosisID(long)", "DiagnosisBean.setVisitID(long)", "DiagnosisBeanLoader.loadSingle(ResultSet)"], "called_by": ["DiagnosisBeanLoader.loadList(ResultSet)", "ICDCodesDAO.getICDCode(String)", "DiagnosisBeanLoader.loadSingle(ResultSet)"], "class_name": "DiagnosisBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "DiagnosisBean.setOvDiagnosisID(long)": {"calls": [], "called_by": ["DiagnosisBeanLoader.loadSingle(ResultSet)"], "class_name": "DiagnosisBean", "method_name": "setOvDiagnosisID", "params": ["long"]}, "DiagnosisBean.setVisitID(long)": {"calls": [], "called_by": ["DiagnosisBeanLoader.loadSingle(ResultSet)"], "class_name": "DiagnosisBean", "method_name": "setVisitID", "params": ["long"]}, "DiagnosisBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["DiagnosisBeanLoader.loadParameters(PreparedStatement,DiagnosisBean)"], "called_by": [], "class_name": "DiagnosisBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "DiagnosisBeanLoader.loadParameters(PreparedStatement,DiagnosisBean)": {"calls": [], "called_by": ["DiagnosisBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "DiagnosisBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "DiagnosisBean"]}, "VisitReminderReturnFormLoader.loadList(ResultSet)": {"calls": ["VisitReminderReturnFormLoader.loadSingle(ResultSet)"], "called_by": [], "class_name": "VisitReminderReturnFormLoader", "method_name": "loadList", "params": ["ResultSet"]}, "VisitReminderReturnFormLoader.loadSingle(ResultSet)": {"calls": ["VisitReminderReturnFormLoader.loadSingle(ResultSet)"], "called_by": ["VisitRemindersDAO.getFluShotDelinquents(long)", "VisitRemindersDAO.getDiagnosedVisitNeeders(long)", "VisitReminderReturnFormLoader.loadSingle(ResultSet)", "VisitRemindersDAO.getPatients(long)", "VisitReminderReturnFormLoader.loadList(ResultSet)"], "class_name": "VisitReminderReturnFormLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "VisitReminderReturnFormLoader.loadParameters(PreparedStatement,Object)": {"calls": ["VisitReminderReturnFormLoader.loadParameters(PreparedStatement,VisitReminderReturnForm)"], "called_by": [], "class_name": "VisitReminderReturnFormLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "VisitReminderReturnFormLoader.loadParameters(PreparedStatement,VisitReminderReturnForm)": {"calls": [], "called_by": ["VisitReminderReturnFormLoader.loadParameters(PreparedStatement,Object)"], "class_name": "VisitReminderReturnFormLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "VisitReminderReturnForm"]}, "HealthRecordsBeanLoader.loadList(ResultSet)": {"calls": ["HealthRecordsBeanLoader.loadSingle(ResultSet)"], "called_by": ["HealthRecordsDAO.getAllHealthRecords(long)"], "class_name": "HealthRecordsBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "HealthRecordsBeanLoader.loadSingle(ResultSet)": {"calls": ["HealthRecord.setDateRecorded(Timestamp)", "HealthRecord.setCholesterolLDL(int)", "HealthRecord.setCholesterolTri(int)", "HealthRecord.setHeight(double)", "HealthRecord.setBloodPressureD(int)", "HealthRecord.setPersonnelID(long)", "HealthRecord.setSmoker(boolean)", "HealthRecordsBeanLoader.loadSingle(ResultSet)", "HealthRecord.setWeight(double)", "HealthRecord.setBloodPressureN(int)", "HealthRecord.setCholesterolHDL(int)", "HealthRecord.setPatientID(long)"], "called_by": ["HealthRecordsBeanLoader.loadList(ResultSet)", "HealthRecordsBeanLoader.loadSingle(ResultSet)"], "class_name": "HealthRecordsBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)": {"calls": ["HealthRecord.getCholesterolTri()", "HealthRecord.getPatientID()", "HealthRecord.getCholesterolHDL()", "HealthRecord.getBloodPressureD()", "HealthRecord.getCholesterolLDL()", "HealthRecord.getWeight()", "HealthRecord.isSmoker()", "HealthRecord.getPersonnelID()", "HealthRecord.getBloodPressureN()", "HealthRecord.getHeight()"], "called_by": ["HealthRecordsDAO.add(HealthRecord)", "HealthRecordsBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "HealthRecordsBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "HealthRecord"]}, "HealthRecord.getPatientID()": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "class_name": "HealthRecord", "method_name": "getPatientID", "params": []}, "HealthRecord.getHeight()": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "class_name": "HealthRecord", "method_name": "getHeight", "params": []}, "HealthRecord.getWeight()": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "class_name": "HealthRecord", "method_name": "getWeight", "params": []}, "HealthRecord.getPersonnelID()": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "class_name": "HealthRecord", "method_name": "getPersonnelID", "params": []}, "HealthRecord.setDateRecorded(Timestamp)": {"calls": [], "called_by": ["HealthRecordsBeanLoader.loadSingle(ResultSet)"], "class_name": "HealthRecord", "method_name": "setDateRecorded", "params": ["Timestamp"]}, "HealthRecordsBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["HealthRecordsBeanLoader.loadParameters(PreparedStatement,HealthRecord)"], "called_by": [], "class_name": "HealthRecordsBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "PrescriptionReportBeanLoader.loadList(ResultSet)": {"calls": ["PrescriptionReportBeanLoader.loadSingle(ResultSet)"], "called_by": ["OfficeVisitDAO.getPrescriptionReports(List,long)", "OfficeVisitDAO.getPrescriptionReportsByDate(long,String,String)"], "class_name": "PrescriptionReportBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "PrescriptionReportBeanLoader.loadSingle(ResultSet)": {"calls": ["PrescriptionReportBean.setPrescription(PrescriptionBean)", "PrescriptionReportBeanLoader.loadSingle(ResultSet)", "PrescriptionReportBean.setOfficeVisit(OfficeVisitBean)", "PrescriptionBeanLoader.loadSingle(ResultSet)", "OfficeVisitLoader.loadSingle(ResultSet)"], "called_by": ["PrescriptionReportBeanLoader.loadSingle(ResultSet)", "PrescriptionReportBeanLoader.loadList(ResultSet)"], "class_name": "PrescriptionReportBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "PrescriptionReportBean.setOfficeVisit(OfficeVisitBean)": {"calls": [], "called_by": ["PrescriptionReportBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionReportBean", "method_name": "setOfficeVisit", "params": ["OfficeVisitBean"]}, "PrescriptionReportBean.setPrescription(PrescriptionBean)": {"calls": [], "called_by": ["PrescriptionReportBeanLoader.loadSingle(ResultSet)"], "class_name": "PrescriptionReportBean", "method_name": "setPrescription", "params": ["PrescriptionBean"]}, "PrescriptionReportBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["PrescriptionReportBeanLoader.loadParameters(PreparedStatement,PrescriptionReportBean)"], "called_by": [], "class_name": "PrescriptionReportBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "PrescriptionReportBeanLoader.loadParameters(PreparedStatement,PrescriptionReportBean)": {"calls": [], "called_by": ["PrescriptionReportBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "PrescriptionReportBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "PrescriptionReportBean"]}, "OperationalProfileLoader.loadSingle(ResultSet)": {"calls": ["OperationalProfileLoader.loadSingle(ResultSet)", "OperationalProfile.setNumPersonnelTransactions(int)", "OperationalProfile.getPatientCount()", "OperationalProfile.setNumPatientTransactions(int)", "OperationalProfile.getTotalCount()", "TransactionType.parse(int)", "OperationalProfile.setNumTotalTransactions(int)", "OperationalProfile.getPersonnelCount()"], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)", "TransactionDAO.getOperationalProfile()"], "class_name": "OperationalProfileLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "OperationalProfile.getTotalCount()": {"calls": [], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)"], "class_name": "OperationalProfile", "method_name": "getTotalCount", "params": []}, "OperationalProfile.getPatientCount()": {"calls": [], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)"], "class_name": "OperationalProfile", "method_name": "getPatientCount", "params": []}, "OperationalProfile.getPersonnelCount()": {"calls": [], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)"], "class_name": "OperationalProfile", "method_name": "getPersonnelCount", "params": []}, "OperationalProfile.setNumTotalTransactions(int)": {"calls": [], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)"], "class_name": "OperationalProfile", "method_name": "setNumTotalTransactions", "params": ["int"]}, "OperationalProfile.setNumPatientTransactions(int)": {"calls": [], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)"], "class_name": "OperationalProfile", "method_name": "setNumPatientTransactions", "params": ["int"]}, "OperationalProfile.setNumPersonnelTransactions(int)": {"calls": [], "called_by": ["OperationalProfileLoader.loadSingle(ResultSet)"], "class_name": "OperationalProfile", "method_name": "setNumPersonnelTransactions", "params": ["int"]}, "OperationalProfileLoader.loadParameters(PreparedStatement,Object)": {"calls": ["OperationalProfileLoader.loadParameters(PreparedStatement,OperationalProfile)"], "called_by": [], "class_name": "OperationalProfileLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "OperationalProfileLoader.loadParameters(PreparedStatement,OperationalProfile)": {"calls": [], "called_by": ["OperationalProfileLoader.loadParameters(PreparedStatement,Object)"], "class_name": "OperationalProfileLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "OperationalProfile"]}, "MessageBeanLoader.loadList(ResultSet)": {"calls": ["MessageBeanLoader.loadSingle(ResultSet)"], "called_by": ["MessageDAO.getMessagesFrom(long)", "MessageDAO.getMessagesFor(long)", "MessageDAO.getMessagesNameDescending(long)", "MessageDAO.getMessagesFromNameDescending(long)", "MessageDAO.getMessagesFromNameAscending(long)", "MessageDAO.getMessagesTimeAscending(long)", "MessageDAO.getMessagesNameAscending(long)", "MessageDAO.getMessagesFromTimeAscending(long)"], "class_name": "MessageBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "MessageBeanLoader.loadSingle(ResultSet)": {"calls": ["MessageBean.setBody(String)", "MessageBeanLoader.loadSingle(ResultSet)", "MessageBean.setFrom(long)", "MessageBean.setMessageId(long)", "MessageBean.setParentMessageId(long)", "MessageBean.setSubject(String)", "MessageBean.setTo(long)", "MessageBean.setRead(int)", "MessageBean.setSentDate(Timestamp)"], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)", "MessageBeanLoader.loadList(ResultSet)"], "class_name": "MessageBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)": {"calls": ["MessageBean.getRead()", "MessageBean.getTo()", "MessageBean.getParentMessageId()", "MessageBean.getBody()", "MessageBean.getFrom()", "MessageBean.getSubject()"], "called_by": ["MessageDAO.addMessage(MessageBean)", "MessageBeanLoader.loadParameters(PreparedStatement,Object)"], "class_name": "MessageBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "MessageBean"]}, "MessageBean.getRead()": {"calls": [], "called_by": ["MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)"], "class_name": "MessageBean", "method_name": "getRead", "params": []}, "MessageBean.getParentMessageId()": {"calls": [], "called_by": ["MessageDAO.addMessage(MessageBean)", "MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)"], "class_name": "MessageBean", "method_name": "getParentMessageId", "params": []}, "MessageBean.setMessageId(long)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)"], "class_name": "MessageBean", "method_name": "setMessageId", "params": ["long"]}, "MessageBean.setSentDate(Timestamp)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)"], "class_name": "MessageBean", "method_name": "setSentDate", "params": ["Timestamp"]}, "MessageBean.setRead(int)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)"], "class_name": "MessageBean", "method_name": "setRead", "params": ["int"]}, "MessageBean.setParentMessageId(long)": {"calls": [], "called_by": ["MessageBeanLoader.loadSingle(ResultSet)"], "class_name": "MessageBean", "method_name": "setParentMessageId", "params": ["long"]}, "MessageBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["MessageBeanLoader.loadParameters(PreparedStatement,MessageBean)"], "called_by": [], "class_name": "MessageBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "ApptTypeBeanLoader.loadList(ResultSet)": {"calls": ["ApptTypeBeanLoader.loadSingle(ResultSet)"], "called_by": ["ApptTypeDAO.getApptTypes()"], "class_name": "ApptTypeBeanLoader", "method_name": "loadList", "params": ["ResultSet"]}, "ApptTypeBeanLoader.loadSingle(ResultSet)": {"calls": ["ApptTypeBean.setDuration(int)", "ApptTypeBean.setName(String)", "ApptTypeBeanLoader.loadSingle(ResultSet)"], "called_by": ["ApptTypeBeanLoader.loadSingle(ResultSet)", "ApptTypeBeanLoader.loadList(ResultSet)"], "class_name": "ApptTypeBeanLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "ApptTypeBeanLoader.loadParameters(PreparedStatement,ApptTypeBean)": {"calls": ["ApptTypeBean.getDuration()", "ApptTypeBean.getName()"], "called_by": ["ApptTypeBeanLoader.loadParameters(PreparedStatement,Object)", "ApptTypeDAO.addApptType(ApptTypeBean)"], "class_name": "ApptTypeBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "ApptTypeBean"]}, "ApptTypeBean.setName(String)": {"calls": [], "called_by": ["ApptTypeBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptTypeBean", "method_name": "setName", "params": ["String"]}, "ApptTypeBean.setDuration(int)": {"calls": [], "called_by": ["ApptTypeBeanLoader.loadSingle(ResultSet)"], "class_name": "ApptTypeBean", "method_name": "setDuration", "params": ["int"]}, "ApptTypeBeanLoader.loadParameters(PreparedStatement,Object)": {"calls": ["ApptTypeBeanLoader.loadParameters(PreparedStatement,ApptTypeBean)"], "called_by": [], "class_name": "ApptTypeBeanLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "PatientLoader.loadList(ResultSet)": {"calls": ["PatientLoader.loadSingle(ResultSet)"], "called_by": ["PatientDAO.getAllPatients()", "PatientDAO.getRepresented(long)", "PatientDAO.searchForPatientsWithName(String,String)", "PatientDAO.getRepresenting(long)", "PatientDAO.getRenewalNeedsPatients(long)"], "class_name": "PatientLoader", "method_name": "loadList", "params": ["ResultSet"]}, "PatientLoader.loadSingle(ResultSet)": {"calls": ["PatientBean.setEmergencyPhone2(String)", "PatientBean.setMotherMID(String)", "PatientBean.setStreetAddress1(String)", "PatientBean.setIcCity(String)", "PatientLoader.loadSingle(ResultSet)", "PatientBean.setIcState(String)", "PatientBean.setBloodTypeStr(String)", "PatientBean.setDateOfDeathStr(String)", "PatientBean.setMID(long)", "PatientBean.setState(String)", "PatientBean.setIcID(String)", "PatientBean.setEmergencyPhone1(String)", "PatientBean.setEmergencyName(String)", "PatientBean.setIcZip2(String)", "PatientBean.setEthnicityStr(String)", "PatientBean.setStreetAddress2(String)", "PatientBean.setPhone3(String)", "PatientBean.setCity(String)", "PatientBean.setZip2(String)", "PatientBean.setPhone1(String)", "PatientBean.setIcPhone1(String)", "PatientBean.setTopicalNotes(String)", "PatientBean.setMessageFilter(String)", "PatientBean.setEmail(String)", "PatientBean.setDateOfBirthStr(String)", "PatientBean.setIcAddress2(String)", "PatientBean.setCreditCardNumber(String)", "PatientBean.setCauseOfDeath(String)", "PatientBean.setCreditCardType(String)", "PatientBean.setEmergencyPhone3(String)", "PatientBean.setIcZip1(String)", "PatientBean.setGenderStr(String)", "PatientBean.setFirstName(String)", "PatientBean.setLastName(String)", "PatientBean.setZip1(String)", "PatientBean.setIcName(String)", "PatientBean.setFatherMID(String)", "PatientBean.setPhone2(String)", "PatientBean.setIcPhone3(String)", "PatientBean.setIcPhone2(String)", "PatientBean.setIcAddress1(String)"], "called_by": ["PatientLoader.loadList(ResultSet)", "PatientDAO.getPatient(long)", "PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientLoader", "method_name": "loadSingle", "params": ["ResultSet"]}, "PatientBean.setFirstName(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setFirstName", "params": ["String"]}, "PatientBean.setLastName(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setLastName", "params": ["String"]}, "PatientBean.setDateOfBirthStr(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setDateOfBirthStr", "params": ["String"]}, "PatientBean.setDateOfDeathStr(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setDateOfDeathStr", "params": ["String"]}, "PatientBean.setCauseOfDeath(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setCauseOfDeath", "params": ["String"]}, "PatientBean.setEmail(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setEmail", "params": ["String"]}, "PatientBean.setStreetAddress1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setStreetAddress1", "params": ["String"]}, "PatientBean.setStreetAddress2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setStreetAddress2", "params": ["String"]}, "PatientBean.setCity(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setCity", "params": ["String"]}, "PatientBean.setState(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setState", "params": ["String"]}, "PatientBean.setZip1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setZip1", "params": ["String"]}, "PatientBean.setZip2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setZip2", "params": ["String"]}, "PatientBean.setPhone1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setPhone1", "params": ["String"]}, "PatientBean.setPhone2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setPhone2", "params": ["String"]}, "PatientBean.setPhone3(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setPhone3", "params": ["String"]}, "PatientBean.setEmergencyName(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setEmergencyName", "params": ["String"]}, "PatientBean.setEmergencyPhone1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setEmergencyPhone1", "params": ["String"]}, "PatientBean.setEmergencyPhone2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setEmergencyPhone2", "params": ["String"]}, "PatientBean.setEmergencyPhone3(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setEmergencyPhone3", "params": ["String"]}, "PatientBean.setIcName(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcName", "params": ["String"]}, "PatientBean.setIcAddress1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcAddress1", "params": ["String"]}, "PatientBean.setIcAddress2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcAddress2", "params": ["String"]}, "PatientBean.setIcCity(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcCity", "params": ["String"]}, "PatientBean.setIcState(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcState", "params": ["String"]}, "PatientBean.setIcZip1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcZip1", "params": ["String"]}, "PatientBean.setIcZip2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcZip2", "params": ["String"]}, "PatientBean.setIcPhone1(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcPhone1", "params": ["String"]}, "PatientBean.setIcPhone2(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcPhone2", "params": ["String"]}, "PatientBean.setIcPhone3(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcPhone3", "params": ["String"]}, "PatientBean.setIcID(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setIcID", "params": ["String"]}, "PatientBean.setMotherMID(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setMotherMID", "params": ["String"]}, "PatientBean.setFatherMID(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setFatherMID", "params": ["String"]}, "PatientBean.setTopicalNotes(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setTopicalNotes", "params": ["String"]}, "PatientBean.setCreditCardType(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setCreditCardType", "params": ["String"]}, "PatientBean.setCreditCardNumber(String)": {"calls": [], "called_by": ["PatientLoader.loadSingle(ResultSet)"], "class_name": "PatientBean", "method_name": "setCreditCardNumber", "params": ["String"]}, "PatientLoader.loadParameters(PreparedStatement,PatientBean)": {"calls": ["PatientBean.getIcAddress1()", "PatientBean.getEmergencyPhone3()", "PatientBean.getState()", "PatientBean.getGender()", "PatientBean.getIcZip1()", "PatientBean.getPhone2()", "PatientBean.getTopicalNotes()", "PatientBean.getIcZip2()", "PatientBean.getZip2()", "PatientBean.getPhone3()", "PatientBean.getIcCity()", "PatientBean.getIcPhone3()", "Gender.getName()", "PatientBean.getIcPhone2()", "PatientBean.getCreditCardType()", "PatientBean.getIcID()", "PatientBean.getDateOfBirthStr()", "PatientBean.getCreditCardNumber()", "PatientBean.getEmergencyPhone2()", "PatientBean.getIcState()", "PatientBean.getPhone1()", "PatientBean.getEmail()", "PatientBean.getBloodType()", "PatientBean.getEmergencyName()", "BloodType.getName()", "PatientBean.getZip1()", "PatientBean.getIcName()", "PatientBean.getEmergencyPhone1()", "PatientBean.getFatherMID()", "PatientBean.getEthnicity()", "Ethnicity.getName()", "PatientBean.getMessageFilter()", "PatientBean.getIcAddress2()", "PatientBean.getMotherMID()", "PatientBean.getStreetAddress2()", "PatientBean.getLastName()", "PatientBean.getCity()", "PatientBean.getDateOfDeathStr()", "PatientBean.getStreetAddress1()", "PatientBean.getCauseOfDeath()", "PatientBean.getFirstName()", "PatientBean.getIcPhone1()"], "called_by": ["PatientDAO.editPatient(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,Object)"], "class_name": "PatientLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "PatientBean"]}, "PatientBean.getIcName()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcName", "params": []}, "PatientBean.getIcAddress1()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcAddress1", "params": []}, "PatientBean.getIcAddress2()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcAddress2", "params": []}, "PatientBean.getIcID()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getIcID", "params": []}, "PatientBean.getDateOfBirthStr()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getDateOfBirthStr", "params": []}, "PatientBean.getDateOfDeathStr()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getDateOfDeathStr", "params": []}, "PatientBean.getMotherMID()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getMotherMID", "params": []}, "PatientBean.getFatherMID()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getFatherMID", "params": []}, "BloodType.getName()": {"calls": [], "called_by": ["BloodType.toString()", "BloodType.parse(String)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "BloodType", "method_name": "getName", "params": []}, "PatientBean.getEthnicity()": {"calls": [], "called_by": ["EthnicityFactor.hasFactor()", "EthnicityFactor.getDescription()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getEthnicity", "params": []}, "Ethnicity.getName()": {"calls": [], "called_by": ["Ethnicity.toString()", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "Ethnicity", "method_name": "getName", "params": []}, "PatientBean.getTopicalNotes()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getTopicalNotes", "params": []}, "PatientBean.getCreditCardType()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getCreditCardType", "params": []}, "PatientBean.getCreditCardNumber()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)", "PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getCreditCardNumber", "params": []}, "PatientBean.getMessageFilter()": {"calls": [], "called_by": ["PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "class_name": "PatientBean", "method_name": "getMessageFilter", "params": []}, "PatientLoader.loadParameters(PreparedStatement,Object)": {"calls": ["PatientLoader.loadParameters(PreparedStatement,PatientBean)"], "called_by": [], "class_name": "PatientLoader", "method_name": "loadParameters", "params": ["PreparedStatement", "Object"]}, "AdverseEventsData.produceDataset(Map)": {"calls": ["AdverseEventBean.getDate()"], "called_by": [], "class_name": "AdverseEventsData", "method_name": "produceDataset", "params": ["Map"]}, "AdverseEventBean.getDate()": {"calls": [], "called_by": ["AdverseEventsData.produceDataset(Map)"], "class_name": "AdverseEventBean", "method_name": "getDate", "params": []}, "IConnectionDriver.getConnection()": {"calls": [], "called_by": ["DAOFactory.getConnection()"], "class_name": "IConnectionDriver", "method_name": "getConnection", "params": []}, "OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)": {"calls": ["OfficeVisitBean.getHospitalID()", "OfficeVisitBean.getHcpID()", "OfficeVisitBean.getNotes()", "OfficeVisitBean.getVisitDate()", "OfficeVisitBean.getPatientID()"], "called_by": ["OfficeVisitDAO.update(OfficeVisitBean)", "OfficeVisitDAO.add(OfficeVisitBean)"], "class_name": "OfficeVisitDAO", "method_name": "setValues", "params": ["PreparedStatement", "OfficeVisitBean"]}, "DBUtil.getLastInsert(Connection)": {"calls": [], "called_by": ["OfficeVisitDAO.addPrescription(PrescriptionBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)", "OfficeVisitDAO.addProcedureToOfficeVisit(String,long,String)", "ReportRequestDAO.addReportRequest(long,long,Date)", "AdverseEventDAO.removeReport(int)", "OfficeVisitDAO.editPrescription(PrescriptionBean)", "PersonnelDAO.addEmptyPersonnel(Role)", "OfficeVisitDAO.addLabProcedureToOfficeVisit(String,long,long)", "OfficeVisitDAO.addDiagnosisToOfficeVisit(double,long)", "PatientDAO.addEmptyPatient()", "OfficeVisitDAO.add(OfficeVisitBean)"], "class_name": "DBUtil", "method_name": "getLastInsert", "params": ["Connection"]}, "DBUtil.closeConnection(Connection,PreparedStatement)": {"calls": [], "called_by": ["OfficeVisitDAO.getAllOfficeVisits(long)", "PatientDAO.getCurrentPrescriptions(long)", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)", "SurveyResultDAO.getSurveyResultsForHospital(String,String)", "NDCodesDAO.updateCode(MedicationBean)", "PatientDAO.declareHCP(long,long)", "RemoteMonitoringDAO.validatePR(long,long)", "LabProcedureDAO.getLabProceduresForPatient(long)", "CPTCodesDAO.getImmunizationCPTCodes()", "LabProcedureDAO.updateRights(LabProcedureBean)", "AuthDAO.addUser(Long,Role,String)", "PatientDAO.getPrescriptions(long)", "TransactionDAO.getTransactionsFor(String,String,Date,Date,TransactionType)", "OfficeVisitDAO.getPrescriptionReportsByDate(long,String,String)", "AdverseEventDAO.getPerscriptions(String,String)", "FakeEmailDAO.getEmailsByPerson(String)", "RiskDAO.hasSmoked(long)", "HealthRecordsDAO.getAllHealthRecords(long)", "PatientDAO.removeRepresentative(long,long)", "AdverseEventDAO.getImmunizations(String,String)", "NDCodesDAO.addNDCode(MedicationBean)", "HospitalsDAO.updateHospital(HospitalBean)", "PatientDAO.checkDeclaredHCP(long,long)", "RiskDAO.hadChildhoodInfection(long,double[])", "TransactionDAO.logTransaction(TransactionType,long,long,String)", "MessageDAO.getMessagesNameAscending(long)", "AllergyDAO.getAllergies(long)", "PatientDAO.getExpiredPrescriptions(long)", "DrugInteractionDAO.deleteInteraction(String,String)", "OfficeVisitDAO.addPrescription(PrescriptionBean)", "TransactionDAO.getAllTransactions()", "OfficeVisitDAO.removeProcedureFromOfficeVisit(long)", "OfficeVisitDAO.addProcedureToOfficeVisit(String,long,String)", "MessageDAO.getMessagesFromNameAscending(long)", "VisitRemindersDAO.getPatients(long)", "ApptDAO.getApptsFor(long)", "AdverseEventDAO.getReport(int)", "TransactionDAO.getOperationalProfile()", "RemoteMonitoringDAO.storePatientData(long,int,String,long)", "PersonnelDAO.getName(long)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)", "PatientDAO.getPatient(long)", "TransactionDAO.getAllRecordAccesses(long,boolean)", "ApptTypeDAO.addApptType(ApptTypeBean)", "PatientDAO.getAllPatients()", "PersonnelDAO.addEmptyPersonnel(Role)", "PatientDAO.getName(long)", "PatientDAO.getRole(long,String)", "MessageDAO.getMessagesTimeAscending(long)", "AuthDAO.recordLoginFailure(String)", "PersonnelDAO.searchForPersonnelWithName(String,String)", "SurveyResultDAO.getSurveyResultsForZip(String,String)", "PersonnelDAO.getHospitals(long)", "PatientDAO.editPatient(PatientBean)", "OfficeVisitDAO.update(OfficeVisitBean)", "OfficeVisitDAO.getPrescriptions(long)", "PatientDAO.getProcedures(long)", "HospitalsDAO.getHospital(String)", "ReferralDAO.addReferral(ReferralBean)", "CPTCodesDAO.updateCode(ProcedureBean)", "AuthDAO.getSecurityQuestion(long)", "ReportRequestDAO.setViewed(long,Date)", "FamilyDAO.getFamilyMembers(long,String,String,boolean)", "TransactionDAO.getRecordAccesses(long,Date,Date,boolean)", "SurveyDAO.getSurveyData(long)", "PatientDAO.searchForPatientsWithName(String,String)", "OfficeVisitDAO.addDiagnosisToOfficeVisit(double,long)", "ReferralDAO.editReferral(ReferralBean)", "HospitalsDAO.removeHospitalAssignment(long,String)", "CPTCodesDAO.addCPTCode(ProcedureBean)", "OfficeVisitDAO.add(OfficeVisitBean)", "AuthDAO.setSecurityQuestionAnswer(String,String,long)", "OfficeVisitDAO.getOfficeVisit(long)", "FakeEmailDAO.getEmailWithBody(String)", "LabProcedureDAO.getAllLabProceduresForDocOV(long)", "LOINCDAO.getAllLOINC()", "OfficeVisitDAO.editPrescription(PrescriptionBean)", "AuthDAO.getUserRole(long)", "PersonnelDAO.getUAPsForHCP(long)", "DrugInteractionDAO.reportInteraction(String,String,String)", "RemoteMonitoringDAO.removePatientFromList(long,long)", "AdverseEventDAO.addReport(AdverseEventBean,long)", "LabProcedureDAO.getAllLabProceduresDate(long)", "ICDCodesDAO.getAllICDCodes()", "RemoteMonitoringDAO.getNumberOfDailyEntries(long)", "OfficeVisitDAO.getOfficeVisitsFromHospital(String)", "ReportRequestDAO.addReportRequest(long,long,Date)", "SurveyDAO.isSurveyCompleted(long)", "AdverseEventDAO.removeReport(int)", "AdverseEventDAO.getNameForCode(String)", "OfficeVisitDAO.getProcedures(long)", "OfficeVisitDAO.addLabProcedureToOfficeVisit(String,long,long)", "PersonnelDAO.getAllPersonnel()", "AuthDAO.getResetPasswordFailures(String)", "OfficeVisitDAO.getOfficeVisitsWithNoSurvey(long)", "HealthRecordsDAO.add(HealthRecord)", "ICDCodesDAO.addICDCode(DiagnosisBean)", "AccessDAO.setSessionTimeoutMins(int)", "MessageDAO.getMessagesFrom(long)", "AuthDAO.getSecurityAnswer(long)", "NDCodesDAO.getNDCode(String)", "CPTCodesDAO.getCPTCode(String)", "MessageDAO.getMessagesFromTimeAscending(long)", "PersonnelDAO.checkPersonnelExists(long)", "LabProcedureDAO.getLabProceduresForPatientForNextMonth(long)", "PersonnelDAO.getPrescribingDoctor(PrescriptionBean)", "RemoteMonitoringDAO.getPatientsData(long)", "ICDCodesDAO.getICDCode(String)", "LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "DrugInteractionDAO.getInteractions(String)", "AuthDAO.resetPassword(long,String)", "AuthDAO.recordResetPasswordFailure(String)", "AdverseEventDAO.getUnremovedAdverseEventsByCode(String)", "ICDCodesDAO.updateCode(DiagnosisBean)", "AllergyDAO.addAllergy(long,String)", "CPTCodesDAO.getAllCPTCodes()", "OfficeVisitDAO.checkOfficeVisitExists(long,long)", "RemoteMonitoringDAO.getPatientDataByDate(long,Date,Date)", "PatientDAO.addEmptyPatient()", "LOINCDAO.addLOINC(LOINCbean)", "AdverseEventDAO.getHCPMID(int)", "MessageDAO.addMessage(MessageBean)", "LabProcedureDAO.getAllLabProceduresForDocOV(long,long)", "PatientDAO.getDeclaredHCPs(long)", "ReportRequestDAO.getAllReportRequestsForPatient(long)", "ApptDAO.getAllAppts()", "SurveyDAO.addCompletedSurvey(SurveyBean,Date)", "HospitalsDAO.addHospital(HospitalBean)", "TransactionDAO.addAndSortRoles(List,long,boolean)", "AdverseEventDAO.getReportsFor(long)", "AuthDAO.checkUserExists(long)", "PersonnelDAO.editPersonnel(PersonnelBean)", "PatientDAO.represents(long,long)", "RiskDAO.hadPriorDiagnoses(long,double,double)", "OfficeVisitDAO.removePrescription(long)", "ReferralDAO.getReferralsSentFrom(long)", "PatientDAO.getRepresenting(long)", "HospitalsDAO.assignHospital(long,String)", "ReportRequestDAO.getAllReportRequestsForRequester(long)", "VisitRemindersDAO.getDiagnosedVisitNeeders(long)", "PersonnelDAO.getPersonnel(long)", "OfficeVisitDAO.getPrescriptionReports(List,long)", "LabProcedureDAO.getLabProcedure(long)", "FakeEmailDAO.getAllEmails()", "LOINCDAO.getProcedures(String)", "ApptTypeDAO.getApptTypes()", "RemoteMonitoringDAO.addPatientToList(long,long)", "PatientDAO.getImmunizationProcedures(long)", "AuthDAO.resetLoginFailuresToZero(String)", "OfficeVisitDAO.getAllOfficeVisitsForLHCP(long)", "MessageDAO.getMessagesFromNameDescending(long)", "NDCodesDAO.getAllNDCodes()", "ApptDAO.scheduleAppt(ApptBean)", "ReferralDAO.getReferralsSentTo(long)", "OfficeVisitDAO.removeLabProcedureFromOfficeVisit(long)", "PatientDAO.getRenewalNeedsPatients(long)", "LabProcedureDAO.getAllLabProcedures()", "LabProcedureDAO.getAllLabProceduresLOINC(long)", "LabProcedureDAO.getLabProceduresForLHCPForNextMonth(long)", "AuthDAO.getLoginFailures(String)", "LOINCDAO.update(LOINCbean)", "OfficeVisitDAO.getDiagnoses(long)", "AccessDAO.getSessionTimeoutMins()", "PatientDAO.undeclareHCP(long,long)", "HospitalsDAO.getAllHospitals()", "VisitRemindersDAO.getFluShotDelinquents(long)", "PatientDAO.getDiagnoses(long)", "MessageDAO.updateRead(MessageBean)", "HospitalsDAO.removeAllHospitalAssignmentsFrom(long)", "ReportRequestDAO.getReportRequest(long)", "PatientDAO.checkPatientExists(long)", "MessageDAO.getMessagesFor(long)", "MessageDAO.getMessagesNameDescending(long)", "RemoteMonitoringDAO.storePatientData(long,int,int,int,String,long)", "FakeEmailDAO.sendEmailRecord(Email)", "OfficeVisitDAO.removeDiagnosisFromOfficeVisit(long)", "RemoteMonitoringDAO.storePatientData(long,int,int,String,long)", "PatientDAO.addRepresentative(long,long)", "PatientDAO.getRepresented(long)", "ApptTypeDAO.editApptType(ApptTypeBean)"], "class_name": "DBUtil", "method_name": "closeConnection", "params": ["Connection", "PreparedStatement"]}, "OfficeVisitBean.getNotes()": {"calls": [], "called_by": ["OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)"], "class_name": "OfficeVisitBean", "method_name": "getNotes", "params": []}, "OfficeVisitBean.getHospitalID()": {"calls": [], "called_by": ["OfficeVisitDAO.setValues(PreparedStatement,OfficeVisitBean)"], "class_name": "OfficeVisitBean", "method_name": "getHospitalID", "params": []}, "OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)": {"calls": ["OfficeVisitBean.setProcedures(List)", "OfficeVisitBean.setPatientID(long)", "OfficeVisitBean.setNotes(String)", "OfficeVisitBean.setHcpID(long)", "OfficeVisitBean.setHospitalID(String)", "OfficeVisitBean.setVisitDateStr(String)", "OfficeVisitDAO.getProcedures(long)", "OfficeVisitDAO.getPrescriptions(long)", "OfficeVisitBean.setDiagnoses(List)", "OfficeVisitBean.setPrescriptions(List)", "OfficeVisitDAO.getDiagnoses(long)"], "called_by": ["OfficeVisitDAO.getOfficeVisit(long)", "OfficeVisitDAO.getAllOfficeVisitsForDiagnosis(String)"], "class_name": "OfficeVisitDAO", "method_name": "loadFullOfficeVist", "params": ["ResultSet", "long"]}, "OfficeVisitDAO.getDiagnoses(long)": {"calls": ["DiagnosisBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "class_name": "OfficeVisitDAO", "method_name": "getDiagnoses", "params": ["long"]}, "OfficeVisitBean.setDiagnoses(List)": {"calls": [], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "class_name": "OfficeVisitBean", "method_name": "setDiagnoses", "params": ["List"]}, "OfficeVisitBean.setPrescriptions(List)": {"calls": [], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "class_name": "OfficeVisitBean", "method_name": "setPrescriptions", "params": ["List"]}, "OfficeVisitDAO.getProcedures(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBeanLoader.loadList(ResultSet)"], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "class_name": "OfficeVisitDAO", "method_name": "getProcedures", "params": ["long"]}, "OfficeVisitBean.setProcedures(List)": {"calls": [], "called_by": ["OfficeVisitDAO.loadFullOfficeVist(ResultSet,long)"], "class_name": "OfficeVisitBean", "method_name": "setProcedures", "params": ["List"]}, "PrescriptionBean.getId()": {"calls": [], "called_by": ["OfficeVisitDAO.editPrescription(PrescriptionBean)"], "class_name": "PrescriptionBean", "method_name": "getId", "params": []}, "OfficeVisitDAO.getOfficeVisitsWithNoSurvey(long)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "OfficeVisitLoader.loadList(ResultSet)"], "called_by": [], "class_name": "OfficeVisitDAO", "method_name": "getOfficeVisitsWithNoSurvey", "params": ["long"]}, "OfficeVisitDAO.buildPreps(int)": {"calls": [], "called_by": ["OfficeVisitDAO.getPrescriptionReports(List,long)"], "class_name": "OfficeVisitDAO", "method_name": "buildPreps", "params": ["int"]}, "OfficeVisitDAO.prepareOVIDs(PreparedStatement,List)": {"calls": [], "called_by": ["OfficeVisitDAO.getPrescriptionReports(List,long)"], "class_name": "OfficeVisitDAO", "method_name": "prepareOVIDs", "params": ["PreparedStatement", "List"]}, "OfficeVisitDAO.getOfficeVisitsFromHospital(String)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "OfficeVisitLoader.loadList(ResultSet)"], "called_by": [], "class_name": "OfficeVisitDAO", "method_name": "getOfficeVisitsFromHospital", "params": ["String"]}, "HospitalsDAO.getHospital(String)": {"calls": ["HospitalBeanLoader.loadSingle(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "HospitalsDAO", "method_name": "getHospital", "params": ["String"]}, "MessageBean.getMessageId()": {"calls": [], "called_by": ["MessageDAO.updateRead(MessageBean)"], "class_name": "MessageBean", "method_name": "getMessageId", "params": []}, "AdverseEventDAO.getReportsFor(long)": {"calls": ["DAOFactory.getConnection()", "AdverseEventBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "AdverseEventDAO", "method_name": "getReportsFor", "params": ["long"]}, "TransactionDAO.getAllTransactions()": {"calls": ["TransactionBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "TransactionDAO", "method_name": "getAllTransactions", "params": []}, "TransactionType.getCode()": {"calls": [], "called_by": ["TransactionDAO.logTransaction(TransactionType,long,long,String)", "TransactionDAO.getTransactionsFor(String,String,Date,Date,TransactionType)"], "class_name": "TransactionType", "method_name": "getCode", "params": []}, "TransactionDAO.addAndSortRoles(List,long,boolean)": {"calls": ["TransactionBean.getRole()", "TransactionBean.getLoggedInMID()", "TransactionBean.setRole(String)", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()"], "called_by": ["TransactionDAO.getAllRecordAccesses(long,boolean)", "TransactionDAO.getRecordAccesses(long,Date,Date,boolean)"], "class_name": "TransactionDAO", "method_name": "addAndSortRoles", "params": ["List", "long", "boolean"]}, "TransactionDAO.getTransactionsFor(String,String,Date,Date,TransactionType)": {"calls": ["DBUtil.closeConnection(Connection,PreparedStatement)", "TransactionBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "TransactionType.getCode()"], "called_by": [], "class_name": "TransactionDAO", "method_name": "getTransactionsFor", "params": ["String", "String", "Date", "Date", "TransactionType"]}, "TransactionDAO.getOperationalProfile()": {"calls": ["OperationalProfileLoader.loadSingle(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "TransactionDAO", "method_name": "getOperationalProfile", "params": []}, "TransactionBean.getLoggedInMID()": {"calls": [], "called_by": ["TransactionDAO.addAndSortRoles(List,long,boolean)"], "class_name": "TransactionBean", "method_name": "getLoggedInMID", "params": []}, "TransactionBean.setRole(String)": {"calls": [], "called_by": ["TransactionDAO.addAndSortRoles(List,long,boolean)"], "class_name": "TransactionBean", "method_name": "setRole", "params": ["String"]}, "TransactionBean.getRole()": {"calls": [], "called_by": ["TransactionDAO.addAndSortRoles(List,long,boolean)"], "class_name": "TransactionBean", "method_name": "getRole", "params": []}, "DateUtil.setSQLMonthRange(Date,int,int,Date,int,int)": {"calls": [], "called_by": ["VisitRemindersDAO.getFluShotDelinquents(long)"], "class_name": "DateUtil", "method_name": "setSQLMonthRange", "params": ["Date", "int", "int", "Date", "int", "int"]}, "FakeEmailDAO.getAllEmails()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "EmailBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "FakeEmailDAO", "method_name": "getAllEmails", "params": []}, "FakeEmailDAO.getEmailWithBody(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "EmailBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "FakeEmailDAO", "method_name": "getEmailWithBody", "params": ["String"]}, "FamilyDAO.getFamilyMembers(long,String,String,boolean)": {"calls": ["FamilyBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["FamilyDAO.getSiblings(long)", "FamilyDAO.getParents(long)", "FamilyDAO.getChildren(long)"], "class_name": "FamilyDAO", "method_name": "getFamilyMembers", "params": ["long", "String", "String", "boolean"]}, "LabProcedureDAO.getLabProceduresForPatientForNextMonth(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "LabProcedureDAO", "method_name": "getLabProceduresForPatientForNextMonth", "params": ["long"]}, "LabProcedureDAO.getAllLabProcedures()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LabProcedureBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "LabProcedureDAO", "method_name": "getAllLabProcedures", "params": []}, "LabProcedureDAO.addLabProcedure(LabProcedureBean)": {"calls": ["LabProcedureBean.getRights()", "LabProcedureBean.getPid()", "LabProcedureBean.getCommentary()", "DBUtil.closeConnection(Connection,PreparedStatement)", "DBUtil.getLastInsert(Connection)", "LabProcedureBean.getLoinc()", "LabProcedureBean.getOvID()", "LabProcedureBean.getStatus()", "DAOFactory.getConnection()", "LabProcedureBean.getResults()"], "called_by": [], "class_name": "LabProcedureDAO", "method_name": "addLabProcedure", "params": ["LabProcedureBean"]}, "LabProcedureBean.getCommentary()": {"calls": [], "called_by": ["LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "LabProcedureValidator.validate(LabProcedureBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getCommentary", "params": []}, "LabProcedureBean.getResults()": {"calls": [], "called_by": ["LabProcedureDAO.updateLabProcedure(LabProcedureBean)", "LabProcedureDAO.addLabProcedure(LabProcedureBean)"], "class_name": "LabProcedureBean", "method_name": "getResults", "params": []}, "LOINCbean.getComponent()": {"calls": [], "called_by": ["LOINCDAO.update(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getComponent", "params": []}, "LOINCbean.getKindOfProperty()": {"calls": [], "called_by": ["LOINCDAO.update(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getKindOfProperty", "params": []}, "LOINCbean.getTimeAspect()": {"calls": [], "called_by": ["LOINCDAO.update(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getTimeAspect", "params": []}, "LOINCbean.getSystem()": {"calls": [], "called_by": ["LOINCDAO.update(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getSystem", "params": []}, "LOINCbean.getScaleType()": {"calls": [], "called_by": ["LOINCDAO.update(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getScaleType", "params": []}, "LOINCbean.getMethodType()": {"calls": [], "called_by": ["LOINCDAO.update(LOINCbean)", "LOINCBeanValidator.validate(LOINCbean)", "LOINCDAO.addLOINC(LOINCbean)"], "class_name": "LOINCbean", "method_name": "getMethodType", "params": []}, "LOINCDAO.getProcedures(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "LOINCBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "LOINCDAO", "method_name": "getProcedures", "params": ["String"]}, "Role.toString()": {"calls": [], "called_by": ["AuthDAO.addUser(Long,Role,String)"], "class_name": "Role", "method_name": "toString", "params": []}, "Role.ordinal()": {"calls": [], "called_by": ["AuthDAO.getUserName(long)"], "class_name": "Role", "method_name": "ordinal", "params": []}, "AuthDAO.insertLoginFailureRow(String,int,Connection)": {"calls": [], "called_by": ["AuthDAO.recordLoginFailure(String)", "AuthDAO.getLoginFailures(String)"], "class_name": "AuthDAO", "method_name": "insertLoginFailureRow", "params": ["String", "int", "Connection"]}, "AuthDAO.insertResetPasswordRow(String,int,Connection)": {"calls": [], "called_by": ["AuthDAO.getResetPasswordFailures(String)", "AuthDAO.recordResetPasswordFailure(String)"], "class_name": "AuthDAO", "method_name": "insertResetPasswordRow", "params": ["String", "int", "Connection"]}, "AuthDAO.updateResetFailuresToZero(String,Connection)": {"calls": [], "called_by": ["AuthDAO.getResetPasswordFailures(String)"], "class_name": "AuthDAO", "method_name": "updateResetFailuresToZero", "params": ["String", "Connection"]}, "AuthDAO.updateFailuresToZero(String,Connection)": {"calls": [], "called_by": ["AuthDAO.getLoginFailures(String)"], "class_name": "AuthDAO", "method_name": "updateFailuresToZero", "params": ["String", "Connection"]}, "AuthDAO.resetLoginFailuresToZero(String)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "AuthDAO", "method_name": "resetLoginFailuresToZero", "params": ["String"]}, "NDCodesDAO.getAllNDCodes()": {"calls": ["DAOFactory.getConnection()", "MedicationBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "NDCodesDAO", "method_name": "getAllNDCodes", "params": []}, "ReferralBean.getId()": {"calls": [], "called_by": ["ReferralDAO.editReferral(ReferralBean)"], "class_name": "ReferralBean", "method_name": "getId", "params": []}, "SurveyBean.getVisitID()": {"calls": [], "called_by": ["SurveyDAO.addCompletedSurvey(SurveyBean,Date)"], "class_name": "SurveyBean", "method_name": "getVisitID", "params": []}, "SurveyBean.getWaitingRoomMinutes()": {"calls": [], "called_by": ["SurveyDAO.addCompletedSurvey(SurveyBean,Date)"], "class_name": "SurveyBean", "method_name": "getWaitingRoomMinutes", "params": []}, "SurveyBean.getExamRoomMinutes()": {"calls": [], "called_by": ["SurveyDAO.addCompletedSurvey(SurveyBean,Date)"], "class_name": "SurveyBean", "method_name": "getExamRoomMinutes", "params": []}, "CPTCodesDAO.getAllCPTCodes()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "CPTCodesDAO", "method_name": "getAllCPTCodes", "params": []}, "CPTCodesDAO.getImmunizationCPTCodes()": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)", "ProcedureBeanLoader.loadList(ResultSet)"], "called_by": [], "class_name": "CPTCodesDAO", "method_name": "getImmunizationCPTCodes", "params": []}, "CPTCodesDAO.getCPTCode(String)": {"calls": ["ProcedureBeanLoader.loadSingle(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "CPTCodesDAO", "method_name": "getCPTCode", "params": ["String"]}, "ProcedureBean.getAttribute()": {"calls": [], "called_by": ["CPTCodesDAO.addCPTCode(ProcedureBean)", "CPTCodesDAO.updateCode(ProcedureBean)"], "class_name": "ProcedureBean", "method_name": "getAttribute", "params": []}, "ICDCodesDAO.getAllICDCodes()": {"calls": ["DiagnosisBeanLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "ICDCodesDAO", "method_name": "getAllICDCodes", "params": []}, "RemoteMonitoringDAO.getNumberOfDailyEntries(long)": {"calls": ["DAOFactory.getConnection()", "RemoteMonitoringDataBeanLoader.loadList(ResultSet)", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["RemoteMonitoringDAO.storePatientData(long,int,int,String,long)", "RemoteMonitoringDAO.storePatientData(long,int,int,int,String,long)", "RemoteMonitoringDAO.storePatientData(long,int,String,long)"], "class_name": "RemoteMonitoringDAO", "method_name": "getNumberOfDailyEntries", "params": ["long"]}, "RemoteMonitoringDAO.validatePR(long,long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["RemoteMonitoringDAO.storePatientData(long,int,int,String,long)", "RemoteMonitoringDAO.storePatientData(long,int,int,int,String,long)", "RemoteMonitoringDAO.storePatientData(long,int,String,long)"], "class_name": "RemoteMonitoringDAO", "method_name": "validatePR", "params": ["long", "long"]}, "AccessDAO.insertDefaultTimeout(Connection,int)": {"calls": [], "called_by": ["AccessDAO.setSessionTimeoutMins(int)", "AccessDAO.getSessionTimeoutMins()"], "class_name": "AccessDAO", "method_name": "insertDefaultTimeout", "params": ["Connection", "int"]}, "PatientDAO.getAllPatients()": {"calls": ["PatientLoader.loadList(ResultSet)", "DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": [], "class_name": "PatientDAO", "method_name": "getAllPatients", "params": []}, "RiskDAO.hasFamilyHistory(long,double,double)": {"calls": ["RiskDAO.hadPriorDiagnoses(long,double,double)", "RiskDAO.getFamilyMembers(long)", "FamilyMemberBean.getMid()"], "called_by": ["FamilyHistoryFactor.hasFactor()"], "class_name": "RiskDAO", "method_name": "hasFamilyHistory", "params": ["long", "double", "double"]}, "RiskDAO.getFamilyMembers(long)": {"calls": ["FamilyDAO.getSiblings(long)", "DAOFactory.getFamilyDAO()", "FamilyDAO.getParents(long)"], "called_by": ["RiskDAO.hasFamilyHistory(long,double,double)"], "class_name": "RiskDAO", "method_name": "getFamilyMembers", "params": ["long"]}, "RiskDAO.hadPriorDiagnoses(long,double,double)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["RiskDAO.hasFamilyHistory(long,double,double)", "PriorDiagnosisFactor.hasFactor()"], "class_name": "RiskDAO", "method_name": "hadPriorDiagnoses", "params": ["long", "double", "double"]}, "DAOFactory.getFamilyDAO()": {"calls": [], "called_by": ["RiskDAO.getFamilyMembers(long)"], "class_name": "DAOFactory", "method_name": "getFamilyDAO", "params": []}, "RiskDAO.hadChildhoodInfection(long,double[])": {"calls": ["RiskDAO.setICDs(int,PreparedStatement,double[])", "DBUtil.closeConnection(Connection,PreparedStatement)", "DAOFactory.getConnection()", "RiskDAO.createPrepared(int)"], "called_by": ["ChildhoodInfectionFactor.hasFactor()"], "class_name": "RiskDAO", "method_name": "hadChildhoodInfection", "params": ["long", "double[]"]}, "RiskDAO.createPrepared(int)": {"calls": [], "called_by": ["RiskDAO.hadChildhoodInfection(long,double[])"], "class_name": "RiskDAO", "method_name": "createPrepared", "params": ["int"]}, "RiskDAO.setICDs(int,PreparedStatement,double[])": {"calls": [], "called_by": ["RiskDAO.hadChildhoodInfection(long,double[])"], "class_name": "RiskDAO", "method_name": "setICDs", "params": ["int", "PreparedStatement", "double[]"]}, "RiskDAO.hasSmoked(long)": {"calls": ["DAOFactory.getConnection()", "DBUtil.closeConnection(Connection,PreparedStatement)"], "called_by": ["SmokingFactor.hasFactor()"], "class_name": "RiskDAO", "method_name": "hasSmoked", "params": ["long"]}, "PrescriptionAlerts.values()": {"calls": [], "called_by": ["PrescriptionAlerts.isAlert(String)"], "class_name": "PrescriptionAlerts", "method_name": "values", "params": []}, "PrescriptionAlerts.getNDCode()": {"calls": [], "called_by": ["PrescriptionAlerts.isAlert(String)"], "class_name": "PrescriptionAlerts", "method_name": "getNDCode", "params": []}, "Role.values()": {"calls": [], "called_by": ["Role.parse(String)"], "class_name": "Role", "method_name": "values", "params": []}, "State.getAbbrev()": {"calls": ["State.toString()"], "called_by": ["State.parse(String)"], "class_name": "State", "method_name": "getAbbrev", "params": []}, "State.toString()": {"calls": [], "called_by": ["State.getAbbrev()", "StateSelect.doStartTag()"], "class_name": "State", "method_name": "toString", "params": []}, "State.parse(String)": {"calls": ["State.getAbbrev()", "State.values()", "State.getName()"], "called_by": [], "class_name": "State", "method_name": "parse", "params": ["String"]}, "State.values()": {"calls": [], "called_by": ["State.parse(String)", "StateSelect.doStartTag()"], "class_name": "State", "method_name": "values", "params": []}, "State.getName()": {"calls": [], "called_by": ["State.parse(String)", "StateSelect.doStartTag()"], "class_name": "State", "method_name": "getName", "params": []}, "Ethnicity.toString()": {"calls": ["Ethnicity.getName()"], "called_by": [], "class_name": "Ethnicity", "method_name": "toString", "params": []}, "Ethnicity.values()": {"calls": [], "called_by": ["Ethnicity.parse(String)"], "class_name": "Ethnicity", "method_name": "values", "params": []}, "Gender.values()": {"calls": [], "called_by": ["Gender.parse(String)"], "class_name": "Gender", "method_name": "values", "params": []}, "BloodType.toString()": {"calls": ["BloodType.getName()"], "called_by": [], "class_name": "BloodType", "method_name": "toString", "params": []}, "BloodType.values()": {"calls": [], "called_by": ["BloodType.parse(String)"], "class_name": "BloodType", "method_name": "values", "params": []}, "ErrorList.getMessageList()": {"calls": [], "called_by": ["FormValidationException.getErrorList()"], "class_name": "ErrorList", "method_name": "getMessageList", "params": []}, "ErrorList.toString()": {"calls": [], "called_by": ["FormValidationException.getMessage()"], "class_name": "ErrorList", "method_name": "toString", "params": []}, "FormValidationException.printHTML(JspWriter)": {"calls": ["ErrorList.iterator()"], "called_by": [], "class_name": "FormValidationException", "method_name": "printHTML", "params": ["JspWriter"]}, "ErrorList.iterator()": {"calls": [], "called_by": ["FormValidationException.printHTML(JspWriter)"], "class_name": "ErrorList", "method_name": "iterator", "params": []}, "DBException.getExtendedMessage()": {"calls": ["iTrustException.getExtendedMessage()"], "called_by": [], "class_name": "DBException", "method_name": "getExtendedMessage", "params": []}, "iTrustException.getExtendedMessage()": {"calls": [], "called_by": ["DBException.getExtendedMessage()"], "class_name": "iTrustException", "method_name": "getExtendedMessage", "params": []}, "RiskChecker.isAtRisk()": {"calls": ["RiskChecker.getDiseaseRiskFactors()", "PatientRiskFactor.hasRiskFactor()", "RiskChecker.qualifiesForDisease()"], "called_by": ["ChronicDiseaseMediator.getDiseaseAtRisk()"], "class_name": "RiskChecker", "method_name": "isAtRisk", "params": []}, "HeartDiseaseRisks.getDiseaseRiskFactors()": {"calls": ["PatientBean.getMID()"], "called_by": [], "class_name": "HeartDiseaseRisks", "method_name": "getDiseaseRiskFactors", "params": []}, "Type2DiabetesRisks.qualifiesForDisease()": {"calls": ["PatientBean.getAge()"], "called_by": [], "class_name": "Type2DiabetesRisks", "method_name": "qualifiesForDisease", "params": []}, "Type2DiabetesRisks.getDiseaseRiskFactors()": {"calls": ["PatientBean.getMID()"], "called_by": [], "class_name": "Type2DiabetesRisks", "method_name": "getDiseaseRiskFactors", "params": []}, "Type1DiabetesRisks.qualifiesForDisease()": {"calls": ["PatientBean.getAge()"], "called_by": [], "class_name": "Type1DiabetesRisks", "method_name": "qualifiesForDisease", "params": []}, "Type1DiabetesRisks.getDiseaseRiskFactors()": {"calls": ["PatientBean.getMID()"], "called_by": [], "class_name": "Type1DiabetesRisks", "method_name": "getDiseaseRiskFactors", "params": []}, "RiskChecker.qualifiesForDisease()": {"calls": [], "called_by": ["RiskChecker.isAtRisk()"], "class_name": "RiskChecker", "method_name": "qualifiesForDisease", "params": []}, "RiskChecker.getDiseaseRiskFactors()": {"calls": [], "called_by": ["RiskChecker.getPatientRiskFactors()", "RiskChecker.isAtRisk()"], "class_name": "RiskChecker", "method_name": "getDiseaseRiskFactors", "params": []}, "PatientRiskFactor.hasRiskFactor()": {"calls": ["PatientRiskFactor.hasFactor()"], "called_by": ["RiskChecker.getPatientRiskFactors()", "RiskChecker.isAtRisk()"], "class_name": "PatientRiskFactor", "method_name": "hasRiskFactor", "params": []}, "RiskChecker.getPatientRiskFactors()": {"calls": ["RiskChecker.getDiseaseRiskFactors()", "PatientRiskFactor.hasRiskFactor()"], "called_by": [], "class_name": "RiskChecker", "method_name": "getPatientRiskFactors", "params": []}, "ChildhoodInfectionFactor.hasFactor()": {"calls": ["DAOFactory.getRiskDAO()", "RiskDAO.hadChildhoodInfection(long,double[])"], "called_by": [], "class_name": "ChildhoodInfectionFactor", "method_name": "hasFactor", "params": []}, "DAOFactory.getRiskDAO()": {"calls": [], "called_by": ["SmokingFactor.hasFactor()", "FamilyHistoryFactor.hasFactor()", "PriorDiagnosisFactor.hasFactor()", "ChildhoodInfectionFactor.hasFactor()"], "class_name": "DAOFactory", "method_name": "getRiskDAO", "params": []}, "HypertensionFactor.hasFactor()": {"calls": ["HealthRecord.getBloodPressureSystolic()", "HealthRecord.getBloodPressureDiastolic()"], "called_by": [], "class_name": "HypertensionFactor", "method_name": "hasFactor", "params": []}, "SmokingFactor.hasFactor()": {"calls": ["DBException.printStackTrace()", "DAOFactory.getRiskDAO()", "RiskDAO.hasSmoked(long)"], "called_by": [], "class_name": "SmokingFactor", "method_name": "hasFactor", "params": []}, "CholesterolFactor.hasFactor()": {"calls": ["HealthRecord.getCholesterolHDL()", "HealthRecord.getCholesterolLDL()", "HealthRecord.getCholesterolTri()"], "called_by": [], "class_name": "CholesterolFactor", "method_name": "hasFactor", "params": []}, "WeightFactor.hasFactor()": {"calls": ["HealthRecord.getBodyMassIndex()"], "called_by": [], "class_name": "WeightFactor", "method_name": "hasFactor", "params": []}, "HealthRecord.getBodyMassIndex()": {"calls": [], "called_by": ["WeightFactor.hasFactor()"], "class_name": "HealthRecord", "method_name": "getBodyMassIndex", "params": []}, "EthnicityFactor.getDescription()": {"calls": ["PatientBean.getEthnicity()"], "called_by": [], "class_name": "EthnicityFactor", "method_name": "getDescription", "params": []}, "EthnicityFactor.hasFactor()": {"calls": ["PatientBean.getEthnicity()", "Ethnicity.equals(Object)"], "called_by": [], "class_name": "EthnicityFactor", "method_name": "hasFactor", "params": []}, "Ethnicity.equals(Object)": {"calls": [], "called_by": ["EthnicityFactor.hasFactor()"], "class_name": "Ethnicity", "method_name": "equals", "params": ["Object"]}, "FamilyHistoryFactor.hasFactor()": {"calls": ["RiskDAO.hasFamilyHistory(long,double,double)", "DAOFactory.getRiskDAO()", "DBException.printStackTrace()"], "called_by": [], "class_name": "FamilyHistoryFactor", "method_name": "hasFactor", "params": []}, "AgeFactor.hasFactor()": {"calls": ["PatientBean.getAge()"], "called_by": [], "class_name": "AgeFactor", "method_name": "hasFactor", "params": []}, "PriorDiagnosisFactor.hasFactor()": {"calls": ["DAOFactory.getRiskDAO()", "RiskDAO.hadPriorDiagnoses(long,double,double)", "DBException.printStackTrace()"], "called_by": [], "class_name": "PriorDiagnosisFactor", "method_name": "hasFactor", "params": []}, "PatientRiskFactor.hasFactor()": {"calls": [], "called_by": ["PatientRiskFactor.hasRiskFactor()"], "class_name": "PatientRiskFactor", "method_name": "hasFactor", "params": []}, "GenderFactor.getDescription()": {"calls": ["Gender.toString()", "PatientBean.getGender()"], "called_by": [], "class_name": "GenderFactor", "method_name": "getDescription", "params": []}, "GenderFactor.hasFactor()": {"calls": ["Gender.equals(Object)", "PatientBean.getGender()"], "called_by": [], "class_name": "GenderFactor", "method_name": "hasFactor", "params": []}, "Gender.equals(Object)": {"calls": [], "called_by": ["GenderFactor.hasFactor()"], "class_name": "Gender", "method_name": "equals", "params": ["Object"]}, "SessionTimeoutListener.sessionCreated(HttpSessionEvent)": {"calls": ["DAOFactory.getAccessDAO()", "AccessDAO.getSessionTimeoutMins()", "DBException.printStackTrace()"], "called_by": [], "class_name": "SessionTimeoutListener", "method_name": "sessionCreated", "params": ["HttpSessionEvent"]}, "DAOFactory.getAccessDAO()": {"calls": [], "called_by": ["SessionTimeoutListener.sessionCreated(HttpSessionEvent)"], "class_name": "DAOFactory", "method_name": "getAccessDAO", "params": []}, "StateSelect.doStartTag()": {"calls": ["StateSelect.getValue()", "State.values()", "State.toString()", "State.getName()", "StateSelect.getName()"], "called_by": [], "class_name": "StateSelect", "method_name": "doStartTag", "params": []}, "StateSelect.getName()": {"calls": [], "called_by": ["StateSelect.doStartTag()"], "class_name": "StateSelect", "method_name": "getName", "params": []}, "StateSelect.getValue()": {"calls": [], "called_by": ["StateSelect.doStartTag()"], "class_name": "StateSelect", "method_name": "getValue", "params": []}, "ApptBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["ApptBeanValidator.validate(ApptBean)"], "class_name": "ApptBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "ApptBeanValidator.validate(Object)": {"calls": ["ApptBeanValidator.validate(ApptBean)"], "called_by": [], "class_name": "ApptBeanValidator", "method_name": "validate", "params": ["Object"]}, "BeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": ["ValidationFormat.getDescription()", "ValidationFormat.getRegex()"], "called_by": ["BeanValidator.checkFormat(String,Double,ValidationFormat,boolean)", "BeanValidator.checkFormat(String,Long,ValidationFormat,boolean)", "BeanValidator.checkGender(String,Gender,ValidationFormat,boolean)"], "class_name": "BeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "BeanValidator.checkFormat(String,Long,ValidationFormat,boolean)": {"calls": ["BeanValidator.checkFormat(String,String,ValidationFormat,boolean)"], "called_by": [], "class_name": "BeanValidator", "method_name": "checkFormat", "params": ["String", "Long", "ValidationFormat", "boolean"]}, "BeanValidator.checkFormat(String,Double,ValidationFormat,boolean)": {"calls": ["BeanValidator.checkFormat(String,String,ValidationFormat,boolean)"], "called_by": [], "class_name": "BeanValidator", "method_name": "checkFormat", "params": ["String", "Double", "ValidationFormat", "boolean"]}, "BeanValidator.checkGender(String,Gender,ValidationFormat,boolean)": {"calls": ["Gender.toString()", "BeanValidator.checkFormat(String,String,ValidationFormat,boolean)"], "called_by": [], "class_name": "BeanValidator", "method_name": "checkGender", "params": ["String", "Gender", "ValidationFormat", "boolean"]}, "MedicationBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["MedicationBeanValidator.validate(MedicationBean)"], "class_name": "MedicationBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "MedicationBeanValidator.validate(Object)": {"calls": ["MedicationBeanValidator.validate(MedicationBean)"], "called_by": [], "class_name": "MedicationBeanValidator", "method_name": "validate", "params": ["Object"]}, "MessageValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["MessageValidator.validate(MessageBean)"], "class_name": "MessageValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "MessageValidator.validate(Object)": {"calls": ["MessageValidator.validate(MessageBean)"], "called_by": [], "class_name": "MessageValidator", "method_name": "validate", "params": ["Object"]}, "DiagnosisBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["DiagnosisBeanValidator.validate(DiagnosisBean)"], "class_name": "DiagnosisBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "DiagnosisBeanValidator.validate(Object)": {"calls": ["DiagnosisBeanValidator.validate(DiagnosisBean)"], "called_by": [], "class_name": "DiagnosisBeanValidator", "method_name": "validate", "params": ["Object"]}, "ProcedureBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["ProcedureBeanValidator.validate(ProcedureBean)"], "class_name": "ProcedureBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "ProcedureBeanValidator.validate(Object)": {"calls": ["ProcedureBeanValidator.validate(ProcedureBean)"], "called_by": [], "class_name": "ProcedureBeanValidator", "method_name": "validate", "params": ["Object"]}, "EMailValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["EMailValidator.validate(MessageBean)"], "class_name": "EMailValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "EMailValidator.validate(Object)": {"calls": ["EMailValidator.validate(MessageBean)"], "called_by": [], "class_name": "EMailValidator", "method_name": "validate", "params": ["Object"]}, "PatientValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)"], "class_name": "PatientValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "PatientBean.getDateOfDeath()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getDateOfDeath", "params": []}, "PatientBean.getDateOfBirth()": {"calls": [], "called_by": ["PatientValidator.validate(PatientBean)"], "class_name": "PatientBean", "method_name": "getDateOfBirth", "params": []}, "PatientValidator.validate(Object)": {"calls": ["PatientValidator.validate(PatientBean)"], "called_by": [], "class_name": "PatientValidator", "method_name": "validate", "params": ["Object"]}, "AddPatientValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["AddPatientValidator.validate(PatientBean)"], "class_name": "AddPatientValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "AddPatientValidator.validate(Object)": {"calls": ["AddPatientValidator.validate(PatientBean)"], "called_by": [], "class_name": "AddPatientValidator", "method_name": "validate", "params": ["Object"]}, "SurveySearchValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["SurveySearchValidator.validate(SurveyResultBean)"], "class_name": "SurveySearchValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "SurveySearchValidator.validate(Object)": {"calls": ["SurveySearchValidator.validate(SurveyResultBean)"], "called_by": [], "class_name": "SurveySearchValidator", "method_name": "validate", "params": ["Object"]}, "AllergyBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["AllergyBeanValidator.validate(AllergyBean)"], "class_name": "AllergyBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "AllergyBeanValidator.validate(Object)": {"calls": ["AllergyBeanValidator.validate(AllergyBean)"], "called_by": [], "class_name": "AllergyBeanValidator", "method_name": "validate", "params": ["Object"]}, "ApptTypeBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["ApptTypeBeanValidator.validate(ApptTypeBean)"], "class_name": "ApptTypeBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "ApptTypeBeanValidator.validate(Object)": {"calls": ["ApptTypeBeanValidator.validate(ApptTypeBean)"], "called_by": [], "class_name": "ApptTypeBeanValidator", "method_name": "validate", "params": ["Object"]}, "PersonnelValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["PersonnelValidator.validate(PersonnelBean)"], "class_name": "PersonnelValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "PersonnelBean.getPhone()": {"calls": [], "called_by": ["PersonnelValidator.validate(PersonnelBean)"], "class_name": "PersonnelBean", "method_name": "getPhone", "params": []}, "PersonnelValidator.validate(Object)": {"calls": ["PersonnelValidator.validate(PersonnelBean)"], "called_by": [], "class_name": "PersonnelValidator", "method_name": "validate", "params": ["Object"]}, "RemoteMonitoringDataBean.getSystolicBloodPressure()": {"calls": [], "called_by": ["RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "class_name": "RemoteMonitoringDataBean", "method_name": "getSystolicBloodPressure", "params": []}, "RemoteMonitoringDataBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "class_name": "RemoteMonitoringDataBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "RemoteMonitoringDataBean.getDiastolicBloodPressure()": {"calls": [], "called_by": ["RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "class_name": "RemoteMonitoringDataBean", "method_name": "getDiastolicBloodPressure", "params": []}, "RemoteMonitoringDataBean.getGlucoseLevel()": {"calls": [], "called_by": ["RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "class_name": "RemoteMonitoringDataBean", "method_name": "getGlucoseLevel", "params": []}, "RemoteMonitoringDataBeanValidator.validate(Object)": {"calls": ["RemoteMonitoringDataBeanValidator.validate(RemoteMonitoringDataBean)"], "called_by": [], "class_name": "RemoteMonitoringDataBeanValidator", "method_name": "validate", "params": ["Object"]}, "MailValidator.validateEmail(String)": {"calls": ["MailValidator.isValid(String)"], "called_by": [], "class_name": "MailValidator", "method_name": "validateEmail", "params": ["String"]}, "MailValidator.isValid(String)": {"calls": [], "called_by": ["MailValidator.validateEmail(String)"], "class_name": "MailValidator", "method_name": "isValid", "params": ["String"]}, "DrugInteractionValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["DrugInteractionValidator.validate(DrugInteractionBean)"], "class_name": "DrugInteractionValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "DrugInteractionValidator.validate(Object)": {"calls": ["DrugInteractionValidator.validate(DrugInteractionBean)"], "called_by": [], "class_name": "DrugInteractionValidator", "method_name": "validate", "params": ["Object"]}, "HealthRecordFormValidator.checkInt(String,String,int,int,boolean)": {"calls": [], "called_by": ["HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordFormValidator", "method_name": "checkInt", "params": ["String", "String", "int", "int", "boolean"]}, "HealthRecordFormValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordFormValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "HealthRecordFormValidator.checkBoolean(String,String)": {"calls": [], "called_by": ["HealthRecordFormValidator.validate(HealthRecordForm)"], "class_name": "HealthRecordFormValidator", "method_name": "checkBoolean", "params": ["String", "String"]}, "HealthRecordFormValidator.validate(Object)": {"calls": ["HealthRecordFormValidator.validate(HealthRecordForm)"], "called_by": [], "class_name": "HealthRecordFormValidator", "method_name": "validate", "params": ["Object"]}, "LabProcedureValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": ["ValidationFormat.getDescription()", "ValidationFormat.getRegex()"], "called_by": ["LabProcedureValidator.validate(LabProcedureBean)"], "class_name": "LabProcedureValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "HospitalBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["HospitalBeanValidator.validate(HospitalBean)"], "class_name": "HospitalBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "HospitalBeanValidator.validate(Object)": {"calls": ["HospitalBeanValidator.validate(HospitalBean)"], "called_by": [], "class_name": "HospitalBeanValidator", "method_name": "validate", "params": ["Object"]}, "AdverseEventValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["AdverseEventValidator.validate(AdverseEventBean)"], "class_name": "AdverseEventValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "AdverseEventValidator.validate(Object)": {"calls": ["AdverseEventValidator.validate(AdverseEventBean)"], "called_by": [], "class_name": "AdverseEventValidator", "method_name": "validate", "params": ["Object"]}, "LOINCBeanValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["LOINCBeanValidator.validate(LOINCbean)"], "class_name": "LOINCBeanValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "LOINCBeanValidator.validate(Object)": {"calls": ["LOINCBeanValidator.validate(LOINCbean)"], "called_by": [], "class_name": "LOINCBeanValidator", "method_name": "validate", "params": ["Object"]}, "AddPersonnelValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["AddPersonnelValidator.validate(PersonnelBean)"], "class_name": "AddPersonnelValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "AddPersonnelValidator.validate(Object)": {"calls": ["AddPersonnelValidator.validate(PersonnelBean)"], "called_by": [], "class_name": "AddPersonnelValidator", "method_name": "validate", "params": ["Object"]}, "EditOfficeVisitValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "EditOfficeVisitValidator.checkInt(String,String,int,int,boolean)": {"calls": [], "called_by": ["EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "class_name": "EditOfficeVisitValidator", "method_name": "checkInt", "params": ["String", "String", "int", "int", "boolean"]}, "EditOfficeVisitValidator.validate(Object)": {"calls": ["EditOfficeVisitValidator.validate(EditOfficeVisitForm)"], "called_by": [], "class_name": "EditOfficeVisitValidator", "method_name": "validate", "params": ["Object"]}, "SecurityQA.getConfirmAnswer()": {"calls": [], "called_by": ["SecurityQAValidator.validate(SecurityQA)"], "class_name": "SecurityQA", "method_name": "getConfirmAnswer", "params": []}, "SecurityQAValidator.checkFormat(String,String,ValidationFormat,boolean)": {"calls": [], "called_by": ["SecurityQAValidator.validate(SecurityQA)"], "class_name": "SecurityQAValidator", "method_name": "checkFormat", "params": ["String", "String", "ValidationFormat", "boolean"]}, "SecurityQAValidator.validate(Object)": {"calls": ["SecurityQAValidator.validate(SecurityQA)"], "called_by": [], "class_name": "SecurityQAValidator", "method_name": "validate", "params": ["Object"]}}