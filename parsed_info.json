[
    {
        "class_name": "BeanBuilder",
        "methods": [
            {
                "method_name": "build",
                "parameters": [
                    "map",
                    "bean"
                ],
                "docstring": "The code here is not obvious, but this method should not need rewriting unless a bug is found \t   \t  @param map - \t             typically a request.getParameterMap; also can be a HashMap \t  @param bean - \t             an instantiated bean to be loaded. Loaded bean is returned. \t  @return a loaded \"bean\" \t  @throws Exception - \t              Several exceptions are thrown here, so promotion seemed fitting"
            },
            {
                "method_name": "checkOverloadedMethods",
                "parameters": [
                    "bean"
                ],
                "docstring": "Checks for overloaded methods \t   \t  @param bean item to check"
            }
        ],
        "attributes": [],
        "docstring": "Takes a parameter map and creates a bean from that map of the appropriate type.   @param <T> The type to be returned from the appropriate parameter map."
    },
    {
        "class_name": "DateUtil",
        "methods": [
            {
                "method_name": "yearsAgo",
                "parameters": [
                    "years"
                ],
                "docstring": "Returns a MM/dd/yyyy format of the date for the given years ago \t   \t  @param years \t  @return"
            },
            {
                "method_name": "isInMonthRange",
                "parameters": [
                    "date",
                    "firstMonth",
                    "secondMonth"
                ],
                "docstring": "Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of \t  the year. <br /> \t  <br /> \t   \t  The range \"wraps\" so that if the first month is after the second month, then the definition of \"is in \t  month range\" is:<br /> \t  the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth. \t   \t  Modular arithmetic is used to adjust month values into the valid range. \t   \t  @param date \t  @param firstMonth \t  @param secondMonth \t  @return"
            },
            {
                "method_name": "currentlyInMonthRange",
                "parameters": [
                    "firstMonth",
                    "secondMonth"
                ],
                "docstring": "Same as isInMonthRange but uses the current date as the date value. \t   \t  @see DateUtil#isInMonthRange(Date, int, int) \t  @param firstMonth \t  @param secondMonth \t  @return"
            },
            {
                "method_name": "getDateXyearsAgoFromNow",
                "parameters": [
                    "years"
                ],
                "docstring": "Returns the date a certain number of years ago \t  @param years how many years ago \t  @return the date it was however many years ago"
            },
            {
                "method_name": "getSQLdateXyearsAgoFromNow",
                "parameters": [
                    "years"
                ],
                "docstring": "Returns the date a certain number of years ago \t  @param years how many years ago \t  @return the date it was however many years ago"
            },
            {
                "method_name": "getDateXDaysAgoFromNow",
                "parameters": [
                    "days"
                ],
                "docstring": "Returns the date a certain number of days ago \t  @param days how many days ago \t  @return the date it was however many days ago"
            },
            {
                "method_name": "getSQLdateXDaysAgoFromNow",
                "parameters": [
                    "days"
                ],
                "docstring": "Returns the date a certain number of days ago \t  @param days how many days ago \t  @return the date it was however many days ago"
            },
            {
                "method_name": "setSQLMonthRange",
                "parameters": [
                    "month1",
                    "monthValue1",
                    "yearsAgo1",
                    "month2",
                    "monthValue2",
                    "yearsAgo2"
                ],
                "docstring": "<!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM \t  <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of \t  month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM \t  &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; - \t  yearsAgo2/monthValue2/&lt;last day of month2&gt; \t   \t  @param month1 \t             First sql.Date object to be set \t  @param monthValue1 \t  @param yearsAgo1 \t  @param month2 \t             Second sql.Date object to be set \t  @param monthValue2 \t  @param yearsAgo2"
            }
        ],
        "attributes": [
            "YEAR_IN_MS"
        ],
        "docstring": "Provides a few extra date utilities      @author Andy"
    },
    {
        "class_name": "DBUtil",
        "methods": [
            {
                "method_name": "canObtainProductionInstance",
                "parameters": [],
                "docstring": "Used to check if we can actually obtain a connection. \t   \t  @return"
            },
            {
                "method_name": "closeConnection",
                "parameters": [
                    "conn",
                    "ps"
                ],
                "docstring": "Close the prepared statement and the connection in a proper way \t   \t  @param conn \t  @param ps"
            },
            {
                "method_name": "getLastInsert",
                "parameters": [
                    "conn"
                ],
                "docstring": "Returns the last ID that was generated for an auto-increment column. Please note that this does NOT \t  cause transaction problems! last_insert_id() returns the last generated ID on a per-connection basis. \t  See the MySQL documentation at the following location to confirm this: \t  {@link http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html} \t   \t  Don't believe me? see {@link AutoIncrementTest} \t   \t  @param conn \t  @return last generated id \t  @throws SQLException"
            }
        ],
        "attributes": [],
        "docstring": "Provides a few database utilties      @author Andy"
    },
    {
        "class_name": "EmailUtil",
        "methods": [
            {
                "method_name": "sendEmail",
                "parameters": [
                    "email"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory"
        ],
        "docstring": "Sends email to users. Since we don't want to train spammers in 326, this just inserts into a database. If   we put this into an actual system, we would replace this class with stuff from javax.mail      @author Andy"
    },
    {
        "class_name": "HtmlEncoder",
        "methods": [
            {
                "method_name": "encode",
                "parameters": [
                    "input"
                ],
                "docstring": "Escapes a few key HTML characters \t  @param input String to check and escape \t  @return"
            },
            {
                "method_name": "URLOnSite",
                "parameters": [
                    "input"
                ],
                "docstring": "Checks URL \t   \t  @param input URL to check \t  @return false if the input contains http://, true otherwise"
            }
        ],
        "attributes": [],
        "docstring": "Escapes a few key HTML characters and does some other checking      @author Andy"
    },
    {
        "class_name": "Localization",
        "methods": [
            {
                "method_name": "getCurrentLocale",
                "parameters": [],
                "docstring": "Returns the current locale \t  @return the current locale"
            },
            {
                "method_name": "instance",
                "parameters": [],
                "docstring": "singleton method, may want to make this thread safe, as far as I know \t  iTrust doesn't do any multithreading though... \t  @return Localization instance"
            }
        ],
        "attributes": [
            "currentLocale",
            "currentInstance"
        ],
        "docstring": "Provides a singleton for accessing the current locale of iTrust    Could possibly load the country and language from a file."
    },
    {
        "class_name": "Messages",
        "methods": [
            {
                "method_name": "getString",
                "parameters": [
                    "key"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "BUNDLE_NAME",
            "RESOURCE_BUNDLE"
        ],
        "docstring": null
    },
    {
        "class_name": "ParameterUtil",
        "methods": [
            {
                "method_name": "convertMap",
                "parameters": [
                    "params"
                ],
                "docstring": "Provides a utility method that converts the \"Map\" from the JSP container to a type-checked hashmap \t  @param params Map to convert \t  @return converted Map"
            }
        ],
        "attributes": [],
        "docstring": "Provides a utility method that converts the \"Map\" from the JSP container to a type-checked hashmap      @author Andy"
    },
    {
        "class_name": "RandomPassword",
        "methods": [
            {
                "method_name": "getRandomPassword",
                "parameters": [],
                "docstring": "Returns a string of random characters \t   \t  @return a string of random characters"
            }
        ],
        "attributes": [
            "rand"
        ],
        "docstring": "Generates a random string of characters      @author Andy"
    },
    {
        "class_name": "AddApptAction",
        "methods": [
            {
                "method_name": "addAppt",
                "parameters": [
                    "appt"
                ],
                "docstring": null
            },
            {
                "method_name": "getName",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "loggedInMID",
            "apptDAO",
            "transDAO",
            "patientDAO",
            "personnelDAO",
            "validator"
        ],
        "docstring": "Gets a users's name from their MID \t   \t  @param mid the MID of the user \t  @return the user's name \t  @throws iTrustException"
    },
    {
        "class_name": "AddERespAction",
        "methods": [
            {
                "method_name": "add",
                "parameters": [
                    "p"
                ],
                "docstring": "Sets up the defaults for the class      @param factory factory for creating the defaults.   @param loggedInMID person currently logged in    @author Andy Meneely"
            }
        ],
        "attributes": [
            "personnelDAO",
            "authDAO",
            "transDAO",
            "loggedInMID"
        ],
        "docstring": "Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password   for them.      Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}      @author Andy Meneely      Copied from AddHCPAction"
    },
    {
        "class_name": "AddHCPAction",
        "methods": [
            {
                "method_name": "add",
                "parameters": [
                    "p"
                ],
                "docstring": "Sets up the defaults for the class \t   \t  @param factory factory for creating the defaults. \t  @param loggedInMID person currently logged in  \t  @author Andy Meneely"
            }
        ],
        "attributes": [
            "personnelDAO",
            "authDAO",
            "transDAO",
            "loggedInMID"
        ],
        "docstring": "Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password   for them.      Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}      @author Andy Meneely"
    },
    {
        "class_name": "AddOfficeVisitAction",
        "methods": [
            {
                "method_name": "addEmptyOfficeVisit",
                "parameters": [
                    "loggedInMID"
                ],
                "docstring": "Sets up the defaults for the class \t  @param factory \t  @param pidString \t             Patient ID to be validated by the superclass, {@link PatientBaseAction} \t  @throws iTrustException"
            },
            {
                "method_name": "getAllOfficeVisits",
                "parameters": [],
                "docstring": "Adds an empty office visit \t   \t  @param loggedInMID \t             For logging purposes \t  @return Office visit ID (primary key) of the new office visit \t  @throws DBException"
            },
            {
                "method_name": "getUserName",
                "parameters": [],
                "docstring": "Lists all office visits for a particular patient, regardless of who originally documented the office \t  visit. \t   \t  @return List of office visits, \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "factory",
            "ovDAO",
            "transDAO"
        ],
        "docstring": "Used for Document Office Visit page (documentOfficeVisit.jsp). This just adds an empty office visit, and   provides a list of office visits in case you want to edit an old office visit.      Very similar to {@link AddPatientAction}      @author Andy Meneely"
    },
    {
        "class_name": "AddPatientAction",
        "methods": [
            {
                "method_name": "addPatient",
                "parameters": [
                    "p"
                ],
                "docstring": "Just the factory and logged in MID \t   \t  @param factory \t  @param loggedInMID"
            }
        ],
        "attributes": [
            "transDAO",
            "patientDAO",
            "authDAO",
            "loggedInMID"
        ],
        "docstring": "Used for Add Patient page (addPatient.jsp). This just adds an empty patient, creates a random password for   that patient.      Very similar to {@link AddOfficeVisitAction}      @author Andy Meneely"
    },
    {
        "class_name": "AddPHAAction",
        "methods": [
            {
                "method_name": "add",
                "parameters": [
                    "p"
                ],
                "docstring": "Sets up the defaults for the class \t   \t  @param factory factory for creating the defaults. \t  @param loggedInMID person currently logged in  \t  @author Andy Meneely"
            }
        ],
        "attributes": [
            "personnelDAO",
            "authDAO",
            "transDAO",
            "loggedInMID"
        ],
        "docstring": "Used for Add Personnel page (addPersonnel.jsp). This just adds an empty PHA, creates a random password   for them.      Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}"
    },
    {
        "class_name": "AddRemoteMonitoringDataAction",
        "methods": [
            {
                "method_name": "addRemoteMonitoringData",
                "parameters": [
                    "glucoseLevel"
                ],
                "docstring": "Constructor \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the person recording the patient's data. \t  @param patientMID The MID of the patient"
            },
            {
                "method_name": "addRemoteMonitoringData",
                "parameters": [
                    "systolicBloodPressure",
                    "diastolicBloodPressure"
                ],
                "docstring": "Adds a patients remote monitoring data to the database. \t   \t  @param glucoseLevel \t  @throws DBException"
            },
            {
                "method_name": "addRemoteMonitoringData",
                "parameters": [
                    "systolicBloodPressure",
                    "diastolicBloodPressure",
                    "glucoseLevel"
                ],
                "docstring": "Adds a patients remote monitoring data to the database. \t   \t  @param systolicBloodPressure \t  @param diastolicBloodPressure \t  @throws DBException"
            },
            {
                "method_name": "getPatientName",
                "parameters": [
                    "pid"
                ],
                "docstring": "Adds a patients remote monitoring data to the database. \t   \t  @param systolicBloodPressure \t  @param diastolicBloodPressure \t  @param glucoseLevel \t  @throws DBException"
            }
        ],
        "attributes": [
            "validator",
            "rmDAO",
            "transDAO",
            "authDAO",
            "loggedInMID",
            "patientMID"
        ],
        "docstring": "Handles adding remote monitoring patient data to the database"
    },
    {
        "class_name": "AddUAPAction",
        "methods": [
            {
                "method_name": "add",
                "parameters": [
                    "p"
                ],
                "docstring": "Sets up the defaults for the class \t   \t  @param factory factory for creating the defaults. \t  @param loggedInMID person currently logged in  \t  @author Andy Meneely"
            }
        ],
        "attributes": [
            "personnelDAO",
            "authDAO",
            "transDAO",
            "loggedInMID"
        ],
        "docstring": "Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password   for them.      Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}      @author Andy Meneely"
    },
    {
        "class_name": "ChangeSessionTimeoutAction",
        "methods": [
            {
                "method_name": "changeSessionTimeout",
                "parameters": [
                    "minuteString"
                ],
                "docstring": "Sets up defualts. \t   \t  @param factory \t  @author Andy Meneely"
            },
            {
                "method_name": "getSessionTimeout",
                "parameters": [],
                "docstring": "Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO, \t  {@link AccessDAO} \t   \t  @param minuteString \t             Pass the number of minutes in the form of a string, greater than 0. \t  @throws FormValidationException \t  @throws DBException \t  @author Andy Meneely"
            }
        ],
        "attributes": [
            "accessDAO"
        ],
        "docstring": "Used to change the session timeout, sessionTimeout.jsp. Note that a change to this timeout only gets   reflected on new sessions.      @author Andy Meneely"
    },
    {
        "class_name": "ChronicDiseaseRiskAction",
        "methods": [
            {
                "method_name": "getPatientID",
                "parameters": [],
                "docstring": "@param factory \t  @param loggedInMID \t  @param pidString \t             The patient ID to be validated and used \t  @throws iTrustException \t  @throws DBException \t  @throws NoHealthRecordsException \t              This is thrown if a patient is added without any health records to be checked. Try to avoid \t              having this exception be thrown in a normal flow of events. \t  @author Andy Meneely"
            },
            {
                "method_name": "getUserName",
                "parameters": [],
                "docstring": "Returns the ID of the patient to be checked. \t   \t  @return patient ID whose risk we are checking \t  @author Andy Meneely"
            },
            {
                "method_name": "getDiseasesAtRisk",
                "parameters": [],
                "docstring": "Gives the full name of the patient \t   \t  @return Full name of the patient who we are checking \t  @throws DBException \t  @throws iTrustException \t  @author Andy Meneely"
            }
        ],
        "attributes": [
            "authDAO",
            "loggedInMID",
            "diseaseMediator",
            "transDAO"
        ],
        "docstring": "Used for chronicDiseaseRisks.jsp. Passes most of the logic off to {@link ChronicDiseaseMediator}, and the   various subclasses of {@link RiskChecker}.      @author Andy Meneely"
    },
    {
        "class_name": "DeclareHCPAction",
        "methods": [
            {
                "method_name": "getDeclaredHCPS",
                "parameters": [],
                "docstring": "Sets up defaults \t   \t  @param factory The DAO factory to be used for generating the DAOs for this action. \t  @param loggedInMID \t             This patient \t  @author Andy Meneely"
            },
            {
                "method_name": "declareHCP",
                "parameters": [
                    "hcpStr"
                ],
                "docstring": "Lists the declared HCPs for this current patient \t   \t  @return Returns a list of the declared HCPs \t  @throws iTrustException \t  @author Andy Meneely"
            },
            {
                "method_name": "undeclareHCP",
                "parameters": [
                    "input"
                ],
                "docstring": "Validate an HCP's MID and declare them, if possible \t   \t  @param hcpStr \t             The MID of an HCP to declare \t  @return A status message, \t  @throws iTrustException \t  @author Andy Meneely"
            }
        ],
        "attributes": [
            "transDAO",
            "patientDAO",
            "authDAO",
            "loggedInMID"
        ],
        "docstring": "Used by the patient to declare HCPs as \"designated\", in editHCPs.jsp.      @author Andy Meneely"
    },
    {
        "class_name": "DrugInteractionAction",
        "methods": [
            {
                "method_name": "reportInteraction",
                "parameters": [
                    "firstDrug",
                    "secondDrug",
                    "description"
                ],
                "docstring": "Sets up defaults \t   \t  @param factory The DAO factory to be used for generating the DAOs for this action."
            },
            {
                "method_name": "deleteInteraction",
                "parameters": [
                    "firstDrug",
                    "secondDrug"
                ],
                "docstring": "Method to report an interaction \t  @param firstDrug \t  @param secondDrug \t  @param description \t  @return"
            },
            {
                "method_name": "getInteractions",
                "parameters": [
                    "drugCode"
                ],
                "docstring": "Method to delete an interaction \t  @param firstDrug \t  @param secondDrug \t  @return"
            }
        ],
        "attributes": [
            "drugDAO",
            "tranDAO",
            "validator",
            "loggedInMID"
        ],
        "docstring": "Used by EditDrugInteraction.jsp to edit and get information about drug interactions."
    },
    {
        "class_name": "EditApptTypeAction",
        "methods": [
            {
                "method_name": "getApptTypes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "addApptType",
                "parameters": [
                    "apptType"
                ],
                "docstring": null
            },
            {
                "method_name": "editApptType",
                "parameters": [
                    "apptType"
                ],
                "docstring": null
            },
            {
                "method_name": "getDurationByType",
                "parameters": [
                    "at"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "loggedInMID",
            "apptTypeDAO",
            "transDAO",
            "validator"
        ],
        "docstring": null
    },
    {
        "class_name": "EditHealthHistoryAction",
        "methods": [
            {
                "method_name": "getPatientName",
                "parameters": [],
                "docstring": "The patient ID is validated by the superclass \t   \t  @param factory The DAOFactory which will be used to generate the DAOs used for this action. \t  @param loggedInMID The user authorizing this action. \t  @param pidString The patient (or other user) who is being edited. \t  @throws iTrustException"
            },
            {
                "method_name": "addHealthRecord",
                "parameters": [
                    "pid",
                    "hr"
                ],
                "docstring": "returns the patient name \t   \t  @return patient name \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "transferForm",
                "parameters": [
                    "pid",
                    "form"
                ],
                "docstring": "Adds a health record for the given patient \t   \t  @param pid  The patient record who is being edited. \t  @param hr  The filled out health record form to be added. \t  @return message - \"Information Recorded\" or exception's message \t  @throws FormValidationException"
            },
            {
                "method_name": "getAllHealthRecords",
                "parameters": [
                    "pid"
                ],
                "docstring": "Moves the information from the form to a HealthRecord      @param pid Patient of interest   @param form Form to be translated   @return a HealthRecord containing all the information in the form   @throws FormValidationException"
            }
        ],
        "attributes": [
            "transDAO",
            "hrDAO",
            "authDAO",
            "loggedInMID",
            "validator"
        ],
        "docstring": "Edits the health history of a patient, used by editBasicHealth.jsp      @author laurenhayward"
    },
    {
        "class_name": "EditMonitoringListAction",
        "methods": [
            {
                "method_name": "addToList",
                "parameters": [
                    "patientMID"
                ],
                "docstring": "Constructor \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the HCP editing their monitoring list."
            },
            {
                "method_name": "removeFromList",
                "parameters": [
                    "patientMID"
                ],
                "docstring": "Adds a patient to the current HCP's remote monitoring list \t   \t  @param patientMID the patient \t  @return true if added successfully. False if already in list. \t  @throws DBException"
            },
            {
                "method_name": "isPatientInList",
                "parameters": [
                    "patientMID"
                ],
                "docstring": "Removes a patient from the current HCP's remote monitoring list \t   \t  @param patientMID the patient \t  @return true if removed successfully. False if not in list. \t  @throws DBException"
            },
            {
                "method_name": "getPatientName",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns whether a patient is in an HCP's list already \t  @param patientMID the patient \t  @return true if in DB, false otherwise \t  @throws DBException"
            }
        ],
        "attributes": [
            "rmDAO",
            "transDAO",
            "authDAO",
            "loggedInMID"
        ],
        "docstring": "Handles changes (adds and removes) to the monitoring list for a certain HCP."
    },
    {
        "class_name": "EditOfficeVisitAction",
        "methods": [
            {
                "method_name": "getOfficeVisit",
                "parameters": [],
                "docstring": "Used to identify the subactions that can comprise an office visit action. \t  Subactions help direct the action's logic because sometimes multiple  \t  office visit actions can occur within one transaction."
            },
            {
                "method_name": "getLabProcedures",
                "parameters": [
                    "mid",
                    "ovid"
                ],
                "docstring": "Patient id and office visit id validated by super class \t   \t  @param factory The DAOFactory to be used in creating the DAOs for this action. \t  @param loggedInMID The MID of the user who is authorizing this action. \t  @param pidString The patient who this action is performed on. \t  @param ovIDString The ID of the office visit in play. \t  @throws iTrustException"
            },
            {
                "method_name": "getHospitals",
                "parameters": [
                    "hcpID"
                ],
                "docstring": "Returns the office visit bean for the office visit \t   \t  @return the OfficeVisitBean of the office visit \t  @throws iTrustException"
            },
            {
                "method_name": "combineLists",
                "parameters": [
                    "hcpsHospitals",
                    "allHospitals"
                ],
                "docstring": "Returns a list of the lab procedures that have been done in an office visit. \t   \t  @param mid the doctor the visit was with \t  @param ovid the office visit's id \t  @return a list of the lab procedures that were done in that visit \t  @throws DBException"
            },
            {
                "method_name": "updateInformation",
                "parameters": [
                    "form"
                ],
                "docstring": "This is a list of all hospitals, ordered by the office visit's hcp FIRST \t   \t  @param hcpID \t  @return \t  @throws iTrustException"
            },
            {
                "method_name": "hasInteraction",
                "parameters": [
                    "drug",
                    "pid",
                    "startdate",
                    "enddate"
                ],
                "docstring": "Combines two lists of hospitals \t   \t  @param hcpsHospitals hospitals the HCP is assigned to \t  @param allHospitals all hopsitals \t  @return the combined list"
            },
            {
                "method_name": "isAllergyOnList",
                "parameters": [
                    "patMID",
                    "ndcode"
                ],
                "docstring": "Updates the office visit with information from the form passed in \t   \t  @param form \t             information to update \t  @return \"success\" or exception's message \t  @throws FormValidationException"
            },
            {
                "method_name": "makeEmailApp",
                "parameters": [
                    "hcpID",
                    "patID",
                    "problem"
                ],
                "docstring": "Sends e-mail regarding the prescribed dangerous drug. \t   \t  @param hcpID HCP the prescription is made by \t  @param patID ID of the patient prescription is for \t  @param problem The allergy and/or interaction that is the problem \t  @return the sent e-mail \t  @throws DBException"
            },
            {
                "method_name": "checkAddPrescription",
                "parameters": [
                    "form",
                    "ovID"
                ],
                "docstring": "Adds a prescription to an office visit      @param form the information about the prescription   @param ovID the id for the office visit   @throws DBException   @throws FormValidationException"
            },
            {
                "method_name": "updateOv",
                "parameters": [
                    "form"
                ],
                "docstring": "Updates the office visit. \t   \t  @param form form with all the information \t  @throws DBException \t  @throws FormValidationException"
            },
            {
                "method_name": "checkAddSubAction",
                "parameters": [
                    "action",
                    "code",
                    "visitID",
                    "dateOfDeath"
                ],
                "docstring": "Adds a diagnosis or a procedure to an office visit \t   \t  @param action the type of action to add \t  @param code the CPT code of the action \t  @param visitID the office visit to add the action to \t  @param dateOfDeath the date of death, if needed \t  @return true if the operation completed; false if the code was null \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "checkAddSubAction",
                "parameters": [
                    "action",
                    "code",
                    "visitID",
                    "dateOfDeath",
                    "hcpid"
                ],
                "docstring": "Removes an action from an office visit \t   \t  @param action type of action to remove \t  @param input id for the action to remove \t  @return true if the operation completed; false if the code was null \t  @throws DBException"
            },
            {
                "method_name": "checkRemoveSubAction",
                "parameters": [
                    "action",
                    "input"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "validator",
            "personnelDAO",
            "hospitalDAO",
            "ovDAO",
            "lpDAO",
            "transDAO",
            "drugDAO",
            "allergyDAO",
            "patDAO",
            "ndcDAO",
            "loggedInMID",
            "pid"
        ],
        "docstring": "Edits the office visits of a patient Used by editOfficeVisit.jsp      @author laurenhayward"
    },
    {
        "class_name": "EditPatientAction",
        "methods": [
            {
                "method_name": "updateInformation",
                "parameters": [
                    "p"
                ],
                "docstring": "The super class validates the patient id \t   \t  @param factory The DAOFactory used to create the DAOs for this action. \t  @param loggedInMID The MID of the user who is authorizing this action. \t  @param pidString The MID of the patient being edited. \t  @throws iTrustException"
            },
            {
                "method_name": "getPatient",
                "parameters": [],
                "docstring": "Takes the information out of the PatientBean param and updates the patient's information \t   \t  @param p \t             the new patient information \t  @throws iTrustException \t  @throws FormValidationException"
            },
            {
                "method_name": "makeEmail",
                "parameters": [],
                "docstring": "Returns a PatientBean for the patient \t   \t  @return the PatientBean \t  @throws DBException"
            },
            {
                "method_name": "editMessageFilter",
                "parameters": [
                    "filter"
                ],
                "docstring": "Creates and e-mail to inform the patient that their information has been updated. \t    \t  @return the email with the notice \t  @throws DBException"
            }
        ],
        "attributes": [
            "transDAO",
            "validator",
            "patientDAO",
            "loggedInMID",
            "emailutil"
        ],
        "docstring": "Edits a patient Used by editPatient.jsp      @author laurenhayward"
    },
    {
        "class_name": "EditPersonnelAction",
        "methods": [
            {
                "method_name": "updateInformation",
                "parameters": [
                    "personnelForm"
                ],
                "docstring": "Super class validates the patient id \t   \t  @param factory The DAOFactory used to create the DAOs for this action. \t  @param loggedInMID The MID of the user editing this personnel. \t  @param pidString The ID of the user being edited. \t  @throws iTrustException"
            },
            {
                "method_name": "editMessageFilter",
                "parameters": [
                    "filter"
                ],
                "docstring": "Takes information from the personnelForm param and updates the patient \t   \t  @param personnelForm \t             PersonnelBean with new information \t  @throws iTrustException \t  @throws FormValidationException"
            }
        ],
        "attributes": [
            "loggedInMID",
            "personnelDAO",
            "transDAO",
            "authDAO",
            "validator"
        ],
        "docstring": "Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,   editPersonnel.jsp      @author laurenhayward"
    },
    {
        "class_name": "EditPHRAction",
        "methods": [
            {
                "method_name": "updateAllergies",
                "parameters": [
                    "pid",
                    "description"
                ],
                "docstring": "Super class validates the patient id \t   \t  @param factory The DAOFactory to be used in creating DAOs for this action. \t  @param loggedInMID The MID of the currently logged in user who is authorizing this action. \t  @param pidString The MID of the patient whose personal health records are being added. \t  @throws iTrustException \t  @throws DBException \t  @throws NoHealthRecordsException"
            },
            {
                "method_name": "getPatient",
                "parameters": [],
                "docstring": "Adds an allergy to the patient's records \t   \t  @param pid \t  @param description \t  @return \"Allergy Added\", exception message, a list of invalid fields, or \"\" (only if description is \t          null) \t  @throws iTrustException"
            },
            {
                "method_name": "getAllergies",
                "parameters": [],
                "docstring": "Returns a PatientBean for the patient \t   \t  @return PatientBean \t  @throws iTrustException"
            },
            {
                "method_name": "getFamily",
                "parameters": [],
                "docstring": "Returns a list of AllergyBeans for the patient \t   \t  @return list of AllergyBeans \t  @throws iTrustException"
            },
            {
                "method_name": "getAllHealthRecords",
                "parameters": [],
                "docstring": "Returns a list of FamilyMemberBeans for the patient \t   \t  @return list of FamilyMemberBeans \t  @throws iTrustException"
            },
            {
                "method_name": "getAllOfficeVisits",
                "parameters": [],
                "docstring": "Returns a list of HealthRecords for the patient \t   \t  @return \t  @throws iTrustException"
            },
            {
                "method_name": "getCompleteOfficeVisit",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Returns a list of OfficeVisitBeans \t   \t  @return \t  @throws iTrustException"
            },
            {
                "method_name": "getDiseasesAtRisk",
                "parameters": [],
                "docstring": "Returns a complete OfficeVisitBean given a visitID \t   \t  @return \t  @throws iTrustException"
            },
            {
                "method_name": "doesFamilyMemberHaveHighBP",
                "parameters": [
                    "member"
                ],
                "docstring": "Returns a list of diseases for which the patient is at risk \t   \t  @return list of RiskCheckers \t  @throws iTrustException \t  @throws DBException"
            },
            {
                "method_name": "doesFamilyMemberHaveHighCholesterol",
                "parameters": [
                    "member"
                ],
                "docstring": "Checks to see if a particular family member has high blood pressure \t   \t  @param member the family member to check \t  @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure \t  @throws iTrustException"
            },
            {
                "method_name": "doesFamilyMemberHaveDiabetes",
                "parameters": [
                    "member"
                ],
                "docstring": "Checks to see if a particular family member has high cholesterol \t   \t  @param member the family member to check \t  @return true if the family member has high cholesterol.  False if there are no records or the family member does not \t  @throws iTrustException"
            },
            {
                "method_name": "doesFamilyMemberHaveCancer",
                "parameters": [
                    "member"
                ],
                "docstring": "Checks to see if a particular family member has diabetes \t   \t  @param member the family member to check \t  @return true if the family member has diabetes.  False if there are no records or the family member does not \t  @throws iTrustException"
            },
            {
                "method_name": "doesFamilyMemberHaveHeartDisease",
                "parameters": [
                    "member"
                ],
                "docstring": "Checks to see if a particular family member has cancer \t   \t  @param member the family member to check \t  @return true if the family member has cancer.  False if there are no records or the family member does not \t  @throws iTrustException"
            },
            {
                "method_name": "isFamilyMemberSmoker",
                "parameters": [
                    "member"
                ],
                "docstring": "Checks to see if a particular family member has heart disease \t   \t  @param member the family member to check \t  @return true if the family member has heart disease.  False if there are no records or the family member does not \t  @throws iTrustException"
            },
            {
                "method_name": "getFamilyMemberCOD",
                "parameters": [
                    "member"
                ],
                "docstring": "Checks to see if a particular family member smokes \t   \t  @param member the family member to check \t  @return true if the family member smokes.  False if there are no records or the family member does not \t  @throws iTrustException"
            },
            {
                "method_name": "makeEmail",
                "parameters": [],
                "docstring": "Checks to see if the family member is dead and returns their cause of death if so \t   \t  @param member the family member to check \t  @return the cause of death if there is one; otherwise null \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "factory",
            "patientDAO",
            "allergyDAO",
            "familyDAO",
            "hrDAO",
            "ovDAO",
            "transDAO",
            "icdDAO",
            "loggedInMID",
            "diseaseMediator",
            "personnelDAO",
            "HCPUAP",
            "patient",
            "emailutil"
        ],
        "docstring": "Edits the patient health record for a given patient Used by editPHR.jsp      @author laurenhayward"
    },
    {
        "class_name": "EditPrescriptionAction",
        "methods": [
            {
                "method_name": "editPrescription",
                "parameters": [
                    "pres"
                ],
                "docstring": "Creates a new action by initializing the office visit \t  database access object. \t   \t  @param factory \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "ovDAO"
        ],
        "docstring": "Edits a patient's prescription information.  Used by hcp-uap/editPrescription.jsp   @author Ben Smith"
    },
    {
        "class_name": "EditRepresentativesAction",
        "methods": [
            {
                "method_name": "getRepresented",
                "parameters": [
                    "pid"
                ],
                "docstring": "Super class validates the patient mid \t   \t  @param factory The DAOFactory used in creating the DAOs for this action. \t  @param loggedInMID The MID of the patient editing his/her representatives. \t  @param pidString The MID of the representative in question. \t  @throws iTrustException"
            },
            {
                "method_name": "addRepresentative",
                "parameters": [
                    "pidString"
                ],
                "docstring": "Return a list of patients that pid represents \t   \t  @param pid The id of the personnel we are looking up representees for. \t  @return a list of PatientBeans \t  @throws iTrustException"
            },
            {
                "method_name": "removeRepresentative",
                "parameters": [
                    "input"
                ],
                "docstring": "Makes the patient (pid) represent the input mid parameter \t   \t  @param pidString \t             the mid of the person who will be represented (the representee) \t  @return a message \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "patientDAO",
            "transDAO",
            "authDAO",
            "loggedInMID"
        ],
        "docstring": "Edits a patient's personal representatives. Used by hcp/editRepresentatives.jsp      @author laurenhayward"
    },
    {
        "class_name": "EmergencyReportAction",
        "methods": [
            {
                "method_name": "getPatientName",
                "parameters": [],
                "docstring": "The super class handles validating the pid Logs viewing of the report \t   \t  @param factory The DAOFactory used in creating the DAOs for this action. \t  @param loggedInMID The MID of the user who is looking at the emergency report. \t  @param pidString The ID of the patient whose report is being generated. \t  @throws iTrustException"
            },
            {
                "method_name": "getPatientAge",
                "parameters": [],
                "docstring": "Returns the patient's name \t   \t  @return patient's full name"
            },
            {
                "method_name": "getPatientGender",
                "parameters": [],
                "docstring": "Returns the patient's age \t   \t  @return patient's age"
            },
            {
                "method_name": "getPatientEmergencyContact",
                "parameters": [],
                "docstring": "Returns the patient's gender \t   \t  @return patient's gender"
            },
            {
                "method_name": "getBloodType",
                "parameters": [],
                "docstring": "Returns the patient's emergency contact \t   \t  @return patient's emergency contact"
            },
            {
                "method_name": "getAllergies",
                "parameters": [],
                "docstring": "Returns the patient's blood type \t   \t  @return the patient's blood type"
            },
            {
                "method_name": "getCurrentPrescriptions",
                "parameters": [],
                "docstring": "Returns a list of allergies for the given patient \t   \t  @return a list of AllergyBeans \t  @throws iTrustException"
            },
            {
                "method_name": "getWarningDiagnoses",
                "parameters": [],
                "docstring": "Returns a list of prescriptions the patient is currently taking \t   \t  @return a list of PrescriptionBeans for which the patient is currently taking \t  @throws iTrustException"
            },
            {
                "method_name": "getImmunizations",
                "parameters": [],
                "docstring": "Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum \t   \t  @return list of DiagnosisBeans \t  @throws iTrustException"
            },
            {
                "method_name": "makeEmail",
                "parameters": [],
                "docstring": "Returns a list of prescriptions the patient is currently taking \t   \t  @return a list of PrescriptionBeans for which the patient is currently taking \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "transDAO",
            "patientDAO",
            "allergyDAO",
            "ovDAO",
            "pb",
            "emailutil",
            "loggedInMID"
        ],
        "docstring": "Creates a new Emergency Report Used by emergencyReport.jsp      @author laurenhayward"
    },
    {
        "class_name": "GenerateCalendarAction",
        "methods": [
            {
                "method_name": "getSend",
                "parameters": [],
                "docstring": "Set up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user who is viewing the calendar"
            },
            {
                "method_name": "getConflicts",
                "parameters": [],
                "docstring": "Return the send request for an AppointmentBean \t  @return the send request for an AppointmentBean"
            },
            {
                "method_name": "getApptsTable",
                "parameters": [
                    "thisMonth",
                    "thisYear"
                ],
                "docstring": "Check appointments appearing on the calendar for conflicts  \t  with other appointments on the calendar.  \t   \t  The array from this method is used to determine what appointments \t  will appear in bold on the calendar. \t   \t  @return An array of items that are in conflict with other items. \t  @throws SQLException"
            },
            {
                "method_name": "getOfficeVisitsTable",
                "parameters": [
                    "thisMonth",
                    "thisYear"
                ],
                "docstring": "Creates a hash table with all of the Appointments to be  \t  displayed on the calendar for the month and year being viewed. \t   \t  @param thisMonth The month of the calendar to be rendered \t  @param thisYear The year of the calendar to be rendered \t  @return A Hashtable containing the AppointmentBeans to be rendered \t  @throws SQLException"
            },
            {
                "method_name": "getLabProceduresTable",
                "parameters": [
                    "thisMonth",
                    "thisYear"
                ],
                "docstring": "Creates a hash table with all of the Office Visits to be  \t  displayed on the calendar for the month and year being viewed. \t   \t  @param thisMonth The month of the calendar to be rendered \t  @param thisYear The year of the calendar to be rendered \t  @return A Hashtable containing the OfficeVisitBeans to be rendered \t  @throws SQLException"
            }
        ],
        "attributes": [
            "a_action",
            "types",
            "r_action",
            "send"
        ],
        "docstring": "Action class for calendar.jsp   @author Software Engineering Team 13, 2010 \"Project Zephyr\""
    },
    {
        "class_name": "GetUserNameAction",
        "methods": [
            {
                "method_name": "getUserName",
                "parameters": [
                    "inputMID"
                ],
                "docstring": "Set up defaults \t   \t  @param factory The DAOFactory used for creating the DAOs for this action."
            }
        ],
        "attributes": [
            "factory"
        ],
        "docstring": "Handles Getting the person's name associated with a certain mid Used by getUser.jsp      @author laurenhayward"
    },
    {
        "class_name": "GetVisitRemindersAction",
        "methods": [
            {
                "method_name": "getVisitReminders",
                "parameters": [
                    "type"
                ],
                "docstring": "Reminder Type enumeration."
            },
            {
                "method_name": "getImmunizationNeeders",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets the ReminderType for the name passed as a param \t\t   \t\t  @param name \t\t  @return the ReminderType associated with the name"
            },
            {
                "method_name": "checkImmunizations",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns the type name as a string \t\t   \t\t  @return"
            },
            {
                "method_name": "testHPV",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Begin GetVisitRemindersAction code"
            },
            {
                "method_name": "testHepA",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Set up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID MID of the person who is logged in \t  @throws iTrustException"
            },
            {
                "method_name": "testVaricella",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Returns a list of VisitReminderReturnForms for the type passed in as a param \t   \t  @param type \t             the ReminderType \t  @return the list of VisitReminderReturnForms \t  @throws iTrustException \t  @throws FormValidationException"
            },
            {
                "method_name": "testMeasles",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Gets a list of anyone who need immunizations \t   \t  @param mid the HCP whose patients are being checked \t  @return a list of all the people who need immunizations--done in a visit reminder \t  @throws iTrustException"
            },
            {
                "method_name": "testPolio",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Checks a patient to see what immunizations they need \t   \t  @param pid patient to be checked \t  @return patient list of those lacking immunizations according to the schedule"
            },
            {
                "method_name": "testPneumo",
                "parameters": [
                    "count",
                    "patientAge",
                    "time",
                    "firstDoseTime"
                ],
                "docstring": "Checks to see if a patient needs the HPV immunization \t   \t  @param count which immunization they are on \t  @param patientAge how old the patient is \t  @param time what the date is \t  @return when the immunization should be given"
            },
            {
                "method_name": "testHaemoFlu",
                "parameters": [
                    "count",
                    "patientAge",
                    "time",
                    "firstDoseTime"
                ],
                "docstring": "Checks to see if a patient needs the Hepatits A immunization \t   \t  @param count which immunization they are on \t  @param patientAge how old the patient is \t  @param time what the current date is \t  @return when the immunization should be given"
            },
            {
                "method_name": "testDipTet",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Checks to see if a patient needs the Varicella immunization \t   \t  @param count which immunization they are on \t  @param patientAge how old the patient is \t  @param time what the current date is \t  @return when the immunization should be given"
            },
            {
                "method_name": "testRotaVirus",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization \t   \t  @param count which immunization they are on \t  @param patientAge how old the patient is \t  @param time what the current date is \t  @return when the immunization should be given"
            },
            {
                "method_name": "testHepB",
                "parameters": [
                    "count",
                    "patientAge",
                    "time"
                ],
                "docstring": "Checks to see if a patient needs the Polio immunization \t   \t  @param count which immunization they are on \t  @param patientAge how old the patient is \t  @param time what the current date is \t  @return when the immunization should be given"
            },
            {
                "method_name": "stripDupes",
                "parameters": [
                    "patients"
                ],
                "docstring": "Checks to see if a patient needs the Pneumococcal immunization \t   \t  @param count which immunization they are on \t  @param patientAge how old the patient is \t  @param time what the current date is \t  @return when the immunization should be given"
            }
        ],
        "attributes": [
            "transDAO",
            "visitReminderDAO",
            "patientDAO",
            "loggedInMID"
        ],
        "docstring": "Gets the VisitReminders for a given patient Used by visitReminders.jsp      @author laurenhayward"
    },
    {
        "class_name": "LabProcHCPAction",
        "methods": [
            {
                "method_name": "sortByLOINC",
                "parameters": [
                    "id"
                ],
                "docstring": "Sets up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID  MID for the logged in HCP"
            },
            {
                "method_name": "getLabProcForNextMonth",
                "parameters": [],
                "docstring": "This method sorts by LOINC and returns the list \t   \t  @param id the ID to sort the list by \t  @return List sorted by LOINC"
            },
            {
                "method_name": "changePrivacy",
                "parameters": [
                    "x"
                ],
                "docstring": "Returns a list of all the lab procedures for the next month \t   \t  @return all the lab procedures for the next month"
            },
            {
                "method_name": "checkAccess",
                "parameters": [
                    "x"
                ],
                "docstring": "Changes the privacy settings \t   \t  @param x the ID of the procedure to change"
            }
        ],
        "attributes": [
            "transDAO",
            "lpDAO",
            "ovDAO",
            "loggedInMID",
            "validator"
        ],
        "docstring": "Action class for LabProcHCP.jsp.      @extends LabProcUAPAction"
    },
    {
        "class_name": "LabProcUAPAction",
        "methods": [
            {
                "method_name": "updateProcedure",
                "parameters": [
                    "b"
                ],
                "docstring": "Setup    @param factory The DAOFactory used to create the DAOs used in this action.   @param loggedInMID UAP who is logged in"
            },
            {
                "method_name": "makeEmail",
                "parameters": [
                    "b"
                ],
                "docstring": "Updates a lab procedure \t   \t  @param b the procedure to update \t  @throws DBException \t  @throws FormValidationException"
            },
            {
                "method_name": "viewProcedures",
                "parameters": [
                    "id"
                ],
                "docstring": "Sends an e-mail informing the patient that their procedure has been updated \t   \t  @param b the procedure that was updated \t  @return an e-mail to the patient with the notice \t  @throws DBException"
            }
        ],
        "attributes": [
            "transDAO",
            "lpDAO",
            "loggedInMID",
            "validator",
            "factory"
        ],
        "docstring": "Class for LabProcUAP.jsp.  Handles lab procedures for UAPs"
    },
    {
        "class_name": "LoginFailureAction",
        "methods": [
            {
                "method_name": "recordLoginFailure",
                "parameters": [],
                "docstring": "Set up defaults \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param ipAddr The IP address of the user making the login attempt."
            },
            {
                "method_name": "isValidForLogin",
                "parameters": [],
                "docstring": "Calls authDAO to record the login failure in the database \t   \t  @return How many login failure attempts or a DBException message"
            }
        ],
        "attributes": [
            "MAX_LOGIN_ATTEMPTS",
            "authDAO",
            "ipAddr",
            "transactionDAO"
        ],
        "docstring": "Please note that this is not the best mitigation for Denial of Service attacks. The better way would be to   keep track of password failure attempts per user account, NOT with easily spoofable ip addresses. The   reason this feature is implemented with ip addresses is a limitation in Tomcat authentication (actually,   it's technically JSP's fault for not specifying a form of account lockout). <br />   <br />   All authentication in this application is done by the container (Tomcat), which doesn't support account   lockout. So our options would be (a) to implement our own authentication (yuck!), or (2) to extend the   JDBCRealm class in the Tomcat source code and add the logic. I've looked into this and it's actually pretty   easy. The ONLY reason it's not implemented here is that the code would be buried in a jar in your Tomcat   installation - not very educational for those who want to learn about authentication in webapps. Feel free   to change this; extending this would be perfectly acceptable.      @author Andy"
    },
    {
        "class_name": "ManageHospitalAssignmentsAction",
        "methods": [
            {
                "method_name": "getAvailableHospitals",
                "parameters": [
                    "midString"
                ],
                "docstring": "Set up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user managing hospitals."
            },
            {
                "method_name": "getAssignedHospitals",
                "parameters": [
                    "midString"
                ],
                "docstring": "Returns a list of hospitals to which the given mid is not currently assigned \t   \t  @param midString \t  @return list of HospitalBeans \t  @throws iTrustException"
            },
            {
                "method_name": "assignHCPToHospital",
                "parameters": [
                    "midString",
                    "hospitalID"
                ],
                "docstring": "Returns a list of hospitals to which the given mid is currently assigned \t   \t  @param midString \t  @return list of HosptialBeans \t  @throws iTrustException"
            },
            {
                "method_name": "removeHCPAssignmentToHospital",
                "parameters": [
                    "midString",
                    "hospitalID"
                ],
                "docstring": "Assigns the mid to the hospital \t   \t  @param midString The MID of the person assigned to the hospital as a String. \t  @param hospitalID The ID of the hospital. \t  @return message indicating the status of the assignment \t  @throws iTrustException"
            },
            {
                "method_name": "removeAllAssignmentsFromHCP",
                "parameters": [
                    "midString"
                ],
                "docstring": "Removes HCPs assignment to the designated hospital \t   \t  @param midString \t             the HCP's mid \t  @param hospitalID \t             the hospital id to be removed \t  @return Status message \t  @throws iTrustException"
            },
            {
                "method_name": "checkHCPID",
                "parameters": [
                    "hcpID"
                ],
                "docstring": "Removes all hospital assignments for the given hcp mid \t   \t  @param midString \t             HCP's mid \t  @return status message \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "transDAO",
            "personnelDAO",
            "hospitalsDAO",
            "loggedInMID"
        ],
        "docstring": "Manages the assignment of HCPs to hospitals Used by hospitalAssignments.jsp      @author laurenhayward"
    },
    {
        "class_name": "MonitorAdverseEventAction",
        "methods": [
            {
                "method_name": "getReports",
                "parameters": [
                    "isPrescription",
                    "start",
                    "end"
                ],
                "docstring": "Constructor  \t  @param factory \t  @param loggedInMID"
            },
            {
                "method_name": "getName",
                "parameters": [
                    "MID"
                ],
                "docstring": "Returns a list of reports between specified dates \t  @param isPrescription Boolean to return prescriptions or immunizations \t  @param start The starting date \t  @param end The ending date \t  @return the list of events \t  @throws iTrustException \t  @throws FormValidationException \t  @throws SQLException \t  @throws ParseException"
            },
            {
                "method_name": "sendEmail",
                "parameters": [
                    "patientMID",
                    "message"
                ],
                "docstring": "Returns the patient's name \t  @param MID the MID of the patient to return the name for. \t  @return"
            },
            {
                "method_name": "remove",
                "parameters": [
                    "id"
                ],
                "docstring": "Sends an e-mail to a patient requesting more information \t  @param patientMID The patient to receive the message \t  @param message The message \t  @return string for testing purposes \t  @throws DBException"
            }
        ],
        "attributes": [
            "loggedInMID",
            "emailer",
            "patientDAO",
            "adverseEventDAO",
            "transactionDAO",
            "messenger"
        ],
        "docstring": "Used by PHAs to view the reported adverse events"
    },
    {
        "class_name": "MyDiagnosisAction",
        "methods": [
            {
                "method_name": "getDiagnoses",
                "parameters": [],
                "docstring": "Set up for defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user who is looking at their diagnoses. \t  @throws iTrustException"
            },
            {
                "method_name": "getHCPByDiagnosis",
                "parameters": [
                    "icdcode"
                ],
                "docstring": "Returns a list of DiagnosisBeans for the patient \t   \t  @return the list of DiagnosisBeans \t  @throws DBException"
            },
            {
                "method_name": "getPrescriptionsByHCPAndICD",
                "parameters": [
                    "hcpid",
                    "icdcode"
                ],
                "docstring": "Returns a list of all the HCPs who have a particular diagnosis \t   \t  @param icdcode the diagnosis of interest \t  @return the list of HCPs \t  @throws DBException"
            }
        ],
        "attributes": [
            "officeVisitDAO",
            "patientDAO",
            "personnelDAO",
            "surveyDAO",
            "transactionDAO",
            "labprocDAO",
            "loggedInMID"
        ],
        "docstring": "Edits the privacy levels of diagnoses, used by myDiagnoses.jsp      @author laurenhayward"
    },
    {
        "class_name": "PrescriptionReportAction",
        "methods": [
            {
                "method_name": "representPatient",
                "parameters": [
                    "input"
                ],
                "docstring": "Super class validates pidString \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user who is making a prescription report. \t  @param pidString The MID of the patient in question. \t  @throws iTrustException \t  @throws DBException \t  @throws NoHealthRecordsException"
            },
            {
                "method_name": "getAllOfficeVisits",
                "parameters": [],
                "docstring": "Takes the patient's representee as a param and returns it as a long if the patient represents the input \t  param \t   \t  @param input \t             the patient's representee mid \t  @return representee's mid as a long \t  @throws iTrustException"
            },
            {
                "method_name": "getPrescriptionReports",
                "parameters": [
                    "params",
                    "officeVisits"
                ],
                "docstring": "Returns a list of all office visits for the pid \t   \t  @return list of OfficeVisitBeans for the pid \t  @throws DBException"
            },
            {
                "method_name": "getPatient",
                "parameters": [],
                "docstring": "Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of \t  PrescriptionReportBeans \t   \t  @param params A java.util.HashMap containing the parameter map. \t  @param officeVisits A java.util.List of OfficeVisitBeans for the visits. \t  @return list of PrescriptionReportBeans \t  @throws DBException"
            },
            {
                "method_name": "getQueryString",
                "parameters": [
                    "paramMap",
                    "officeVisits"
                ],
                "docstring": "Returns a PatientBean for the pid \t   \t  @return PatientBean \t  @throws DBException"
            },
            {
                "method_name": "checkOfficeVisits",
                "parameters": [
                    "myParams",
                    "officeVisits"
                ],
                "docstring": "Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a \t  string that will be used to create a new url. The JSP will pull params from this url to create the \t  prescription report. \t   \t  @param paramMap A java.util.HashMap of the parameters. \t  @param officeVisits A java.util.List of OfficeVisitBeans. \t  @return the string that will be used in the new url \t  @throws FormValidationException \t  @throws DBException"
            },
            {
                "method_name": "buildQueryString",
                "parameters": [
                    "ovOffsets"
                ],
                "docstring": "Checks office visits \t   \t  @param myParams list of parameters \t  @param officeVisits list of office visits \t  @return Returns a java.util.ArrayList of Integers for the given office visits."
            }
        ],
        "attributes": [
            "isRepresenting",
            "ovDAO",
            "transDAO",
            "patientDAO",
            "loggedInMID"
        ],
        "docstring": "Handles Prescription Reports for the given pid Used by hcp-uap/getPrescriptionReport.jsp,   hcp-uap/viewPrescriptionRecord.jsp, patient/getMyPrescriptionReport.jsp, &   patient/viewMyPrescriptionRecord.jsp      @author laurenhayward"
    },
    {
        "class_name": "ReferralManagementAction",
        "methods": [
            {
                "method_name": "sendReferral",
                "parameters": [
                    "r"
                ],
                "docstring": "Super class validates the patient id \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user managing this referral. \t  @param pidString The MID of the patient being referred. \t  @throws iTrustException"
            },
            {
                "method_name": "updateReferral",
                "parameters": [
                    "r"
                ],
                "docstring": "Adds a referral bean to the database. \t  @param r The referral bean to be added. \t  @throws DBException"
            },
            {
                "method_name": "getReferralsSentFromMe",
                "parameters": [],
                "docstring": "Updates an existing referral bean. \t  @param r The current referral bean. \t  @throws DBException"
            },
            {
                "method_name": "getReferralsSentToMe",
                "parameters": [],
                "docstring": "Gets the referrals the currently logged in MID has sent. \t  @return A java.util.List of ReferralBeans this MID has sent. \t  @throws DBException"
            }
        ],
        "attributes": [
            "loggedInMID",
            "transDAO",
            "referralDAO"
        ],
        "docstring": "Used for referring patients to other HCPs.  The call is made in /auth/hcp/hcpConsultation.jsp"
    },
    {
        "class_name": "ReportAdverseEventAction",
        "methods": [
            {
                "method_name": "sendMails",
                "parameters": [
                    "aeList"
                ],
                "docstring": "Constructor used to send e-mails only"
            },
            {
                "method_name": "sendMail",
                "parameters": [
                    "aeBean"
                ],
                "docstring": "Method that sends exactly one e-mail to each MID in the list of Adverse Events \t  @param aeList The list of adverse Event Beans that need to be acted upon \t  @return EList The list of e-mails sent for testing purposes"
            },
            {
                "method_name": "addReport",
                "parameters": [
                    "aeBean"
                ],
                "docstring": "A method used to send a single e-mail. Used in immunizations. \t  @param aeBean \t  @return Email returns the Email for testing purposes."
            }
        ],
        "attributes": [
            "loggedInMID",
            "emailer",
            "patientDAO",
            "personnelDAO",
            "adverseEventDAO",
            "transactionDAO",
            "hcpID",
            "validator"
        ],
        "docstring": "Used for the patient to report adverse events."
    },
    {
        "class_name": "ResetPasswordAction",
        "methods": [
            {
                "method_name": "checkMID",
                "parameters": [
                    "midString"
                ],
                "docstring": "Set up defaults \t  @param factory The DAOFactory used to create the DAOs used in this action."
            },
            {
                "method_name": "isMaxedOut",
                "parameters": [
                    "ipAddress"
                ],
                "docstring": "Checks to see if a user exists with the given mid \t   \t  @param midString The user's MID to check for. \t  @return 0 if the user does not exist, else the mid of the user as a long"
            },
            {
                "method_name": "checkRole",
                "parameters": [
                    "mid",
                    "role"
                ],
                "docstring": "Checks to see if the number of reset password attempts has been exceeded for the given ipAddress \t   \t  @param ipAddress The IPv4 or IPv6 IP address as a String. \t  @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS \t  @throws DBException"
            },
            {
                "method_name": "checkAnswerNull",
                "parameters": [
                    "answer"
                ],
                "docstring": "Checks if the given mid matches the given role \t   \t  @param mid \t             the mid to be checked \t  @param role \t             the role to be checked \t  @return true if the mid and role match \t  @throws iTrustException"
            },
            {
                "method_name": "getSecurityQuestion",
                "parameters": [
                    "mid"
                ],
                "docstring": "Checks if the answer param is null \t   \t  @param answer the user's security answer \t  @return answer if not null, else return null"
            },
            {
                "method_name": "resetPassword",
                "parameters": [
                    "mid",
                    "role",
                    "answer",
                    "password",
                    "confirmPassword",
                    "ipAddr"
                ],
                "docstring": "Returns the security question for the mid param \t   \t  @param mid MID of the user \t  @return the security question or \"\" if DBException thrown \t  @throws iTrustException"
            },
            {
                "method_name": "makeEmailApp",
                "parameters": [
                    "mid",
                    "role"
                ],
                "docstring": "Resets the password for the given mid \t   \t  @param mid of the user to have their password reset \t  @param role what role the user has in iTrust \t  @param answer answers to their security question \t  @param password their password \t  @param confirmPassword their password again \t  @param ipAddr the ip address the request is coming from \t  @return status message \t  @throws FormValidationException \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "validatePassword",
                "parameters": [
                    "password",
                    "confirmPassword"
                ],
                "docstring": "Creates and sends an e-mail about the change \t   \t  @param mid the user who's password was changed \t  @param role what role they have in iTrust \t  @return the e-mial that is sent \t  @throws DBException"
            }
        ],
        "attributes": [
            "MAX_RESET_ATTEMPTS",
            "authDAO",
            "patientDAO",
            "factory"
        ],
        "docstring": "Manages resetting the password Used by resetPassword.jsp      @author laurenhayward"
    },
    {
        "class_name": "SearchUsersAction",
        "methods": [
            {
                "method_name": "searchForPersonnelWithName",
                "parameters": [
                    "firstName",
                    "lastName"
                ],
                "docstring": "Searches for all personnel with the first name and last name specified in the parameter list. \t  @param firstName The first name to be searched. \t  @param lastName The last name to be searched. \t  @return A java.util.List of PersonnelBeans for the users who matched."
            },
            {
                "method_name": "searchForPatientsWithName",
                "parameters": [
                    "firstName",
                    "lastName"
                ],
                "docstring": "Search for all patients with first name and last name given in parameters. \t  @param firstName The first name of the patient being searched. \t  @param lastName The last name of the patient being searched. \t  @return A java.util.List of PatientBeans"
            }
        ],
        "attributes": [
            "patientDAO",
            "personnelDAO"
        ],
        "docstring": "Set up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user who is performing the search."
    },
    {
        "class_name": "SendMessageAction",
        "methods": [
            {
                "method_name": "sendMessage",
                "parameters": [
                    "mBean"
                ],
                "docstring": "Sets up defaults \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user sending the message."
            },
            {
                "method_name": "getPatientName",
                "parameters": [
                    "mid"
                ],
                "docstring": "Sends a message \t   \t  @param mBean message to be sent \t  @throws iTrustException \t  @throws SQLException"
            },
            {
                "method_name": "getPersonnelName",
                "parameters": [
                    "mid"
                ],
                "docstring": "Returns the patient's name \t   \t  @param mid MId of the patient \t  @return the name of the patient \t  @throws iTrustException"
            },
            {
                "method_name": "getMyRepresentees",
                "parameters": [],
                "docstring": "Returns the personnel's name \t   \t  @param mid MId of the personnel \t  @return the name of the personnel \t  @throws iTrustException"
            },
            {
                "method_name": "getMyDLHCPs",
                "parameters": [],
                "docstring": "Returns a list of the patients that the logged in HCP represents \t   \t  @return list of the patients that the logged in HCP represents \t  @throws iTrustException"
            },
            {
                "method_name": "getDLHCPsFor",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns the designated HCPs for the logged in patient. \t   \t  @return designated HCPs for the logged in patient. \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "loggedInMID",
            "emailer",
            "patientDAO",
            "personnelDAO",
            "messageDAO",
            "transactionDAO",
            "emailVal",
            "messVal"
        ],
        "docstring": "Class for SendMessage.jsp."
    },
    {
        "class_name": "SetSecurityQuestionAction",
        "methods": [
            {
                "method_name": "updateInformation",
                "parameters": [
                    "a"
                ],
                "docstring": "Sets up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param rLoggedInMID The MID of the user who is setting their security question. \t  @throws iTrustException"
            },
            {
                "method_name": "retrieveInformation",
                "parameters": [],
                "docstring": "Updates information in the database from the information held in the SecurityQA bean passed as a param \t   \t  @param a \t             SecurityQuestionBean that holds new information \t  @throws Exception"
            },
            {
                "method_name": "checkMID",
                "parameters": [
                    "mid"
                ],
                "docstring": "Returns a SecurityQA bean holding the security info for the currently logged in user \t   \t  @return SecurityQA for loggedInMid \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "authDAO",
            "loggedInMID"
        ],
        "docstring": "Handles setting and retrieving the security questions/answers for users Used by   patient/editMyDemographics.jsp, staff/editMyDemographics.jsp, staff/editPersonnell.jsp      @author laurenhayward"
    },
    {
        "class_name": "SurveyAction",
        "methods": [
            {
                "method_name": "addSurvey",
                "parameters": [
                    "surveyBean",
                    "visitID"
                ],
                "docstring": "Sets up defaults \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the user taking the survey."
            }
        ],
        "attributes": [
            "transDAO",
            "surveyDAO",
            "loggedInMID"
        ],
        "docstring": "This class is used to add patient survey data to the database.  The office visit ID is linked with the survey ID.  Once the   survey is added, the transaction is logged"
    },
    {
        "class_name": "UpdateCPTCodeListAction",
        "methods": [
            {
                "method_name": "addCPTCode",
                "parameters": [
                    "proc"
                ],
                "docstring": "@param factory The DAOFactory used to create the DAOs used in this action. \t  @param loggedInMID The MID of the administrator who is updating the CPTs."
            },
            {
                "method_name": "updateInformation",
                "parameters": [
                    "proc"
                ],
                "docstring": "Adds a new cpt code (med procedure) \t   \t  @param proc \t             ProcedureBean that holds the new cpt code \t  @return status message \t  @throws FormValidationException"
            },
            {
                "method_name": "updateCode",
                "parameters": [
                    "proc"
                ],
                "docstring": "Updates a procedure with new information from the ProcedureBean \t   \t  @param proc \t             ProcedureBean with new information (but same CPT code) \t  @return Status message \t  @throws FormValidationException"
            }
        ],
        "attributes": [
            "loggedInMID",
            "transDAO",
            "cptDAO",
            "validator"
        ],
        "docstring": "Updates the CPT Code (Medical Procedures) List Used by editCPTProcedureCodes.jsp      The CPT code set accurately describes medical, surgical, and diagnostic services    and is designed to communicate uniform information about medical services and procedures    among physicians, coders, patients, accreditation organizations, and payers for administrative,    financial, and analytical purposes.     @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml   @author laurenhayward"
    },
    {
        "class_name": "UpdateHospitalListAction",
        "methods": [
            {
                "method_name": "addHospital",
                "parameters": [
                    "hosp"
                ],
                "docstring": "Set up \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param performerID The MID of the person updating the hospitals."
            },
            {
                "method_name": "updateInformation",
                "parameters": [
                    "hosp"
                ],
                "docstring": "Adds a hosptial using the HospitalBean passed as a param \t   \t  @param hosp \t             the new hospital listing \t  @return Status message \t  @throws FormValidationException"
            },
            {
                "method_name": "updateHospital",
                "parameters": [
                    "hosp"
                ],
                "docstring": "Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a \t  param \t   \t  @param hosp \t             the new hospital information with the same hospital id \t  @return Status message \t  @throws FormValidationException"
            }
        ],
        "attributes": [
            "performerID",
            "hospDAO",
            "transDAO"
        ],
        "docstring": "Handles updating the list of hospitals Used by hospitalListing.jsp      @author laurenhayward"
    },
    {
        "class_name": "UpdateICDCodeListAction",
        "methods": [
            {
                "method_name": "addICDCode",
                "parameters": [
                    "diagn"
                ],
                "docstring": "Set up \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param performerID The MID of the person udpating the ICDs."
            },
            {
                "method_name": "updateInformation",
                "parameters": [
                    "diagn"
                ],
                "docstring": "Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param \t   \t  @param diagn \t             The new diagnosis (ICD code) \t  @return Status message \t  @throws FormValidationException"
            }
        ],
        "attributes": [
            "performerID",
            "icdDAO",
            "transDAO",
            "validator"
        ],
        "docstring": "Handles updating the ICD Code (Diagnosis) List Used by editICDCodes.jsp      The International Statistical Classification of Diseases and Related Health Problems    (most commonly known by the abbreviation ICD) provides codes to classify diseases and a    wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and    external causes of injury or disease.       @see http://www.cdc.gov/nchs/icd9.htm   @author laurenhayward"
    },
    {
        "class_name": "UpdateLOINCListAction",
        "methods": [
            {
                "method_name": "add",
                "parameters": [
                    "diagn"
                ],
                "docstring": "Sets up defaults \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param performerID The MID of the person updating the LOINCs."
            },
            {
                "method_name": "updateInformation",
                "parameters": [
                    "diagn"
                ],
                "docstring": "Adds a new LOINC \t   \t  @param diagn \t             New LOINC \t  @return Status message \t  @throws FormValidationException"
            }
        ],
        "attributes": [
            "performerID",
            "lDAO",
            "transDAO",
            "validator"
        ],
        "docstring": "Handles updating the LOINC Used.      Logical Observation Identifiers Names and Codes (LOINC) is a database and universal    standard for identifying medical laboratory observations.        @see http://loinc.org/"
    },
    {
        "class_name": "UpdateNDCodeListAction",
        "methods": [
            {
                "method_name": "addNDCode",
                "parameters": [
                    "med"
                ],
                "docstring": "Set up defaults. \t   \t  @param factory The DAOFactory used to create the DAOs used in this action. \t  @param performerID The MID of the user updating the ND lists."
            },
            {
                "method_name": "updateInformation",
                "parameters": [
                    "med"
                ],
                "docstring": "Adds a new ND Code (prescription) to the list \t   \t  @param med \t             The new ND Code to be added \t  @return Status message \t  @throws FormValidationException"
            },
            {
                "method_name": "updateCode",
                "parameters": [
                    "med"
                ],
                "docstring": "Updates the ND Code with new information from the MedicationBean \t   \t  @param med \t             the MedicationBean that holds new information but the same code \t  @return status message \t  @throws FormValidationException"
            }
        ],
        "attributes": [
            "performerID",
            "transDAO",
            "ndDAO",
            "validator"
        ],
        "docstring": "Handles updating the ND Code (Prescription) List Used by editNDCodes.jsp      The National Drug Code (NDC) is a universal product identifier used in the   United States for drugs intended for human use.      @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm   @author laurenhayward"
    },
    {
        "class_name": "OfficeVisitBaseAction",
        "methods": [
            {
                "method_name": "checkOfficeVisitID",
                "parameters": [
                    "input"
                ],
                "docstring": "A database access object for dealing with office visits."
            },
            {
                "method_name": "getOvID",
                "parameters": [],
                "docstring": "The unique identifier of the office visit this action is associated with."
            },
            {
                "method_name": "encode",
                "parameters": [
                    "input"
                ],
                "docstring": "The default constructor. \t   \t  @param factory \t             A database access object factory for supplying a runtime context. \t  @param pidString \t             The patient's MID as a String, to be passed to the super constructor (for PatientBaseAction) \t  @param ovIDString \t             The unique identifier of the office visit as a String. \t  @throws iTrustException \t              If any of the supplied parameters is incorrect or there is a DB problem."
            }
        ],
        "attributes": [
            "ovDAO",
            "ovID"
        ],
        "docstring": "An abstract class which contains functionalities common among all actions relating to inserting and editing   office visits. Because all office visits are with a certain patient, OfficeVisitBaseAction extends   PatientBaseAction.      Use this class whenever you have a page which not only requires a patient MID, but an office visit ID. Pass   those IDs to the constructor, and an exception will be thrown if they are not valid IDs (which should kick   the user out to the home page).      The concrete methods created by this class allow for its association with the unique identifier of a given   office visit. These identifiers can also be verified for their correctness and existence.      Very similar to {@link PatientBaseAction} and {@link PersonnelBaseAction}"
    },
    {
        "class_name": "PatientBaseAction",
        "methods": [
            {
                "method_name": "checkPatientID",
                "parameters": [
                    "input"
                ],
                "docstring": "The database access object factory to associate this with a runtime context."
            },
            {
                "method_name": "getPid",
                "parameters": [],
                "docstring": "Stores the MID of the patient associated with this action."
            }
        ],
        "attributes": [
            "factory",
            "pid"
        ],
        "docstring": "An abstract class for dealing with actions that require an associated patient. The concrete functionality   provided by this class allows for asserting the correctness and existence of patients' MIDs.      Use this class whenever your JSP requires a patient ID when it loads (e.g. editPatient.jsp). The patient   string is passed to the constructor of this class and is checked for both format and existence. If the   patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the   home page.      Very similar to {@link PersonnelBaseAction} and {@link OfficeVisitBaseAction}      Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this   class."
    },
    {
        "class_name": "PersonnelBaseAction",
        "methods": [
            {
                "method_name": "checkPersonnelID",
                "parameters": [
                    "input"
                ],
                "docstring": "The database access object factory to associate this with a runtime context."
            },
            {
                "method_name": "getPid",
                "parameters": [],
                "docstring": "Stores the MID of the personnel associated with this action."
            }
        ],
        "attributes": [
            "factory",
            "pid"
        ],
        "docstring": "An abstract class for dealing with actions that require an associated personnel. The concrete functionality   provided by this class allows for asserting the correctness and existence of personnel' MIDs.      Use this class whenever your JSP requires a personnel ID when it loads (e.g. editPatient.jsp). The patient   string is passed to the constructor of this class and is checked for both format and existence. If the   patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the   home page.      Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this   class.      Very similar to {@link PatientBaseAction}"
    },
    {
        "class_name": "AdverseEventBean",
        "methods": [
            {
                "method_name": "getPrescriber",
                "parameters": [],
                "docstring": "@return the id"
            },
            {
                "method_name": "setPrescriber",
                "parameters": [
                    "prescriber"
                ],
                "docstring": "@param id the id to set"
            },
            {
                "method_name": "getStatus",
                "parameters": [],
                "docstring": "@return the date"
            },
            {
                "method_name": "setStatus",
                "parameters": [
                    "status"
                ],
                "docstring": "@param date the date to set"
            },
            {
                "method_name": "getId",
                "parameters": [],
                "docstring": "@return the patient MID"
            },
            {
                "method_name": "setId",
                "parameters": [
                    "id"
                ],
                "docstring": "@param mID the patients MID"
            },
            {
                "method_name": "getDate",
                "parameters": [],
                "docstring": "@return the drug the event is being reported for"
            },
            {
                "method_name": "setDate",
                "parameters": [
                    "date"
                ],
                "docstring": "@param drug sets the drug the event is being reported for"
            },
            {
                "method_name": "getCode",
                "parameters": [],
                "docstring": "@return the description"
            },
            {
                "method_name": "setCode",
                "parameters": [
                    "code"
                ],
                "docstring": "@param description the description to set"
            },
            {
                "method_name": "getMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMID",
                "parameters": [
                    "mID"
                ],
                "docstring": null
            },
            {
                "method_name": "getDrug",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDrug",
                "parameters": [
                    "drug"
                ],
                "docstring": null
            },
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDescription",
                "parameters": [
                    "description"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "MID",
            "drug",
            "description",
            "code",
            "date",
            "status",
            "Prescriber",
            "id"
        ],
        "docstring": "A bean for storing data about a adverse event based on a drug.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "AllergyBean",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDescription",
                "parameters": [
                    "description"
                ],
                "docstring": null
            },
            {
                "method_name": "getFirstFound",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setFirstFound",
                "parameters": [
                    "firstFound"
                ],
                "docstring": null
            },
            {
                "method_name": "getId",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setId",
                "parameters": [
                    "id"
                ],
                "docstring": null
            },
            {
                "method_name": "toString",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPatientID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientID",
                "parameters": [
                    "patientID"
                ],
                "docstring": null
            },
            {
                "method_name": "getFirstFoundStr",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "id",
            "patientID",
            "description",
            "firstFound"
        ],
        "docstring": "A bean for storing data about Allergies.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "ApptBean",
        "methods": [
            {
                "method_name": "getApptType",
                "parameters": [],
                "docstring": "@param apptType the apptType to set"
            },
            {
                "method_name": "setApptType",
                "parameters": [
                    "apptType"
                ],
                "docstring": "@return the patient"
            },
            {
                "method_name": "getPatient",
                "parameters": [],
                "docstring": "@param patient the patient to set"
            },
            {
                "method_name": "setPatient",
                "parameters": [
                    "patient"
                ],
                "docstring": "@return the hcp"
            },
            {
                "method_name": "getHcp",
                "parameters": [],
                "docstring": "@param hcp the hcp to set"
            },
            {
                "method_name": "setHcp",
                "parameters": [
                    "hcp"
                ],
                "docstring": "@return the date"
            },
            {
                "method_name": "getDate",
                "parameters": [],
                "docstring": "@param date the date to set"
            },
            {
                "method_name": "setDate",
                "parameters": [
                    "date"
                ],
                "docstring": "@return the comment"
            },
            {
                "method_name": "getComment",
                "parameters": [],
                "docstring": "@param comment the comment to set"
            },
            {
                "method_name": "setComment",
                "parameters": [
                    "comment"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "apptType",
            "patient",
            "hcp",
            "date",
            "comment"
        ],
        "docstring": "@return the apptType"
    },
    {
        "class_name": "ApptTypeBean",
        "methods": [
            {
                "method_name": "getName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setName",
                "parameters": [
                    "name"
                ],
                "docstring": null
            },
            {
                "method_name": "getDuration",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDuration",
                "parameters": [
                    "duration"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "name",
            "duration"
        ],
        "docstring": null
    },
    {
        "class_name": "DiagnosisBean",
        "methods": [
            {
                "method_name": "getICDCode",
                "parameters": [],
                "docstring": "This functionality will be moved elsewhere."
            },
            {
                "method_name": "setICDCode",
                "parameters": [
                    "code"
                ],
                "docstring": "Gets the ICD Code for this procedure \t   \t  @return The ICD Code for this procedure"
            },
            {
                "method_name": "getClassification",
                "parameters": [],
                "docstring": "Gets the ICD Description for this procedure \t   \t  @return The ICD Description for this procedure"
            },
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": "Optional - for use with editing an office visit \t   \t  @return"
            },
            {
                "method_name": "setDescription",
                "parameters": [
                    "description"
                ],
                "docstring": null
            },
            {
                "method_name": "getFormattedDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getOvDiagnosisID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setOvDiagnosisID",
                "parameters": [
                    "ovDiagnosisID"
                ],
                "docstring": null
            },
            {
                "method_name": "setVisitID",
                "parameters": [
                    "vid"
                ],
                "docstring": null
            },
            {
                "method_name": "getVisitID",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "ovDiagnosisID",
            "icdCode",
            "description",
            "classification",
            "visitID"
        ],
        "docstring": "A bean for storing data about Diagnosis.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "DrugInteractionBean",
        "methods": [
            {
                "method_name": "getFirstDrug",
                "parameters": [],
                "docstring": "@return the firstDrug"
            },
            {
                "method_name": "setFirstDrug",
                "parameters": [
                    "firstDrug"
                ],
                "docstring": "@param firstDrug the firstDrug to set"
            },
            {
                "method_name": "getSecondDrug",
                "parameters": [],
                "docstring": "@return the secondDrug"
            },
            {
                "method_name": "setSecondDrug",
                "parameters": [
                    "secondDrug"
                ],
                "docstring": "@param secondDrug the secondDrug to set"
            },
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": "@return the description"
            },
            {
                "method_name": "setDescription",
                "parameters": [
                    "description"
                ],
                "docstring": "@param description the description to set"
            }
        ],
        "attributes": [
            "firstDrug",
            "secondDrug",
            "description"
        ],
        "docstring": "A bean for storing data about a message from one user to another.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "Email",
        "methods": [
            {
                "method_name": "getToList",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setToList",
                "parameters": [
                    "toList"
                ],
                "docstring": null
            },
            {
                "method_name": "getToListStr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getFrom",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setFrom",
                "parameters": [
                    "from"
                ],
                "docstring": null
            },
            {
                "method_name": "getSubject",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSubject",
                "parameters": [
                    "subject"
                ],
                "docstring": null
            },
            {
                "method_name": "getBody",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setBody",
                "parameters": [
                    "body"
                ],
                "docstring": null
            },
            {
                "method_name": "getTimeAdded",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTimeAdded",
                "parameters": [
                    "timeAdded"
                ],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "obj"
                ],
                "docstring": null
            },
            {
                "method_name": "hashCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            },
            {
                "method_name": "listEquals",
                "parameters": [
                    "toList",
                    "otherToList"
                ],
                "docstring": null
            },
            {
                "method_name": "toString",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "toList",
            "from",
            "subject",
            "body",
            "timeAdded"
        ],
        "docstring": "A bean for storing data about Fake Emails.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "FamilyMemberBean",
        "methods": [
            {
                "method_name": "getFirstName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setFirstName",
                "parameters": [
                    "firstName"
                ],
                "docstring": null
            },
            {
                "method_name": "getLastName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastName",
                "parameters": [
                    "lastName"
                ],
                "docstring": null
            },
            {
                "method_name": "getFullName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getMid",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMid",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            },
            {
                "method_name": "getRelation",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRelation",
                "parameters": [
                    "relation"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "mid",
            "relation",
            "firstName",
            "lastName"
        ],
        "docstring": "A bean for storing data about Family Members.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "HCPDiagnosisBean",
        "methods": [
            {
                "method_name": "getHCP",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCP",
                "parameters": [
                    "hcp"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPName",
                "parameters": [
                    "name"
                ],
                "docstring": null
            },
            {
                "method_name": "getNumPatients",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "incNumPatients",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getMedList",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMedList",
                "parameters": [
                    "medlist"
                ],
                "docstring": null
            },
            {
                "method_name": "getLabList",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLabList",
                "parameters": [
                    "lablist"
                ],
                "docstring": null
            },
            {
                "method_name": "getVisitSatisfaction",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setVisitSat",
                "parameters": [
                    "sat"
                ],
                "docstring": null
            },
            {
                "method_name": "getTreatmentSatisfaction",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTreatmentSat",
                "parameters": [
                    "sat"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "HCPID",
            "HCPname",
            "numPatients",
            "medList",
            "labList",
            "visitSat",
            "treatmentSat",
            "surveyCount"
        ],
        "docstring": "A bean for storing data about the diagnosis given by an HCP.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "HCPLinkBean",
        "methods": [
            {
                "method_name": "isChecked",
                "parameters": [],
                "docstring": "@return the patient MID"
            },
            {
                "method_name": "setChecked",
                "parameters": [
                    "checked"
                ],
                "docstring": "@param mID the patients MID"
            },
            {
                "method_name": "getCode",
                "parameters": [],
                "docstring": "@return the drug the event is being reported for"
            },
            {
                "method_name": "setCode",
                "parameters": [
                    "code"
                ],
                "docstring": "@param drug sets the drug the event is being reported for"
            },
            {
                "method_name": "getPrescriberMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPrescriberMID",
                "parameters": [
                    "mID"
                ],
                "docstring": null
            },
            {
                "method_name": "getDrug",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDrug",
                "parameters": [
                    "drug"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "prescriberMID",
            "drug",
            "checked",
            "code"
        ],
        "docstring": "A mini-bean to pass data between viewPrescriptionRecords.jsp and reportAdverseEvent.jsp      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "HCPVisitBean",
        "methods": [
            {
                "method_name": "setHCPMID",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getHCPName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPName",
                "parameters": [
                    "name"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPSpecialty",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPSpecialty",
                "parameters": [
                    "specialty"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPAddr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPAddr",
                "parameters": [
                    "addr"
                ],
                "docstring": null
            },
            {
                "method_name": "getOVDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setOVDate",
                "parameters": [
                    "date"
                ],
                "docstring": null
            },
            {
                "method_name": "isDesignated",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDesignated",
                "parameters": [
                    "val"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "HCPName",
            "HCPSpecialty",
            "HCPAddr",
            "OVDate",
            "designated",
            "hcpMID"
        ],
        "docstring": "A bean for storing data about a visit with an HCP.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "HealthRecord",
        "methods": [
            {
                "method_name": "getBloodPressureD",
                "parameters": [],
                "docstring": "Note that this is a simplistic view. See the Wikipedia article on cholesterol. \t   \t  @return"
            },
            {
                "method_name": "setBloodPressureD",
                "parameters": [
                    "bloodPressureD"
                ],
                "docstring": null
            },
            {
                "method_name": "setBloodPressureSystolic",
                "parameters": [
                    "bloodPressure"
                ],
                "docstring": null
            },
            {
                "method_name": "setBloodPressureDiastolic",
                "parameters": [
                    "bloodPressure"
                ],
                "docstring": null
            },
            {
                "method_name": "getBloodPressureN",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getBloodPressureSystolic",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getBloodPressureDiastolic",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setBloodPressureN",
                "parameters": [
                    "bloodPressureN"
                ],
                "docstring": null
            },
            {
                "method_name": "getBloodPressure",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getCholesterolHDL",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCholesterolHDL",
                "parameters": [
                    "cholesterolHDL"
                ],
                "docstring": null
            },
            {
                "method_name": "getCholesterolLDL",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCholesterolLDL",
                "parameters": [
                    "cholesterolLDL"
                ],
                "docstring": null
            },
            {
                "method_name": "getCholesterolTri",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCholesterolTri",
                "parameters": [
                    "cholesterolTri"
                ],
                "docstring": null
            },
            {
                "method_name": "getTotalCholesterol",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDateRecorded",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDateRecorded",
                "parameters": [
                    "dateRecorded"
                ],
                "docstring": null
            },
            {
                "method_name": "getHeight",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHeight",
                "parameters": [
                    "height"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatientID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientID",
                "parameters": [
                    "patientID"
                ],
                "docstring": null
            },
            {
                "method_name": "getPersonnelID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPersonnelID",
                "parameters": [
                    "personnelID"
                ],
                "docstring": null
            },
            {
                "method_name": "isSmoker",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSmoker",
                "parameters": [
                    "smoker"
                ],
                "docstring": null
            },
            {
                "method_name": "getWeight",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setWeight",
                "parameters": [
                    "weight"
                ],
                "docstring": null
            },
            {
                "method_name": "getBodyMassIndex",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "patientID",
            "height",
            "weight",
            "isSmoker",
            "bloodPressureN",
            "bloodPressureD",
            "cholesterolHDL",
            "cholesterolLDL",
            "cholesterolTri",
            "personnelID",
            "dateRecorded"
        ],
        "docstring": "A bean for storing health record data.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "HospitalBean",
        "methods": [
            {
                "method_name": "getHospitalID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHospitalID",
                "parameters": [
                    "hospitalID"
                ],
                "docstring": null
            },
            {
                "method_name": "getHospitalName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHospitalName",
                "parameters": [
                    "hospitalName"
                ],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "obj"
                ],
                "docstring": null
            },
            {
                "method_name": "hashCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "hospitalID",
            "hospitalName"
        ],
        "docstring": "A bean for storing data about a hospital.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "LabProcedureBean",
        "methods": [
            {
                "method_name": "getPid",
                "parameters": [],
                "docstring": "Unique 10-digit number that does not start with 9"
            },
            {
                "method_name": "setPid",
                "parameters": [
                    "pid"
                ],
                "docstring": "Unique identifier for a laboratory procedure of a patient"
            },
            {
                "method_name": "getProcedureID",
                "parameters": [],
                "docstring": "Digits of the format nnnnn-n"
            },
            {
                "method_name": "setProcedureID",
                "parameters": [
                    "procedureID"
                ],
                "docstring": "One of (NOT YET RECEIVED, PENDING, COMPLETED)"
            },
            {
                "method_name": "getLoinc",
                "parameters": [],
                "docstring": "Up to 500 alphanumeric characters"
            },
            {
                "method_name": "setLoinc",
                "parameters": [
                    "loinc"
                ],
                "docstring": "Up to 500 alphanumeric characters"
            },
            {
                "method_name": "getStatus",
                "parameters": [],
                "docstring": "Office VisitID\tIdentifier that specifies the office visit in  \t   which the laboratory procedure was ordered"
            },
            {
                "method_name": "setStatus",
                "parameters": [
                    "status"
                ],
                "docstring": "Date/Time of last status update \tTimestamp"
            },
            {
                "method_name": "getCommentary",
                "parameters": [],
                "docstring": "permission granted by lhcp who ordered test: \t   \"ALLOWED\", \"RESTRICTED\""
            },
            {
                "method_name": "setCommentary",
                "parameters": [
                    "commentary"
                ],
                "docstring": "Unique 10-digit number that does not start with 9"
            },
            {
                "method_name": "getResults",
                "parameters": [],
                "docstring": "Unique 10-digit number that does not start with 9"
            },
            {
                "method_name": "setResults",
                "parameters": [
                    "results"
                ],
                "docstring": "Unique identifier for a laboratory procedure of a patient"
            },
            {
                "method_name": "getOvID",
                "parameters": [],
                "docstring": "Unique identifier for a laboratory procedure of a patient"
            },
            {
                "method_name": "setOvID",
                "parameters": [
                    "ovID"
                ],
                "docstring": "Digits of the format nnnnn-n"
            },
            {
                "method_name": "getTimestamp",
                "parameters": [],
                "docstring": "Digits of the format nnnnn-n"
            },
            {
                "method_name": "setTimestamp",
                "parameters": [
                    "timestamp"
                ],
                "docstring": "One of (NOT YET RECEIVED, PENDING, COMPLETED)"
            },
            {
                "method_name": "getRights",
                "parameters": [],
                "docstring": "One of (NOT YET RECEIVED, PENDING, COMPLETED)"
            },
            {
                "method_name": "setRights",
                "parameters": [
                    "rights"
                ],
                "docstring": "Up to 500 alphanumeric characters"
            },
            {
                "method_name": "allow",
                "parameters": [],
                "docstring": "Up to 500 alphanumeric characters"
            },
            {
                "method_name": "restrict",
                "parameters": [],
                "docstring": "Up to 500 alphanumeric characters"
            },
            {
                "method_name": "statusComplete",
                "parameters": [],
                "docstring": "Up to 500 alphanumeric characters"
            },
            {
                "method_name": "statusPending",
                "parameters": [],
                "docstring": "Office VisitID\tIdentifier that specifies the office visit in  \t   which the laboratory procedure was ordered"
            },
            {
                "method_name": "statusNotReceived",
                "parameters": [],
                "docstring": "Office VisitID\tIdentifier that specifies the office visit in  \t   which the laboratory procedure was ordered"
            }
        ],
        "attributes": [
            "Not_Received",
            "Pending",
            "Completed",
            "Allow",
            "Restrict",
            "pid",
            "procedureID",
            "loinc",
            "status",
            "commentary",
            "results",
            "ovID",
            "timestamp",
            "rights"
        ],
        "docstring": "A bean for storing data about a lab procedure.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "LOINCbean",
        "methods": [
            {
                "method_name": "getLabProcedureCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLabProcedureCode",
                "parameters": [
                    "aLabProcedureCode"
                ],
                "docstring": null
            },
            {
                "method_name": "getComponent",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setComponent",
                "parameters": [
                    "aComponent"
                ],
                "docstring": null
            },
            {
                "method_name": "getKindOfProperty",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setKindOfProperty",
                "parameters": [
                    "aKindOfProperty"
                ],
                "docstring": null
            },
            {
                "method_name": "getTimeAspect",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTimeAspect",
                "parameters": [
                    "aTimeAspect"
                ],
                "docstring": null
            },
            {
                "method_name": "getSystem",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSystem",
                "parameters": [
                    "aSystem"
                ],
                "docstring": null
            },
            {
                "method_name": "getScaleType",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setScaleType",
                "parameters": [
                    "aScaleType"
                ],
                "docstring": null
            },
            {
                "method_name": "getMethodType",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMethodType",
                "parameters": [
                    "aMethodType"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "labProcedureCode",
            "component",
            "kindOfProperty",
            "timeAspect",
            "system",
            "scaleType",
            "methodType"
        ],
        "docstring": "A bean for storing data about Lab Procedure Codes.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "MedicationBean",
        "methods": [
            {
                "method_name": "getNDCode",
                "parameters": [],
                "docstring": "Gets the ND Code for this procedure \t   \t  @return The ND Code for this procedure"
            },
            {
                "method_name": "setNDCode",
                "parameters": [
                    "code"
                ],
                "docstring": "Gets the ND Description for this procedure \t   \t  @return The ND Description for this procedure"
            },
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDescription",
                "parameters": [
                    "description"
                ],
                "docstring": null
            },
            {
                "method_name": "getNDCodeFormatted",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            },
            {
                "method_name": "hashCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "NDCode",
            "description"
        ],
        "docstring": "A medication is the same thing as an ND code - it's like \"Aspirin\". A medication is not associated with an   office visit; that's a \"prescription\". See {@link PrescriptionBean}      @author Andy Meneely"
    },
    {
        "class_name": "MessageBean",
        "methods": [
            {
                "method_name": "getTo",
                "parameters": [],
                "docstring": "Gets the MIDs of the recipients for this Message \t  @return"
            },
            {
                "method_name": "setTo",
                "parameters": [
                    "to"
                ],
                "docstring": "Sets the MIDs of the recipients for this Message \t  @param to"
            },
            {
                "method_name": "getMessageId",
                "parameters": [],
                "docstring": "Gets the MID of the sender for this message \t  @return"
            },
            {
                "method_name": "setMessageId",
                "parameters": [
                    "id"
                ],
                "docstring": "Sets the MID of the sender for this message \t  @param from"
            },
            {
                "method_name": "getParentMessageId",
                "parameters": [],
                "docstring": "Gets the subject of this message \t  @return"
            },
            {
                "method_name": "setParentMessageId",
                "parameters": [
                    "parentMsgId"
                ],
                "docstring": "Sets the subject of this message \t  @param subject"
            },
            {
                "method_name": "getFrom",
                "parameters": [],
                "docstring": "Gets the body of this message \t  @return"
            },
            {
                "method_name": "setFrom",
                "parameters": [
                    "from"
                ],
                "docstring": "Sets the body of this message \t  @param body"
            },
            {
                "method_name": "getSubject",
                "parameters": [],
                "docstring": "Gets the time for this message \t  @return"
            },
            {
                "method_name": "setSubject",
                "parameters": [
                    "subject"
                ],
                "docstring": "Sets the time for this message \t  @param timestamp"
            },
            {
                "method_name": "getBody",
                "parameters": [],
                "docstring": "Gets read for this message \t  @return"
            },
            {
                "method_name": "setBody",
                "parameters": [
                    "body"
                ],
                "docstring": "Sets read for this message \t  @param read"
            },
            {
                "method_name": "getSentDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSentDate",
                "parameters": [
                    "timestamp"
                ],
                "docstring": null
            },
            {
                "method_name": "getRead",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRead",
                "parameters": [
                    "read"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "to",
            "from",
            "id",
            "parentMsgId",
            "subject",
            "body",
            "timestamp",
            "read"
        ],
        "docstring": "A bean for storing data about a message from one user to another.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "OfficeVisitBean",
        "methods": [
            {
                "method_name": "getID",
                "parameters": [],
                "docstring": "For use ONLY by DAOs \t   \t  @param visitID"
            },
            {
                "method_name": "getPatientID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getHcpID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getNotes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getVisitDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getVisitDateStr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDiagnoses",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPrescriptions",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getProcedures",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getVisitID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDiagnoses",
                "parameters": [
                    "diagnoses"
                ],
                "docstring": null
            },
            {
                "method_name": "setHcpID",
                "parameters": [
                    "hcpID"
                ],
                "docstring": null
            },
            {
                "method_name": "setPrescriptions",
                "parameters": [
                    "prescriptions"
                ],
                "docstring": null
            },
            {
                "method_name": "setNotes",
                "parameters": [
                    "notes"
                ],
                "docstring": null
            },
            {
                "method_name": "setPatientID",
                "parameters": [
                    "patientID"
                ],
                "docstring": null
            },
            {
                "method_name": "setProcedures",
                "parameters": [
                    "procedures"
                ],
                "docstring": null
            },
            {
                "method_name": "setVisitDateStr",
                "parameters": [
                    "visitDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getHospitalID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHospitalID",
                "parameters": [
                    "hospitalID"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "visitID",
            "patientID",
            "hcpID",
            "notes",
            "visitDateStr",
            "hospitalID",
            "diagnoses",
            "prescriptions",
            "procedures"
        ],
        "docstring": "A bean for storing data about an office visit at the hospital.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "OperationalProfile",
        "methods": [
            {
                "method_name": "createEmptyMap",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getTotalCount",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTotalCount",
                "parameters": [
                    "totalCount"
                ],
                "docstring": null
            },
            {
                "method_name": "getPersonnelCount",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPersonnelCount",
                "parameters": [
                    "personnelCount"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatientCount",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientCount",
                "parameters": [
                    "patientCount"
                ],
                "docstring": null
            },
            {
                "method_name": "setNumTotalTransactions",
                "parameters": [
                    "numTransactions"
                ],
                "docstring": null
            },
            {
                "method_name": "getNumTotalTransactions",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getNumPatientTransactions",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setNumPatientTransactions",
                "parameters": [
                    "numPatientTransactions"
                ],
                "docstring": null
            },
            {
                "method_name": "getNumPersonnelTransactions",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setNumPersonnelTransactions",
                "parameters": [
                    "numPersonnelTransactions"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "numTotalTransactions",
            "numPatientTransactions",
            "numPersonnelTransactions",
            "totalCount",
            "personnelCount",
            "patientCount"
        ],
        "docstring": "A bean for storing operational profile data.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "PatientBean",
        "methods": [
            {
                "method_name": "getMessageFilter",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMessageFilter",
                "parameters": [
                    "messageFilter"
                ],
                "docstring": null
            },
            {
                "method_name": "getBloodType",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setBloodTypeStr",
                "parameters": [
                    "bloodType"
                ],
                "docstring": null
            },
            {
                "method_name": "setBloodType",
                "parameters": [
                    "bloodType"
                ],
                "docstring": null
            },
            {
                "method_name": "getCauseOfDeath",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCauseOfDeath",
                "parameters": [
                    "causeOfDeath"
                ],
                "docstring": null
            },
            {
                "method_name": "getCity",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCity",
                "parameters": [
                    "city"
                ],
                "docstring": null
            },
            {
                "method_name": "getDateOfBirthStr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDateOfBirth",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDateOfDeath",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDateOfBirthStr",
                "parameters": [
                    "dateOfBirthStr"
                ],
                "docstring": null
            },
            {
                "method_name": "getAge",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getAgeInDays",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getAgeInWeeks",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDateOfDeathStr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDateOfDeathStr",
                "parameters": [
                    "dateOfDeathStr"
                ],
                "docstring": null
            },
            {
                "method_name": "getEmail",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEmail",
                "parameters": [
                    "email"
                ],
                "docstring": null
            },
            {
                "method_name": "getEmergencyName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEmergencyName",
                "parameters": [
                    "emergencyName"
                ],
                "docstring": null
            },
            {
                "method_name": "getEthnicity",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEthnicityStr",
                "parameters": [
                    "ethnicity"
                ],
                "docstring": null
            },
            {
                "method_name": "setEthnicity",
                "parameters": [
                    "ethnicity"
                ],
                "docstring": null
            },
            {
                "method_name": "getFatherMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setFatherMID",
                "parameters": [
                    "fatherMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getFullName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getFirstName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setFirstName",
                "parameters": [
                    "firstName"
                ],
                "docstring": null
            },
            {
                "method_name": "getGender",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setGenderStr",
                "parameters": [
                    "gender"
                ],
                "docstring": null
            },
            {
                "method_name": "setGender",
                "parameters": [
                    "gender"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcAddress1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcAddress1",
                "parameters": [
                    "icAddress1"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcAddress2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcAddress2",
                "parameters": [
                    "icAddress2"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcAddress3",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getIcCity",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcCity",
                "parameters": [
                    "icCity"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcID",
                "parameters": [
                    "icID"
                ],
                "docstring": null
            },
            {
                "method_name": "getCreditCardType",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCreditCardType",
                "parameters": [
                    "creditCardType"
                ],
                "docstring": null
            },
            {
                "method_name": "getCreditCardNumber",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCreditCardNumber",
                "parameters": [
                    "creditCardNumber"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcName",
                "parameters": [
                    "icName"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcZip",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getIcZip1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcZip1",
                "parameters": [
                    "icZip1"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcZip2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcZip2",
                "parameters": [
                    "icZip2"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcState",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcState",
                "parameters": [
                    "icState"
                ],
                "docstring": null
            },
            {
                "method_name": "getLastName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastName",
                "parameters": [
                    "lastName"
                ],
                "docstring": null
            },
            {
                "method_name": "getMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMID",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            },
            {
                "method_name": "getMotherMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMotherMID",
                "parameters": [
                    "motherMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getPhone",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPhone1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPhone2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPhone3",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPhone1",
                "parameters": [
                    "phone1"
                ],
                "docstring": null
            },
            {
                "method_name": "setPhone2",
                "parameters": [
                    "phone2"
                ],
                "docstring": null
            },
            {
                "method_name": "setPhone3",
                "parameters": [
                    "phone3"
                ],
                "docstring": null
            },
            {
                "method_name": "getSecurityAnswer",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSecurityAnswer",
                "parameters": [
                    "securityAnswer"
                ],
                "docstring": null
            },
            {
                "method_name": "getSecurityQuestion",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSecurityQuestion",
                "parameters": [
                    "securityQuestion"
                ],
                "docstring": null
            },
            {
                "method_name": "getState",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setState",
                "parameters": [
                    "state"
                ],
                "docstring": null
            },
            {
                "method_name": "getStreetAddress1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStreetAddress1",
                "parameters": [
                    "streetAddress1"
                ],
                "docstring": null
            },
            {
                "method_name": "getStreetAddress2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStreetAddress2",
                "parameters": [
                    "streetAddress2"
                ],
                "docstring": null
            },
            {
                "method_name": "getStreetAddress3",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getTopicalNotes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTopicalNotes",
                "parameters": [
                    "topicalNotes"
                ],
                "docstring": null
            },
            {
                "method_name": "getZip",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getZip1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setZip1",
                "parameters": [
                    "zip1"
                ],
                "docstring": null
            },
            {
                "method_name": "getZip2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setZip2",
                "parameters": [
                    "zip2"
                ],
                "docstring": null
            },
            {
                "method_name": "getEmergencyPhone",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getEmergencyPhone1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEmergencyPhone1",
                "parameters": [
                    "emergencyPhone1"
                ],
                "docstring": null
            },
            {
                "method_name": "getEmergencyPhone2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEmergencyPhone2",
                "parameters": [
                    "emergencyPhone2"
                ],
                "docstring": null
            },
            {
                "method_name": "getEmergencyPhone3",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEmergencyPhone3",
                "parameters": [
                    "emergencyPhone3"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcPhone",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getIcPhone1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcPhone1",
                "parameters": [
                    "icPhone1"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcPhone2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcPhone2",
                "parameters": [
                    "icPhone2"
                ],
                "docstring": null
            },
            {
                "method_name": "getIcPhone3",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIcPhone3",
                "parameters": [
                    "icPhone3"
                ],
                "docstring": null
            },
            {
                "method_name": "getConfirmPassword",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setConfirmPassword",
                "parameters": [
                    "confirmPassword"
                ],
                "docstring": null
            },
            {
                "method_name": "getPassword",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPassword",
                "parameters": [
                    "password"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "serialVersionUID",
            "MID",
            "firstName",
            "lastName",
            "email",
            "securityQuestion",
            "securityAnswer",
            "password",
            "confirmPassword",
            "streetAddress1",
            "streetAddress2",
            "city",
            "state",
            "zip1",
            "zip2",
            "phone1",
            "phone2",
            "phone3",
            "emergencyName",
            "emergencyPhone1",
            "emergencyPhone2",
            "emergencyPhone3",
            "icName",
            "icAddress1",
            "icAddress2",
            "icCity",
            "icState",
            "icZip1",
            "icZip2",
            "icPhone1",
            "icPhone2",
            "icPhone3",
            "icID",
            "creditCardType",
            "creditCardNumber",
            "dateOfBirthStr",
            "dateOfDeathStr",
            "causeOfDeath",
            "motherMID",
            "fatherMID",
            "bloodType",
            "ethnicity",
            "gender",
            "topicalNotes",
            "messageFilter"
        ],
        "docstring": "A bean for storing data about a patient.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "PatientVisitBean",
        "methods": [
            {
                "method_name": "getLastOVDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastOVDate",
                "parameters": [
                    "lastOVDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getLastOVDateM",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastOVDateM",
                "parameters": [
                    "lastOVDateM"
                ],
                "docstring": null
            },
            {
                "method_name": "getLastOVDateD",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastOVDateD",
                "parameters": [
                    "lastOVDateD"
                ],
                "docstring": null
            },
            {
                "method_name": "getLastOVDateY",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastOVDateY",
                "parameters": [
                    "lastOVDateY"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatientName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientName",
                "parameters": [
                    "patientName"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddress1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddress1",
                "parameters": [
                    "address1"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddress2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddress2",
                "parameters": [
                    "address2"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatient",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatient",
                "parameters": [
                    "patient"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "patient",
            "PatientName",
            "Address1",
            "Address2",
            "LastOVDateM",
            "LastOVDateD",
            "LastOVDateY",
            "LastOVDate"
        ],
        "docstring": "A bean for storing data about a patient's visit.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "PersonnelBean",
        "methods": [
            {
                "method_name": "getMessageFilter",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMessageFilter",
                "parameters": [
                    "messageFilter"
                ],
                "docstring": null
            },
            {
                "method_name": "getEmail",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEmail",
                "parameters": [
                    "email"
                ],
                "docstring": null
            },
            {
                "method_name": "getAMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAMID",
                "parameters": [
                    "amid"
                ],
                "docstring": null
            },
            {
                "method_name": "getCity",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCity",
                "parameters": [
                    "city"
                ],
                "docstring": null
            },
            {
                "method_name": "getConfirmPassword",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setConfirmPassword",
                "parameters": [
                    "confirmPassword"
                ],
                "docstring": null
            },
            {
                "method_name": "getFirstName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setFirstName",
                "parameters": [
                    "firstName"
                ],
                "docstring": null
            },
            {
                "method_name": "getLastName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLastName",
                "parameters": [
                    "lastName"
                ],
                "docstring": null
            },
            {
                "method_name": "getFullName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMID",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            },
            {
                "method_name": "getPassword",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPassword",
                "parameters": [
                    "password"
                ],
                "docstring": null
            },
            {
                "method_name": "getPhone",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPhone1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPhone1",
                "parameters": [
                    "phone1"
                ],
                "docstring": null
            },
            {
                "method_name": "getPhone2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPhone2",
                "parameters": [
                    "phone2"
                ],
                "docstring": null
            },
            {
                "method_name": "getPhone3",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPhone3",
                "parameters": [
                    "phone3"
                ],
                "docstring": null
            },
            {
                "method_name": "getRole",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRole",
                "parameters": [
                    "role"
                ],
                "docstring": null
            },
            {
                "method_name": "getSecurityAnswer",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSecurityAnswer",
                "parameters": [
                    "securityAnswer"
                ],
                "docstring": null
            },
            {
                "method_name": "getSecurityQuestion",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSecurityQuestion",
                "parameters": [
                    "securityQuestion"
                ],
                "docstring": null
            },
            {
                "method_name": "getState",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setState",
                "parameters": [
                    "state"
                ],
                "docstring": null
            },
            {
                "method_name": "getStreetAddress1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStreetAddress1",
                "parameters": [
                    "streetAddress1"
                ],
                "docstring": null
            },
            {
                "method_name": "getStreetAddress2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStreetAddress2",
                "parameters": [
                    "streetAddress2"
                ],
                "docstring": null
            },
            {
                "method_name": "getZip",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getZip1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setZip1",
                "parameters": [
                    "zip1"
                ],
                "docstring": null
            },
            {
                "method_name": "getZip2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setZip2",
                "parameters": [
                    "zip2"
                ],
                "docstring": null
            },
            {
                "method_name": "getSpecialty",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSpecialty",
                "parameters": [
                    "specialty"
                ],
                "docstring": null
            },
            {
                "method_name": "getIndexIn",
                "parameters": [
                    "list"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "serialVersionUID",
            "MID",
            "AMID",
            "role",
            "firstName",
            "lastName",
            "password",
            "confirmPassword",
            "securityQuestion",
            "securityAnswer",
            "streetAddress1",
            "streetAddress2",
            "city",
            "state",
            "zip1",
            "zip2",
            "phone1",
            "phone2",
            "phone3",
            "email",
            "specialty",
            "messageFilter"
        ],
        "docstring": "A bean for storing data about a hospital employee.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "PrescriptionBean",
        "methods": [
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            },
            {
                "method_name": "hashCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDosage",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDosage",
                "parameters": [
                    "dosage"
                ],
                "docstring": null
            },
            {
                "method_name": "getEndDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEndDateStr",
                "parameters": [
                    "endDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getInstructions",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setInstructions",
                "parameters": [
                    "instruction"
                ],
                "docstring": null
            },
            {
                "method_name": "getMedication",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setMedication",
                "parameters": [
                    "medication"
                ],
                "docstring": null
            },
            {
                "method_name": "getStartDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getStartDateStr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getEndDateStr",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStartDateStr",
                "parameters": [
                    "startDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getVisitID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setVisitID",
                "parameters": [
                    "visitID"
                ],
                "docstring": null
            },
            {
                "method_name": "getId",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setId",
                "parameters": [
                    "id"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "id",
            "medication",
            "visitID",
            "startDateStr",
            "endDateStr",
            "dosage",
            "instructions"
        ],
        "docstring": "A bean for storing data about a prescription.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "PrescriptionReportBean",
        "methods": [
            {
                "method_name": "getPrescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPrescription",
                "parameters": [
                    "prescription"
                ],
                "docstring": null
            },
            {
                "method_name": "getOfficeVisit",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setOfficeVisit",
                "parameters": [
                    "officeVisit"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "prescription",
            "officeVisit"
        ],
        "docstring": "This is the container bean for the Prescription Report requirement. It contains a PrescriptionBean (which   in turn contains a Medication Bean), and an office visit bean. <br />   <br />   This was made so that the prescription report could be done all in one clean query.<br />   <br />   See {@link PrescriptionBean} See {@link OfficeVisitBean}      @author Andy Meneely"
    },
    {
        "class_name": "ProcedureBean",
        "methods": [
            {
                "method_name": "getCPTCode",
                "parameters": [],
                "docstring": "Gets the CPT Code for this procedure \t   \t  @return The CPT Code for this procedure"
            },
            {
                "method_name": "setCPTCode",
                "parameters": [
                    "code"
                ],
                "docstring": "Gets the CPT Description for this procedure \t   \t  @return The CPT Description for this procedure"
            },
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": "Gets the HCP ID of the HCP administering the immunization \t  @return String"
            },
            {
                "method_name": "setDescription",
                "parameters": [
                    "description"
                ],
                "docstring": "Gets the CPT attribute, used to determine if this is an immunization \t  @return String"
            },
            {
                "method_name": "getHcpid",
                "parameters": [],
                "docstring": "Sets the CPT attribute, used to determine if this is an immunization \t  @param String"
            },
            {
                "method_name": "setHcpid",
                "parameters": [
                    "hcpid"
                ],
                "docstring": null
            },
            {
                "method_name": "getAttribute",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAttribute",
                "parameters": [
                    "attrib"
                ],
                "docstring": null
            },
            {
                "method_name": "getOvProcedureID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setOvProcedureID",
                "parameters": [
                    "ovProcedureID"
                ],
                "docstring": null
            },
            {
                "method_name": "getDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDate",
                "parameters": [
                    "d"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "ovProcedureID",
            "CPTCode",
            "description",
            "attribute",
            "date",
            "hcpid"
        ],
        "docstring": "A bean for storing data about a procedure.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "ReferralBean",
        "methods": [
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            },
            {
                "method_name": "equals",
                "parameters": [
                    "other"
                ],
                "docstring": null
            },
            {
                "method_name": "hashCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getId",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setId",
                "parameters": [
                    "id"
                ],
                "docstring": null
            },
            {
                "method_name": "getSenderID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSenderID",
                "parameters": [
                    "senderID"
                ],
                "docstring": null
            },
            {
                "method_name": "getReceiverID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setReceiverID",
                "parameters": [
                    "receiverID"
                ],
                "docstring": null
            },
            {
                "method_name": "getReferralDetails",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setReferralDetails",
                "parameters": [
                    "referralDetails"
                ],
                "docstring": null
            },
            {
                "method_name": "getConsultationDetails",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setConsultationDetails",
                "parameters": [
                    "consultationDetails"
                ],
                "docstring": null
            },
            {
                "method_name": "getStatus",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStatus",
                "parameters": [
                    "status"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatientID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientID",
                "parameters": [
                    "patientID"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "id",
            "patientID",
            "senderID",
            "receiverID",
            "referralDetails",
            "consultationDetails",
            "status"
        ],
        "docstring": "A bean for storing data about a medical referral.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "RemoteMonitoringDataBean",
        "methods": [
            {
                "method_name": "getReporterMID",
                "parameters": [],
                "docstring": "Constructor with no parameters"
            },
            {
                "method_name": "setReporterMID",
                "parameters": [
                    "reporterMID"
                ],
                "docstring": "Constructor with loggedInMID parameter"
            },
            {
                "method_name": "getPatientMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLoggedInMID",
                "parameters": [
                    "patientMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getTime",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTime",
                "parameters": [
                    "time"
                ],
                "docstring": null
            },
            {
                "method_name": "getSystolicBloodPressure",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSystolicBloodPressure",
                "parameters": [
                    "systolicBloodPressure"
                ],
                "docstring": null
            },
            {
                "method_name": "getDiastolicBloodPressure",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDiastolicBloodPressure",
                "parameters": [
                    "diastolicBloodPressure"
                ],
                "docstring": null
            },
            {
                "method_name": "getGlucoseLevel",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setGlucoseLevel",
                "parameters": [
                    "glucoseLevel"
                ],
                "docstring": null
            },
            {
                "method_name": "getReporterRole",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setReporterRole",
                "parameters": [
                    "reporterRole"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "patientMID",
            "time",
            "systolicBloodPressure",
            "diastolicBloodPressure",
            "glucoseLevel",
            "reporterRole",
            "reporterMID"
        ],
        "docstring": "A bean for storing remote monitoring data for patients.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "ReportRequestBean",
        "methods": [
            {
                "method_name": "setID",
                "parameters": [
                    "iD"
                ],
                "docstring": null
            },
            {
                "method_name": "getID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRequesterMID",
                "parameters": [
                    "requesterMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getRequesterMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientMID",
                "parameters": [
                    "patientMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatientMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRequestedDate",
                "parameters": [
                    "requestedDate"
                ],
                "docstring": null
            },
            {
                "method_name": "setRequestedDateString",
                "parameters": [
                    "s"
                ],
                "docstring": null
            },
            {
                "method_name": "getRequestedDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getRequestedDateString",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setViewedDate",
                "parameters": [
                    "viewedDate"
                ],
                "docstring": null
            },
            {
                "method_name": "setViewedDateString",
                "parameters": [
                    "s"
                ],
                "docstring": null
            },
            {
                "method_name": "getViewedDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getViewedDateString",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStatus",
                "parameters": [
                    "status"
                ],
                "docstring": null
            },
            {
                "method_name": "getStatus",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "ID",
            "requesterMID",
            "patientMID",
            "requestedDate",
            "viewedDate",
            "status",
            "dateFormat",
            "Requested",
            "Viewed"
        ],
        "docstring": "A bean for storing data about a report request.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "SecurityQA",
        "methods": [
            {
                "method_name": "getQuestion",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setQuestion",
                "parameters": [
                    "question"
                ],
                "docstring": null
            },
            {
                "method_name": "getAnswer",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAnswer",
                "parameters": [
                    "answer"
                ],
                "docstring": null
            },
            {
                "method_name": "getConfirmAnswer",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setConfirmAnswer",
                "parameters": [
                    "confirmAnswer"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "question",
            "answer",
            "confirmAnswer"
        ],
        "docstring": "A bean for storing data about a security question and answer.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "SurveyBean",
        "methods": [
            {
                "method_name": "setVisitID",
                "parameters": [
                    "iD"
                ],
                "docstring": null
            },
            {
                "method_name": "getVisitID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSurveyDate",
                "parameters": [
                    "surveyDate"
                ],
                "docstring": null
            },
            {
                "method_name": "setSurveyDateString",
                "parameters": [
                    "s"
                ],
                "docstring": null
            },
            {
                "method_name": "getSurveyDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getSurveyDateString",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setWaitingRoomMinutes",
                "parameters": [
                    "waitingRoomMinutes"
                ],
                "docstring": null
            },
            {
                "method_name": "getWaitingRoomMinutes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setExamRoomMinutes",
                "parameters": [
                    "examRoomMinutes"
                ],
                "docstring": null
            },
            {
                "method_name": "getExamRoomMinutes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setVisitSatisfaction",
                "parameters": [
                    "visitSatisfaction"
                ],
                "docstring": null
            },
            {
                "method_name": "getVisitSatisfaction",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTreatmentSatisfaction",
                "parameters": [
                    "treatmentSatisfaction"
                ],
                "docstring": null
            },
            {
                "method_name": "getTreatmentSatisfaction",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "visitID",
            "surveyDate",
            "waitingRoomMinutes",
            "examRoomMinutes",
            "visitSatisfaction",
            "treatmentSatisfaction",
            "dateFormat"
        ],
        "docstring": "A bean for storing survey data associated with an office visit.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "SurveyResultBean",
        "methods": [
            {
                "method_name": "setHCPMID",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPFirstName",
                "parameters": [
                    "firstName"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPFirstName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPLastName",
                "parameters": [
                    "lastName"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPLastName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPaddress1",
                "parameters": [
                    "address1"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPaddress1",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPaddress2",
                "parameters": [
                    "address2"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPaddress2",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPcity",
                "parameters": [
                    "city"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPcity",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPstate",
                "parameters": [
                    "state"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPstate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPzip",
                "parameters": [
                    "zip"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPzip",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPspecialty",
                "parameters": [
                    "specialty"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPspecialty",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHCPhospital",
                "parameters": [
                    "hospital"
                ],
                "docstring": null
            },
            {
                "method_name": "getHCPhospital",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAvgWaitingRoomMinutes",
                "parameters": [
                    "waitingRoomMinutes"
                ],
                "docstring": null
            },
            {
                "method_name": "getAvgWaitingRoomMinutes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAvgExamRoomMinutes",
                "parameters": [
                    "examRoomMinutes"
                ],
                "docstring": null
            },
            {
                "method_name": "getAvgExamRoomMinutes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAvgVisitSatisfaction",
                "parameters": [
                    "visitSatisfaction"
                ],
                "docstring": null
            },
            {
                "method_name": "getAvgVisitSatisfaction",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAvgTreatmentSatisfaction",
                "parameters": [
                    "treatmentSatisfaction"
                ],
                "docstring": null
            },
            {
                "method_name": "getAvgTreatmentSatisfaction",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPercentSatisfactionResults",
                "parameters": [
                    "percent"
                ],
                "docstring": null
            },
            {
                "method_name": "getPercentSatisfactionResults",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "hcpMID",
            "hcpFirstName",
            "hcpLastName",
            "hcpAddress1",
            "hcpAddress2",
            "hcpCity",
            "hcpState",
            "hcpZip",
            "hcpSpecialty",
            "hcpHospitalID",
            "avgWaitingRmMinutes",
            "avgExamRmMinutues",
            "avgVisitSatisfaction",
            "avgTreatmentSatisfaction",
            "percentSatResultsAvailable",
            "GENERAL_SPECIALTY",
            "SURGEON_SPECIALTY",
            "HEART_SPECIALTY",
            "PEDIATRICIAN_SPECIALTY",
            "OBGYN_SPECIALTY",
            "ANY_SPECIALTY"
        ],
        "docstring": "Bean to be used for survey results (search).  Stores address information about a HCP   in addition to their specialty, hospital, and averages from survey (results range from 1-5).  This   beans also contains a variable that stores the percent of office visits that satisfaction results are    available."
    },
    {
        "class_name": "TransactionBean",
        "methods": [
            {
                "method_name": "getRole",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRole",
                "parameters": [
                    "role"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddedInfo",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddedInfo",
                "parameters": [
                    "addedInfo"
                ],
                "docstring": null
            },
            {
                "method_name": "getLoggedInMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setLoggedInMID",
                "parameters": [
                    "loggedInMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getSecondaryMID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setSecondaryMID",
                "parameters": [
                    "secondaryMID"
                ],
                "docstring": null
            },
            {
                "method_name": "getTimeLogged",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTimeLogged",
                "parameters": [
                    "timeLogged"
                ],
                "docstring": null
            },
            {
                "method_name": "getTransactionType",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTransactionType",
                "parameters": [
                    "tranactionType"
                ],
                "docstring": null
            },
            {
                "method_name": "getTransactionID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setTransactionID",
                "parameters": [
                    "transactionID"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "transactionID",
            "loggedInMID",
            "secondaryMID",
            "transactionType",
            "timeLogged",
            "addedInfo",
            "role"
        ],
        "docstring": "A bean for storing data about a transaction that occurred within iTrust.      A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean    (with the exception of minor formatting such as concatenating phone numbers together).    A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters    to create these easily)"
    },
    {
        "class_name": "EditOfficeVisitForm",
        "methods": [
            {
                "method_name": "getAddDiagID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddDiagID",
                "parameters": [
                    "addDiagID"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddLabProcID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddLabProcID",
                "parameters": [
                    "addLabProcID"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddMedID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddMedID",
                "parameters": [
                    "addMedID"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddProcID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddProcID",
                "parameters": [
                    "addProcID"
                ],
                "docstring": null
            },
            {
                "method_name": "getAddImmunizationID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setAddImmunizationID",
                "parameters": [
                    "addImmunizationID"
                ],
                "docstring": null
            },
            {
                "method_name": "getNotes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setNotes",
                "parameters": [
                    "notes"
                ],
                "docstring": null
            },
            {
                "method_name": "getOvID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setOvID",
                "parameters": [
                    "ovID"
                ],
                "docstring": null
            },
            {
                "method_name": "getRemoveLabProcID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRemoveLabProcID",
                "parameters": [
                    "removeLabProcID"
                ],
                "docstring": null
            },
            {
                "method_name": "getRemoveDiagID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRemoveDiagID",
                "parameters": [
                    "removeDiagID"
                ],
                "docstring": null
            },
            {
                "method_name": "getRemoveMedID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRemoveMedID",
                "parameters": [
                    "removeMedID"
                ],
                "docstring": null
            },
            {
                "method_name": "getRemoveProcID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRemoveProcID",
                "parameters": [
                    "removeProcID"
                ],
                "docstring": null
            },
            {
                "method_name": "getRemoveImmunizationID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setRemoveImmunizationID",
                "parameters": [
                    "removeImmunizationID"
                ],
                "docstring": null
            },
            {
                "method_name": "getVisitDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setVisitDate",
                "parameters": [
                    "visitDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getHcpID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHcpID",
                "parameters": [
                    "hcpID"
                ],
                "docstring": null
            },
            {
                "method_name": "getPatientID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPatientID",
                "parameters": [
                    "patientID"
                ],
                "docstring": null
            },
            {
                "method_name": "getHospitalID",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHospitalID",
                "parameters": [
                    "hospitalID"
                ],
                "docstring": null
            },
            {
                "method_name": "getDosage",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setDosage",
                "parameters": [
                    "dosage"
                ],
                "docstring": null
            },
            {
                "method_name": "getEndDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setEndDate",
                "parameters": [
                    "endDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getInstructions",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setInstructions",
                "parameters": [
                    "instructions"
                ],
                "docstring": null
            },
            {
                "method_name": "getStartDate",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setStartDate",
                "parameters": [
                    "startDate"
                ],
                "docstring": null
            },
            {
                "method_name": "getCauseOfDeath",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCauseOfDeath",
                "parameters": [
                    "causeOfDeath"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "ovID",
            "hcpID",
            "patientID",
            "hospitalID",
            "removeLabProcID",
            "removeDiagID",
            "removeProcID",
            "removeImmunizationID",
            "removeMedID",
            "addLabProcID",
            "addDiagID",
            "addProcID",
            "addImmunizationID",
            "addMedID",
            "notes",
            "visitDate",
            "startDate",
            "endDate",
            "dosage",
            "instructions",
            "causeOfDeath"
        ],
        "docstring": "A form to contain data coming from editing an office visit.      A form is a bean, kinda. You could say that it's a \"form\" of a bean :)    Think of a form as a real-life administrative form that you would fill out to get    something done, not necessarily making sense by itself."
    },
    {
        "class_name": "HealthRecordForm",
        "methods": [
            {
                "method_name": "getBloodPressureD",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setBloodPressureD",
                "parameters": [
                    "bloodPressureD"
                ],
                "docstring": null
            },
            {
                "method_name": "getBloodPressureN",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setBloodPressureN",
                "parameters": [
                    "bloodPressureN"
                ],
                "docstring": null
            },
            {
                "method_name": "getCholesterolHDL",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCholesterolHDL",
                "parameters": [
                    "cholesterolHDL"
                ],
                "docstring": null
            },
            {
                "method_name": "getCholesterolLDL",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCholesterolLDL",
                "parameters": [
                    "cholesterolLDL"
                ],
                "docstring": null
            },
            {
                "method_name": "getCholesterolTri",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCholesterolTri",
                "parameters": [
                    "cholesterolTri"
                ],
                "docstring": null
            },
            {
                "method_name": "getHeight",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setHeight",
                "parameters": [
                    "height"
                ],
                "docstring": null
            },
            {
                "method_name": "getIsSmoker",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setIsSmoker",
                "parameters": [
                    "isSmoker"
                ],
                "docstring": null
            },
            {
                "method_name": "getWeight",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setWeight",
                "parameters": [
                    "weight"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "height",
            "weight",
            "isSmoker",
            "bloodPressureN",
            "bloodPressureD",
            "cholesterolHDL",
            "cholesterolLDL",
            "cholesterolTri"
        ],
        "docstring": "A form to contain data coming from editing a health record.      A form is a bean, kinda. You could say that it's a \"form\" of a bean :)    Think of a form as a real-life administrative form that you would fill out to get    something done, not necessarily making sense by itself."
    },
    {
        "class_name": "AdverseEventBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for AdverseEventBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "AllergyBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for AllergyBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "ApptBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": null
    },
    {
        "class_name": "ApptTypeBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "apptType"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": null
    },
    {
        "class_name": "BeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": "Loads a list of the bean of type T from a result set.  Typically makes iterated calls \t  to loadSingle. \t  @param rs The java.sql.ResultSet we are extracting. \t  @return A java.util.List<T> where T is the type for this loader. \t  @throws SQLException"
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": "Contains the instructions for mapping the rows in this java.sql.ResultSet into \t  beans of type <T>. \t  @param rs The java.sql.ResultSet to be loaded. \t  @return A Bean of type T containing the loaded information, typically of the first (or next) item in the result set. \t  @throws SQLException"
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": "Used for an insert or update, this method contains the instructions for mapping the fields within \t  a bean of type T into a prepared statement which modifies the appropriate table. \t  @param ps The prepared statement to be loaded. \t  @param bean The bean containing the data to be placed. \t  @return A prepared statement with the appropriately loaded parameters. \t  @throws SQLException"
            }
        ],
        "attributes": [],
        "docstring": "This interface helps enforce the paradigm of what should be contained in a loader.      The generic type <T> specifies the type of bean that the loader is responsible for extacting from   a result set.      @param <T> A type for the bean that will be loaded with this class."
    },
    {
        "class_name": "DiagnosisBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "loadOVDiagnosisID"
        ],
        "docstring": "A loader for DiagnosisBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.   For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "DrugInteractionBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for MedicationBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "EmailBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "email"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for Fake Emails.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "FamilyBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "relation"
        ],
        "docstring": "A loader for FamilyMemberBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "HealthRecordsBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for HealthRecords.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "HospitalBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for HospitalBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "LabProcedureBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for LabProcedureBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "LOINCBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for LOINCBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "MedicationBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for MedicationBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "MessageBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "message"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for MessageBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "OfficeVisitLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "p"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for OfficeVisitBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "OperationalProfileLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for the operational profile.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "PatientLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "p"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for PatientBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "PersonnelLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "p"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for PersonnelBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "PrescriptionBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "pres"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "medLoader"
        ],
        "docstring": "A loader for PrescriptionBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "PrescriptionReportBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "pres"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "presLoader",
            "ovLoader"
        ],
        "docstring": "A loader for PrescriptionReportBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "ProcedureBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "loadOVProcedureID"
        ],
        "docstring": "A loader for ProcedureBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "ReferralBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "ref"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for ReferralBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "RemoteMonitoringDataBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for RemoteMonitoringDataBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "ReportRequestBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for ReportRequestBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "SurveyLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for SurveyBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "SurveyResultBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for SurveyResultBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "TransactionBeanLoader",
        "methods": [
            {
                "method_name": "loadList",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            },
            {
                "method_name": "loadParameters",
                "parameters": [
                    "ps",
                    "bean"
                ],
                "docstring": null
            },
            {
                "method_name": "loadSingle",
                "parameters": [
                    "rs"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "A loader for TransactionBeans.      Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.    For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}"
    },
    {
        "class_name": "AdverseEventsData",
        "methods": [
            {
                "method_name": "setAdverseEventsList",
                "parameters": [
                    "adEvents",
                    "name"
                ],
                "docstring": "The generated serializable ID."
            },
            {
                "method_name": "produceDataset",
                "parameters": [
                    "params"
                ],
                "docstring": "Called from the JSP page to initialize the list of Adverse Events needed to       produce the desired chart.              @param adEvents       @param name"
            },
            {
                "method_name": "hasExpired",
                "parameters": [
                    "params",
                    "since"
                ],
                "docstring": "This method parses the list of Adverse Event Beans to initialize the chart dataset."
            },
            {
                "method_name": "getProducerId",
                "parameters": [],
                "docstring": "The generated serializable ID."
            },
            {
                "method_name": "generateLink",
                "parameters": [
                    "data",
                    "series",
                    "category"
                ],
                "docstring": "@see java.lang.Object#finalize()"
            },
            {
                "method_name": "finalize",
                "parameters": [],
                "docstring": "This producer's data is invalidated after 5 seconds. By this method the       producer can influence Cewolf's caching behaviour the way it wants to."
            },
            {
                "method_name": "generateToolTip",
                "parameters": [
                    "arg0",
                    "series",
                    "arg2"
                ],
                "docstring": "Returns a unique ID for this DatasetProducer"
            }
        ],
        "attributes": [
            "serialVersionUID",
            "months",
            "values",
            "adverseEvents",
            "codeName"
        ],
        "docstring": "This class handles the data for charting in CeWolf/JFreeChart. This class implements DatasetProducer,   CategoryToolTipGenerator, CategoryItemLinkGenerator, and Serializable.      @author Jason"
    },
    {
        "class_name": "DAOFactory",
        "methods": [
            {
                "method_name": "getProductionInstance",
                "parameters": [],
                "docstring": "@return A production instance of the DAOFactory, to be used in deployment (by Tomcat)."
            },
            {
                "method_name": "getConnection",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getAccessDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getAllergyDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getApptDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getApptTypeDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getAuthDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getCPTCodesDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDrugInteractionDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getFamilyDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getHealthRecordsDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getHospitalsDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getICDCodesDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getNDCodesDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getOfficeVisitDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPatientDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getPersonnelDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getReferralDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getRiskDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getTransactionDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getVisitRemindersDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getFakeEmailDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getReportRequestDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getSurveyDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getLabProcedureDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getLOINCDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getSurveyResultDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getMessageDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getAdverseEventDAO",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getRemoteMonitoringDAO",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "productionInstance",
            "driver"
        ],
        "docstring": "The central mediator for all Database Access Objects. The production instance uses the database connection pool   provided by Tomcat (so use the production instance when doing stuff from JSPs in the \"real code\"). Both the   production and the test instance parses the context.xml file to get the JDBC connection.      Also, @see {@link EvilDAOFactory} and @see {@link TestDAOFactory}.      Any DAO that is added to the system should be added in this class, in the same way that all other DAOs are.      @author Andy"
    },
    {
        "class_name": "IConnectionDriver",
        "methods": [
            {
                "method_name": "getConnection",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Used by DAOFactory to abstract away different ways of getting our JDBC connection      @author Andy"
    },
    {
        "class_name": "ProductionConnectionDriver",
        "methods": [
            {
                "method_name": "getConnection",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Produces the JDBC connection from Tomcat's JDBC connection pool (defined in context.xml). Produces and   exception when running the unit tests because they're not being run through Tomcat.      @author Andy"
    },
    {
        "class_name": "AccessDAO",
        "methods": [
            {
                "method_name": "getSessionTimeoutMins",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "setSessionTimeoutMins",
                "parameters": [
                    "mins"
                ],
                "docstring": "Returns the number of minutes it would take for a session to time out. This is done by effectively \t  using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted \t  with the default value '20'. \t   \t  @return An int for the number of minutes. \t  @throws DBException"
            },
            {
                "method_name": "insertDefaultTimeout",
                "parameters": [
                    "conn",
                    "mins"
                ],
                "docstring": "Sets the number of minutes it would take for a session to timeout. \t   \t  @param mins An int specifying the number of minutes \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory"
        ],
        "docstring": "AccessDAO is for all queries related to authorization.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.         @author Andy"
    },
    {
        "class_name": "AdverseEventDAO",
        "methods": [
            {
                "method_name": "getReportsFor",
                "parameters": [
                    "mid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "addReport",
                "parameters": [
                    "aeBean",
                    "hcpmid"
                ],
                "docstring": "Gets all the adverse event reports for a certain user MID. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of AdverseEventBeans. \t  @throws SQLException \t  @throws DBException"
            },
            {
                "method_name": "getHCPMID",
                "parameters": [
                    "id"
                ],
                "docstring": "Adds a message to the database. \t  @param mBean A bean representing the message to be added. \t  @throws SQLException \t  @throws DBException"
            },
            {
                "method_name": "getReport",
                "parameters": [
                    "id"
                ],
                "docstring": null
            },
            {
                "method_name": "removeReport",
                "parameters": [
                    "id"
                ],
                "docstring": null
            },
            {
                "method_name": "getUnremovedAdverseEventsByCode",
                "parameters": [
                    "code"
                ],
                "docstring": null
            },
            {
                "method_name": "getNameForCode",
                "parameters": [
                    "code"
                ],
                "docstring": null
            },
            {
                "method_name": "getPerscriptions",
                "parameters": [
                    "start",
                    "end"
                ],
                "docstring": null
            },
            {
                "method_name": "getImmunizations",
                "parameters": [
                    "start",
                    "end"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory",
            "aeLoader"
        ],
        "docstring": "Used for the logging mechanism.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "AllergyDAO",
        "methods": [
            {
                "method_name": "getAllergies",
                "parameters": [
                    "pid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "addAllergy",
                "parameters": [
                    "pid",
                    "description"
                ],
                "docstring": "Returns a list of patient's allergies. \t  @param pid A long for the MID of the patient we are looking up. \t  @return A java.util.List of AllergyBeans associated with this patient. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "allergyBeanLoader"
        ],
        "docstring": "DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "ApptDAO",
        "methods": [
            {
                "method_name": "getApptsFor",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            },
            {
                "method_name": "getAllAppts",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "scheduleAppt",
                "parameters": [
                    "appt"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory",
            "abloader"
        ],
        "docstring": null
    },
    {
        "class_name": "ApptTypeDAO",
        "methods": [
            {
                "method_name": "getApptTypes",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "addApptType",
                "parameters": [
                    "apptType"
                ],
                "docstring": null
            },
            {
                "method_name": "editApptType",
                "parameters": [
                    "apptType"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory",
            "atLoader"
        ],
        "docstring": null
    },
    {
        "class_name": "AuthDAO",
        "methods": [
            {
                "method_name": "addUser",
                "parameters": [
                    "mid",
                    "role",
                    "password"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "setSecurityQuestionAnswer",
                "parameters": [
                    "question",
                    "answer",
                    "mid"
                ],
                "docstring": "Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP). \t  Initially sets security question to a random set of characters, so that nobody should be able to guess \t  its value. \t   \t  @param mid The user's MID as a Long. \t  @param role The role of the user as a Role enum {@link Role} \t  @param password The password for the new user. \t  @return A string representing the newly added randomly-generated password.  \t  @throws DBException"
            },
            {
                "method_name": "getUserName",
                "parameters": [
                    "mid"
                ],
                "docstring": "Reset the security question and answer for a particular user \t   \t  @param question The security question as a string. \t  @param answer The security answer as a string. \t  @param mid The MID of the user as a long. \t  @throws DBException"
            },
            {
                "method_name": "getUserRole",
                "parameters": [
                    "mid"
                ],
                "docstring": "Returns the user name of a user from just the MID \t   \t  @param mid The MID of the user to get the name of. \t  @return The user's name as a String. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "resetPassword",
                "parameters": [
                    "mid",
                    "password"
                ],
                "docstring": "Returns the role of a particular MID \t   \t  @param mid The MID of the user to look up. \t  @return The {@link Role} of the user as an enum. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "getSecurityQuestion",
                "parameters": [
                    "mid"
                ],
                "docstring": "Change the password of a particular user \t   \t  @param mid The MID of the user whose password we are changing. \t  @param password The new password. \t  @throws DBException"
            },
            {
                "method_name": "getSecurityAnswer",
                "parameters": [
                    "mid"
                ],
                "docstring": "Return the security question for a particular user. \t   \t  @param mid The MID of the user we are looking up. \t  @return The security question of the user we are looking up. \t  @throws iTrustException"
            },
            {
                "method_name": "recordLoginFailure",
                "parameters": [
                    "ipAddr"
                ],
                "docstring": "Return the security answer of a particular user \t   \t  @param mid The MID of the user we are looking up. \t  @return The security answer as a String. \t  @throws iTrustException"
            },
            {
                "method_name": "recordResetPasswordFailure",
                "parameters": [
                    "ipAddr"
                ],
                "docstring": "Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where \t  the key is the user's IP address. If the user's IP address is not in the table, a row with \"1\" is \t  added. \t   \t  @param ipAddr The IP address of the user as a String. \t  @throws DBException"
            },
            {
                "method_name": "getResetPasswordFailures",
                "parameters": [
                    "ipAddr"
                ],
                "docstring": "Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash \t  table where the key is the user's IP address. If the user's IP address is not in the table, a row with \t  \"1\" is added. \t   \t  @param ipAddr The IP address of the user as a String. \t  @throws DBException"
            },
            {
                "method_name": "getLoginFailures",
                "parameters": [
                    "ipAddr"
                ],
                "docstring": "Return the number of failures from resetting a password, given an IP address. \t   \t  @param ipAddr An IP address for the associated attempt as a String. \t  @return An int representing the number of failures. \t  @throws DBException"
            },
            {
                "method_name": "insertLoginFailureRow",
                "parameters": [
                    "ipAddr",
                    "failureCount",
                    "conn"
                ],
                "docstring": "Return the number of failures from login failures a password, given an IP address. \t   \t  @param ipAddr The IP address for this attempt as a String. \t  @return An int representing the number of failures which have occured. \t  @throws DBException"
            },
            {
                "method_name": "insertResetPasswordRow",
                "parameters": [
                    "ipAddr",
                    "failureCount",
                    "conn"
                ],
                "docstring": "Check that a user actually exists. \t   \t  @param mid \t  @return \t  @throws DBException"
            },
            {
                "method_name": "updateFailuresToZero",
                "parameters": [
                    "ipAddr",
                    "conn"
                ],
                "docstring": null
            },
            {
                "method_name": "resetLoginFailuresToZero",
                "parameters": [
                    "ipAddr"
                ],
                "docstring": null
            },
            {
                "method_name": "updateResetFailuresToZero",
                "parameters": [
                    "ipAddr",
                    "conn"
                ],
                "docstring": null
            },
            {
                "method_name": "checkUserExists",
                "parameters": [
                    "mid"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "LOGIN_TIMEOUT",
            "factory"
        ],
        "docstring": "AuthDAO is for anything that has to do with authentication. Most methods access the users table.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "CPTCodesDAO",
        "methods": [
            {
                "method_name": "getAllCPTCodes",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getImmunizationCPTCodes",
                "parameters": [],
                "docstring": "Returns a list of all CPT codes. \t   \t  @return A java.util.List of ProcedureBeans for the CPT codes. \t  @throws DBException"
            },
            {
                "method_name": "getCPTCode",
                "parameters": [
                    "code"
                ],
                "docstring": "Returns a list of all CPT codes. \t   \t  @return A java.util.List of all Immunization-related CPT codes. \t  @throws DBException"
            },
            {
                "method_name": "addCPTCode",
                "parameters": [
                    "proc"
                ],
                "docstring": "Returns a particular procedure description for a code. \t   \t  @param code The string representation of the code. \t  @return The textual description of the code. \t  @throws DBException"
            },
            {
                "method_name": "updateCode",
                "parameters": [
                    "proc"
                ],
                "docstring": "Adds a new CPT code, returns that it was added successfully \t   \t  @param proc A ProcedureBean representing the new code information. \t  @return A boolean for whether the operation was successful. \t  @throws DBException \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "factory",
            "procedureBeanLoader"
        ],
        "docstring": "Used for managing CPT codes.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      The CPT code set accurately describes medical, surgical, and diagnostic services    and is designed to communicate uniform information about medical services and procedures    among physicians, coders, patients, accreditation organizations, and payers for administrative,    financial, and analytical purposes.     @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml   @author Andy"
    },
    {
        "class_name": "DrugInteractionDAO",
        "methods": [
            {
                "method_name": "getInteractions",
                "parameters": [
                    "drugCode"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "reportInteraction",
                "parameters": [
                    "firstDrug",
                    "secondDrug",
                    "description"
                ],
                "docstring": "Returns a list of all drug interactions for the input drug name \t   \t  @return A java.util.List of DrugInteractionBeans. \t  @throws DBException"
            },
            {
                "method_name": "deleteInteraction",
                "parameters": [
                    "firstDrug",
                    "secondDrug"
                ],
                "docstring": "Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an \t  iTrustException is thrown. \t   \t  @param firstDrug  The name of the first drug in an interaction. \t  @param secondDrug  The name of the second drug in an interaction. \t  @param description  Explanation of the drug interaction. \t  @return A boolean indicating success or failure. \t  @throws DBException \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "factory",
            "interactionLoader"
        ],
        "docstring": "Used for managing drug interactions.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm   @author Andy"
    },
    {
        "class_name": "FakeEmailDAO",
        "methods": [
            {
                "method_name": "getAllEmails",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getEmailsByPerson",
                "parameters": [
                    "email"
                ],
                "docstring": "Return all emails that have been \"sent\" (inserted into the database) \t   \t  @return A java.util.List of Email objects representing fake e-mails. \t  @throws DBException"
            },
            {
                "method_name": "sendEmailRecord",
                "parameters": [
                    "email"
                ],
                "docstring": "Return all emails that a person has sent \t   \t  @param email The \"From\" email address as a string. \t  @return A java.util.List of fake emails. \t  @throws DBException"
            },
            {
                "method_name": "getEmailWithBody",
                "parameters": [
                    "bodySubstring"
                ],
                "docstring": "\"Send\" an email, which just inserts it into the database. \t   \t  @param email The Email object to insert. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "emailBeanLoader"
        ],
        "docstring": "DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "FamilyDAO",
        "methods": [
            {
                "method_name": "getParents",
                "parameters": [
                    "pid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getSiblings",
                "parameters": [
                    "pid"
                ],
                "docstring": "Return the information of the mother and father of this patient \t   \t  @param pid - \t             this patient \t  @return \t  @throws DBException"
            },
            {
                "method_name": "getChildren",
                "parameters": [
                    "pid"
                ],
                "docstring": "Return a list of patients who share at least one parent (and that parent is not '0') with this patient \t   \t  @param pid - \t             this patient \t  @return A java.util.list of FamilyMemberBeans. \t  @throws DBException"
            },
            {
                "method_name": "getFamilyMembers",
                "parameters": [
                    "pid",
                    "relation",
                    "query",
                    "secondParam"
                ],
                "docstring": "Return a list of patients whose mother or father is this patient \t   \t  @param pid - \t             this patient \t  @return A java.util.List of FamilyMemberBeans. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "familyBeanLoader"
        ],
        "docstring": "Used for queries related to families.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "HealthRecordsDAO",
        "methods": [
            {
                "method_name": "getAllHealthRecords",
                "parameters": [
                    "mid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "add",
                "parameters": [
                    "record"
                ],
                "docstring": "Returns a list of all health records for a particular patient \t   \t  @param mid The MID of the patient to look up. \t  @return A java.util.List of HealthRecords. \t  @throws DBException"
            }
        ],
        "attributes": [
            "loader",
            "factory"
        ],
        "docstring": "Used for all health records where a whole history is kept.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "HospitalsDAO",
        "methods": [
            {
                "method_name": "getAllHospitals",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getHospital",
                "parameters": [
                    "id"
                ],
                "docstring": "Returns a list of all hospitals sorted alphabetically \t   \t  @return A java.util.List of HospitalBeans. \t  @throws DBException"
            },
            {
                "method_name": "addHospital",
                "parameters": [
                    "hosp"
                ],
                "docstring": "Returns a particular hospital given its ID \t   \t  @param id The String ID of the hospital. \t  @return A HospitalBean representing this hospital. \t  @throws DBException"
            },
            {
                "method_name": "updateHospital",
                "parameters": [
                    "hosp"
                ],
                "docstring": "Adds a hospital \t   \t  @param hosp The HospitalBean object to insert. \t  @return A boolean indicating whether the insertion was successful. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "assignHospital",
                "parameters": [
                    "hcpID",
                    "hospitalID"
                ],
                "docstring": "Updates a particular hospital's description. Returns the number of rows affected (should be 1) \t   \t  @param hosp The HospitalBean to update. \t  @return An int indicating the number of affected rows. \t  @throws DBException"
            },
            {
                "method_name": "removeHospitalAssignment",
                "parameters": [
                    "hcpID",
                    "hospitalID"
                ],
                "docstring": "Assign an HCP to a hospital. If they have already been assigned to that hospital, then an \t  iTrustException is thrown. \t   \t  @param hcpID The HCP's MID to assign to the hospital. \t  @param hospitalID The ID of the hospital to assign them to. \t  @return A boolean indicating whether the assignment was a success. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "removeAllHospitalAssignmentsFrom",
                "parameters": [
                    "hcpID"
                ],
                "docstring": "Unassigns an HCP to a hospital. Returns whether or not any changes were made \t   \t  @param hcpID The MID of the HCP to remove. \t  @param hospitalID The ID of the hospital being removed from. \t  @return A boolean indicating success. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "hospitalLoader"
        ],
        "docstring": "Used for managing hospitals      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "ICDCodesDAO",
        "methods": [
            {
                "method_name": "getAllICDCodes",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getICDCode",
                "parameters": [
                    "code"
                ],
                "docstring": "Returns all ICD9CM codes sorted by code \t   \t  @return java.util.List of DiagnosisBeans \t  @throws DBException"
            },
            {
                "method_name": "addICDCode",
                "parameters": [
                    "diag"
                ],
                "docstring": "Returns a particular description for a given code \t   \t  @param code The String representation of the code. \t  @return A DiagnosisBean of the code. \t  @throws DBException"
            },
            {
                "method_name": "updateCode",
                "parameters": [
                    "diag"
                ],
                "docstring": "Adds an ICD9CM code. Returns whether or not the change was made. \t   \t  @param diag The DiagnosisBean representing the changes. \t  @return A boolean indicating success. \t  @throws DBException \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "factory",
            "diagnosisLoader"
        ],
        "docstring": "Used for managing all ICD codes.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      The International Statistical Classification of Diseases and Related Health Problems    (most commonly known by the abbreviation ICD) provides codes to classify diseases and a    wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and    external causes of injury or disease.       @see http://www.cdc.gov/nchs/icd9.htm   @author Andy"
    },
    {
        "class_name": "LabProcedureDAO",
        "methods": [
            {
                "method_name": "getLabProceduresForPatient",
                "parameters": [
                    "id"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getLabProceduresForPatientForNextMonth",
                "parameters": [
                    "id"
                ],
                "docstring": "Get a list of the lab procedures associated with a given patient. \t  @param id The MID of the patient as a long. \t  @return A java.util.List of LabProcedureBeans \t  @throws DBException"
            },
            {
                "method_name": "getLabProcedure",
                "parameters": [
                    "id"
                ],
                "docstring": "Gets all the lab procedures for a given patient that occur within the next month. \t  @param id The MID of the patient as a long. \t  @return A java.util.List of LabProcedureBeans. \t  @throws DBException"
            },
            {
                "method_name": "getAllLabProceduresDate",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets an individual lab procedure. \t  @param id The ID of the lab procedure. \t  @return A LabProcedureBean representing the procedure. \t  @throws DBException"
            },
            {
                "method_name": "getAllLabProceduresForDocOV",
                "parameters": [
                    "mid",
                    "ovid"
                ],
                "docstring": "Gets all procedures for Patient \t  @param mid patient id \t  @return A java.util.List of LabProcedureBeans. \t  @throws DBException"
            },
            {
                "method_name": "getAllLabProceduresForDocOV",
                "parameters": [
                    "ovid"
                ],
                "docstring": "This gets all the procedures for a particular patient on a particular office visit \t  @param mid The MID of the patient. \t  @param ovid The Office Visit ID. \t  @return A java.util.List of LabProcedureBeans. \t  @throws DBException"
            },
            {
                "method_name": "getAllLabProcedures",
                "parameters": [],
                "docstring": "This gets all the procedures for a particular patient on a particular office visit \t  @param mid The MID of the patient. \t  @param ovid The Office Visit ID. \t  @return A java.util.List of LabProcedureBeans \t  @throws DBException"
            },
            {
                "method_name": "getLabProceduresForLHCPForNextMonth",
                "parameters": [
                    "ovid"
                ],
                "docstring": "Gets all lab procedures, period. \t  @return A java.util.List of LabProcedureBeans. \t  @throws DBException"
            },
            {
                "method_name": "addLabProcedure",
                "parameters": [
                    "b"
                ],
                "docstring": "Gets the lab procedures for a given LHCP that occur within the next month. \t  @param ovid The Office Visit ID conducted by the LHCP in question. \t  @return A java.util.List of LabProcedureBeans. \t  @throws DBException"
            },
            {
                "method_name": "updateLabProcedure",
                "parameters": [
                    "b"
                ],
                "docstring": "Inserts a lab procedure into the database. \t  @param b The LabProcedureBean to be inserted. \t  @return A long containing the ID of the newly inserted lab procedure bean. \t  @throws DBException"
            },
            {
                "method_name": "getAllLabProceduresLOINC",
                "parameters": [
                    "id"
                ],
                "docstring": "Updates an existing lab procedure. \t  @param b The LabProcedureBean representing the procedure to be updated. \t  @throws DBException"
            },
            {
                "method_name": "updateRights",
                "parameters": [
                    "b"
                ],
                "docstring": "Gets all the lab procedures that correspond to a particular LOINC. \t  @param id The LOINC in question. \t  @return A java.util.List of LabProcedureBeans. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "labProcedureLoader"
        ],
        "docstring": "A DAO for managing lab procedure codes. Database Access Object. All info coming into a DAO is already validated.    Just worry about DB stuff here. Note that all DAOs need to have a DAOFactory with which to access other    DAOs and to get connections. Also, every DAO must have a constructor with a DAOFactory as a parameter."
    },
    {
        "class_name": "LOINCDAO",
        "methods": [
            {
                "method_name": "addLOINC",
                "parameters": [
                    "hosp"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getProcedures",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Adds a LOINC \t   \t  @param hosp The LOINCbean representing the new code to be added. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "update",
                "parameters": [
                    "ov"
                ],
                "docstring": "Returns all LOINCs associated with LaboratoryProcedureCode \t   \t  @param visitID The code of the Laboratory Procedure Code as a String. \t  @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code. \t  @throws DBException"
            },
            {
                "method_name": "getAllLOINC",
                "parameters": [],
                "docstring": "Updates the information in LOINC. \t   \t  @param ov \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "LOINCLoader"
        ],
        "docstring": "DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      Logical Observation Identifiers Names and Codes (LOINC) is a database and universal    standard for identifying medical laboratory observations.        @see http://loinc.org/   @author Ben Smith"
    },
    {
        "class_name": "MessageDAO",
        "methods": [
            {
                "method_name": "getMessagesFor",
                "parameters": [
                    "mid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getMessagesTimeAscending",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages for a certain user MID. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "getMessagesNameAscending",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages for a certain user MID sorted by ascending time. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "getMessagesNameDescending",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages for a certain user MID sorted by name ascending. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "getMessagesFrom",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages for a certain user MID sorted by name descending. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "getMessagesFromTimeAscending",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages from a certain user MID. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "getMessagesFromNameAscending",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages for a certain user MID sorted by ascending time. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "getMessagesFromNameDescending",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets all the messages for a certain user MID sorted by name ascending. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "addMessage",
                "parameters": [
                    "mBean"
                ],
                "docstring": "Gets all the messages for a certain user MID sorted by name descending. \t  @param mid The MID of the user to be looked up. \t  @return A java.util.List of MessageBeans. \t  @throws SQLException"
            },
            {
                "method_name": "updateRead",
                "parameters": [
                    "mBean"
                ],
                "docstring": "Adds a message to the database. \t  @param mBean A bean representing the message to be added. \t  @throws SQLException"
            }
        ],
        "attributes": [
            "factory",
            "mbLoader"
        ],
        "docstring": "Used for the logging mechanism.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "NDCodesDAO",
        "methods": [
            {
                "method_name": "getAllNDCodes",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getNDCode",
                "parameters": [
                    "code"
                ],
                "docstring": "Returns a list of all ND codes \t   \t  @return A java.util.List of MedicationBeans. \t  @throws DBException"
            },
            {
                "method_name": "addNDCode",
                "parameters": [
                    "med"
                ],
                "docstring": "Returns a particular description for a given code. \t   \t  @param code The ND code to be looked up. \t  @return A bean representing the Medication that was looked up. \t  @throws DBException"
            },
            {
                "method_name": "updateCode",
                "parameters": [
                    "med"
                ],
                "docstring": "Adds a new ND code, returns whether or not the change was made. If the code already exists, an \t  iTrustException is thrown. \t   \t  @param med The medication bean to be added. \t  @return A boolean indicating success or failure. \t  @throws DBException \t  @throws iTrustException"
            }
        ],
        "attributes": [
            "factory",
            "medicationLoader"
        ],
        "docstring": "Used for managing the ND Codes.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      The National Drug Code (NDC) is a universal product identifier used in the   United States for drugs intended for human use.      @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm   @author Andy"
    },
    {
        "class_name": "OfficeVisitDAO",
        "methods": [
            {
                "method_name": "add",
                "parameters": [
                    "ov"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "setValues",
                "parameters": [
                    "ps",
                    "ov"
                ],
                "docstring": "Adds an visit and return its ID \t   \t  @param ov The OfficeVisitBean to be added. \t  @return A long indicating the unique ID for the office visit. \t  @throws DBException"
            },
            {
                "method_name": "update",
                "parameters": [
                    "ov"
                ],
                "docstring": "Updates the information in a particular office visit. \t   \t  @param ov The Office Visit bean representing the changes. \t  @throws DBException"
            },
            {
                "method_name": "getOfficeVisit",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Returns a particular office visit given an ID \t   \t  @param visitID The unique ID of the office visit. \t  @return An OfficeVisitBean with the specifics for that office visit. \t  @throws DBException"
            },
            {
                "method_name": "loadFullOfficeVist",
                "parameters": [
                    "rs",
                    "visitID"
                ],
                "docstring": "Returns all of the procedures associated with the given office visit \t   \t  @param visitID The unique ID of the office visit. \t  @return A java.util.List of procedures. \t  @throws DBException"
            },
            {
                "method_name": "getProcedures",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Returns all of the prescriptions associated with the given office visit \t   \t  @param visitID The ID of the office visit. \t  @return A java.util.List of prescriptions. \t  @throws DBException"
            },
            {
                "method_name": "getPrescriptions",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Returns all of the diagnoses associated with the given office visit \t   \t  @param visitID The unique ID of the office visit. \t  @return A java.util.List of diagnoses. \t  @throws DBException"
            },
            {
                "method_name": "getDiagnoses",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Adds the given CPT codes to the given office visit \t   \t  @param cptCode \t  @param visitID \t  @return \t  @throws DBException"
            },
            {
                "method_name": "addProcedureToOfficeVisit",
                "parameters": [
                    "cptCode",
                    "visitID",
                    "hcpid"
                ],
                "docstring": "Removes the given procedure from its office visit \t   \t  @param ovProcedureID The unique ID of the office visit procedure. \t  @throws DBException"
            },
            {
                "method_name": "removeProcedureFromOfficeVisit",
                "parameters": [
                    "ovProcedureID"
                ],
                "docstring": "Adds a prescription bean to the database. \t  @param pres The prescription bean to be added. \t  @return The unique ID of the newly added bean. \t  @throws DBException"
            },
            {
                "method_name": "addPrescription",
                "parameters": [
                    "pres"
                ],
                "docstring": "Edits an existing prescription bean. \t   \t  @param pres The newly updated prescription bean. \t  @return A long indicating the ID of the newly updated prescription bean. \t  @throws DBException"
            },
            {
                "method_name": "editPrescription",
                "parameters": [
                    "pres"
                ],
                "docstring": "Removes the given medication from its office visit \t   \t  @param ovMedicationID The unique ID of the medication to be removed. \t  @throws DBException"
            },
            {
                "method_name": "removePrescription",
                "parameters": [
                    "ovMedicationID"
                ],
                "docstring": "Adds the given CPT codes to the given office visit \t  @param icd A double representing the ICD code to be added. \t  @param visitID The ID of the office visit we are adding the code to. \t  @return A long for the new ICD code's ID. \t  @throws DBException"
            },
            {
                "method_name": "addDiagnosisToOfficeVisit",
                "parameters": [
                    "icd",
                    "visitID"
                ],
                "docstring": "Removes a particular diagnosis from its office visit \t   \t  @param ovDiagnosisID The ID for the office visit diagnosis to be removed.  \t  @throws DBException"
            },
            {
                "method_name": "removeDiagnosisFromOfficeVisit",
                "parameters": [
                    "ovDiagnosisID"
                ],
                "docstring": "Adds a LOINCCode to an office visit. \t   \t  @param LOINCCode A string of the code being added. \t  @param visitID The ID of the office visit the code is being added to. \t  @param pid The patient's MID associated with this transaction. \t  @return The unique ID of the code that was added. \t  @throws DBException"
            },
            {
                "method_name": "addLabProcedureToOfficeVisit",
                "parameters": [
                    "LOINCCode",
                    "visitID",
                    "pid"
                ],
                "docstring": "Removes a given lab procedure. \t   \t  @param labProcedureID The unique ID of the lab procedure. \t  @throws DBException"
            },
            {
                "method_name": "removeLabProcedureFromOfficeVisit",
                "parameters": [
                    "labProcedureID"
                ],
                "docstring": "Returns whether or not an office visit actually exists \t   \t  @param ovID The ID of the office visit to be checked. \t  @param pid The MID of the patient associated with this transaction. \t  @return A boolean indicating its existence. \t  @throws DBException"
            },
            {
                "method_name": "checkOfficeVisitExists",
                "parameters": [
                    "ovID",
                    "pid"
                ],
                "docstring": "Returns a list of all office visits for a given patient \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of OfficeVisitBeans. \t  @throws DBException"
            },
            {
                "method_name": "getAllOfficeVisits",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns a list of all office visits for a given patient \t   \t  @param mid The MID of the LHCP you are looking up. \t  @return A java.util.List of Office Visits. \t  @throws DBException"
            },
            {
                "method_name": "getAllOfficeVisitsForLHCP",
                "parameters": [
                    "mid"
                ],
                "docstring": "Returns a list of all office visits for a given patient \t   \t  @param pid The MID of the patient. \t  @return A java.util.List of Office Visits. \t  @throws DBException"
            },
            {
                "method_name": "getOfficeVisitsWithNoSurvey",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns a list of information related to prescription reports given all of the office visits and the \t  patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the \t  disambiguation is for security reasons). \t   \t  @param ovIDs A java.util.List of Longs for the office visits. \t  @param patientID A long representing the MID of the patient in question. \t  @return A java.util.List of prescription reports. \t  @throws DBException"
            },
            {
                "method_name": "getPrescriptionReportsByDate",
                "parameters": [
                    "patientID",
                    "startDate",
                    "endDate"
                ],
                "docstring": "Returns a list of information related to prescription reports given all of the office visits and the \t  patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the \t  disambiguation is for security reasons). \t   \t  @param ovIDs A java.util.List of Longs for the office visits. \t  @param patientID A long representing the MID of the patient in question. \t  @return A java.util.List of prescription reports. \t  @throws DBException"
            },
            {
                "method_name": "getPrescriptionReports",
                "parameters": [
                    "ovIDs",
                    "patientID"
                ],
                "docstring": "Returns a list of all office visits at a given hospital \t  @param hospitalID the id of the hospital \t  @return a list of the OfficeVisitBeans that hold the office visits \t  @throws DBException in the event of a database error"
            },
            {
                "method_name": "prepareOVIDs",
                "parameters": [
                    "ps",
                    "ovIDs"
                ],
                "docstring": "Gets all office visits corresponding to a particular ICD diagnosis. \t   \t  @param icdcode A string represnting the ICD diagnosis to look up. \t  @return A java.util.List of Office visits. \t  @throws DBException"
            },
            {
                "method_name": "buildPreps",
                "parameters": [
                    "size"
                ],
                "docstring": null
            },
            {
                "method_name": "getOfficeVisitsFromHospital",
                "parameters": [
                    "hospitalID"
                ],
                "docstring": null
            },
            {
                "method_name": "getAllOfficeVisitsForDiagnosis",
                "parameters": [
                    "icdcode"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory",
            "officeVisitLoader",
            "diagnosisLoader",
            "prescriptionLoader",
            "prescriptionReportBeanLoader",
            "procedureBeanLoader"
        ],
        "docstring": "Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar   tasks.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "PatientDAO",
        "methods": [
            {
                "method_name": "getName",
                "parameters": [
                    "mid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getRole",
                "parameters": [
                    "mid",
                    "role"
                ],
                "docstring": "Returns the name for the given MID \t   \t  @param mid The MID of the patient in question. \t  @return A String representing the patient's first name and last name. \t  @throws iTrustException \t  @throws DBException"
            },
            {
                "method_name": "addEmptyPatient",
                "parameters": [],
                "docstring": "Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO \t   \t  @param mid The MID of the patient in question. \t  @param role A String representing the role of the patient. \t  @return A String representing the patient's role. \t  @throws iTrustException \t  @throws DBException"
            },
            {
                "method_name": "getPatient",
                "parameters": [
                    "mid"
                ],
                "docstring": "Adds an empty patient to the table, returns the new MID \t   \t  @return The MID of the patient as a long. \t  @throws DBException"
            },
            {
                "method_name": "editPatient",
                "parameters": [
                    "p"
                ],
                "docstring": "Returns the patient's information for a given ID \t   \t  @param mid The MID of the patient to retrieve. \t  @return A PatientBean representing the patient. \t  @throws DBException"
            },
            {
                "method_name": "checkPatientExists",
                "parameters": [
                    "pid"
                ],
                "docstring": "Updates a patient's information for the given MID \t   \t  @param p The patient bean representing the new information for the patient. \t  @throws DBException"
            },
            {
                "method_name": "getDeclaredHCPs",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns whether or not the patient exists \t   \t  @param pid The MID of the patient in question. \t  @return A boolean indicating whether the patient exists. \t  @throws DBException"
            },
            {
                "method_name": "declareHCP",
                "parameters": [
                    "pid",
                    "hcpID"
                ],
                "docstring": "Returns a list of HCPs who are declared by the given patient \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of Personnel Beans. \t  @throws DBException"
            },
            {
                "method_name": "undeclareHCP",
                "parameters": [
                    "pid",
                    "hcpID"
                ],
                "docstring": "Declares an HCP for a particular patient \t   \t  @param pid The MID of the patient in question. \t  @param hcpID The HCP's MID. \t  @return A boolean as to whether the insertion was successful. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "checkDeclaredHCP",
                "parameters": [
                    "pid",
                    "hcpid"
                ],
                "docstring": "Undeclare an HCP for a given patient \t   \t  @param pid The MID of the patient in question. \t  @param hcpID The MID of the HCP in question. \t  @return A boolean indicating whether the action was successful. \t  @throws DBException"
            },
            {
                "method_name": "getRepresented",
                "parameters": [
                    "pid"
                ],
                "docstring": "Check if a patient has declared the given HCP \t   \t  @param pid The MID of the patient in question as a long. \t  @param hcpid The MID of the HCP in question as a long. \t  @return \t  @throws DBException"
            },
            {
                "method_name": "getRepresenting",
                "parameters": [
                    "pid"
                ],
                "docstring": "Return a list of patients that the given patient represents \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of PatientBeans \t  @throws DBException"
            },
            {
                "method_name": "represents",
                "parameters": [
                    "representer",
                    "representee"
                ],
                "docstring": "Return a list of patients that the given patient is represented by \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of PatientBeans. \t  @throws DBException"
            },
            {
                "method_name": "addRepresentative",
                "parameters": [
                    "representer",
                    "representee"
                ],
                "docstring": "Check if the given representer represents the representee \t   \t  @param representer The MID of the representer in question. \t  @param representee The MID of the representee in question. \t  @return A boolean indicating whether represenation is in place. \t  @throws DBException"
            },
            {
                "method_name": "removeRepresentative",
                "parameters": [
                    "representer",
                    "representee"
                ],
                "docstring": "Assign a representer to the representee \t   \t  @param representer The MID of the representer as a long. \t  @param representee The MID of the representee as a long. \t  @return A boolean as to whether the insertion was correct. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "getDiagnoses",
                "parameters": [
                    "pid"
                ],
                "docstring": "Unassign the representation \t   \t  @param representer The MID of the representer in question. \t  @param representee The MID of the representee in question. \t  @return A boolean indicating whether the unassignment was sucessful. \t  @throws DBException"
            },
            {
                "method_name": "getProcedures",
                "parameters": [
                    "pid"
                ],
                "docstring": "Return a list of all diagnoses for a given patient \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of Diagnoses. \t  @throws DBException"
            },
            {
                "method_name": "getImmunizationProcedures",
                "parameters": [
                    "pid"
                ],
                "docstring": "Return a list of all procedures for a given patient \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of all the procedures. \t  @throws DBException"
            },
            {
                "method_name": "getPrescriptions",
                "parameters": [
                    "patientID"
                ],
                "docstring": "Return a list of all immunization procedures for a given patient \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of the procedures. \t  @throws DBException"
            },
            {
                "method_name": "getCurrentPrescriptions",
                "parameters": [
                    "patientID"
                ],
                "docstring": "Return a list of all prescriptions for a patient \t   \t  @param patientID The MID of the patient in question. \t  @return A java.util.List of prescriptions. \t  @throws DBException"
            },
            {
                "method_name": "getExpiredPrescriptions",
                "parameters": [
                    "patientID"
                ],
                "docstring": "Return a list of prescriptions which are currently prescribed for a patient \t   \t  @param patientID The MID of the patient in question. \t  @return A java.util.List of prescription beans. \t  @throws DBException"
            },
            {
                "method_name": "getAllPatients",
                "parameters": [],
                "docstring": "Return a list of prescriptions which are expired prescription for a patient \t   \t  @param patientID The MID of the patient in question. \t  @return A java.util.List of prescriptions. \t  @throws DBException"
            },
            {
                "method_name": "getRenewalNeedsPatients",
                "parameters": [
                    "hcpMID"
                ],
                "docstring": "Lists every patient in the database. \t   \t  @return A java.util.List of PatientBeans representing the patients. \t  @throws DBException"
            },
            {
                "method_name": "searchForPatientsWithName",
                "parameters": [
                    "first",
                    "last"
                ],
                "docstring": "Return a list of patients with a special-diagnosis-history who \t  have the logged in HCP as a DHCP and whose medications are going to \t  expire within seven days. \t   \t  @param hcpMID The MID of the logged in HCP \t  @return A list of patients satisfying the conditions. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "patientLoader",
            "personnelLoader",
            "diagnosisLoader",
            "prescriptionLoader",
            "procedureLoader"
        ],
        "docstring": "Used for managing all static information related to a patient. For other information related to all aspects   of patient care, see the other DAOs.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "PersonnelDAO",
        "methods": [
            {
                "method_name": "getName",
                "parameters": [
                    "mid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "addEmptyPersonnel",
                "parameters": [
                    "role"
                ],
                "docstring": "Returns the name for a given MID \t   \t  @param mid The MID of the personnel in question. \t  @return A String representing the name of the personnel. \t  @throws iTrustException \t  @throws DBException"
            },
            {
                "method_name": "getPersonnel",
                "parameters": [
                    "mid"
                ],
                "docstring": "Adds an empty personnel, and returns the MID. \t   \t  @return A long indicating the new MID. \t  @param role A {@link Role} enum indicating the personnel's specific role. \t  @throws DBException \t  @throws iTrustException"
            },
            {
                "method_name": "editPersonnel",
                "parameters": [
                    "p"
                ],
                "docstring": "Retrieves a PersonnelBean with all of the specific information for a given employee. \t   \t  @param mid The MID of the personnel in question. \t  @return A PersonnelBean representing the employee. \t  @throws DBException"
            },
            {
                "method_name": "checkPersonnelExists",
                "parameters": [
                    "pid"
                ],
                "docstring": "Updates the demographics for a personnel. \t   \t  @param p The personnel bean with the updated information. \t  @throws DBException"
            },
            {
                "method_name": "getHospitals",
                "parameters": [
                    "mid"
                ],
                "docstring": "Indicates whether a certain personnel is in the database. \t   \t  @param pid The MID of the personnel in question. \t  @return A boolean indicating whether this personnel exists. \t  @throws DBException"
            },
            {
                "method_name": "getAllPersonnel",
                "parameters": [],
                "docstring": "Returns all of the hospitals this LHCP is associated with. \t   \t  @param mid The MID of the personnel in question. \t  @return A java.util.List of HospitalBeans. \t  @throws DBException"
            },
            {
                "method_name": "getUAPsForHCP",
                "parameters": [
                    "hcpid"
                ],
                "docstring": "Returns all personnel in the database. \t   \t  @return A java.util.List of personnel. \t  @throws DBException"
            },
            {
                "method_name": "getPrescribingDoctor",
                "parameters": [
                    "prescription"
                ],
                "docstring": "Returns a list of UAPs who work for this LHCP. \t   \t  @param hcpid The MID of the personnel in question. \t  @return A java.util.List of UAPs. \t  @throws DBException"
            },
            {
                "method_name": "searchForPersonnelWithName",
                "parameters": [
                    "first",
                    "last"
                ],
                "docstring": "Given a prescription that has been given, this method returns all the information for the \t  doctor who authorized that prescription. \t   \t  @param prescription The PrescriptionBean describing the prescription in question. \t  @return The PersonnelBean describing the doctor who authorized it. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "personnelLoader",
            "hospitalBeanLoader"
        ],
        "docstring": "Used for managing information related to personnel: HCPs, UAPs, Admins      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "ReferralDAO",
        "methods": [
            {
                "method_name": "getReferralsSentFrom",
                "parameters": [
                    "mid"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getReferralsSentTo",
                "parameters": [
                    "mid"
                ],
                "docstring": "Gets a list of all referrals sent from an HCP \t  @param mid The HCP's mid. \t  @return The list of the referrals they sent. \t  @throws DBException"
            },
            {
                "method_name": "editReferral",
                "parameters": [
                    "r"
                ],
                "docstring": "Gets a list of all referrals sent to an HCP \t  @param mid The HCP's mid. \t  @return The list of the referrals sent to them. \t  @throws DBException"
            },
            {
                "method_name": "addReferral",
                "parameters": [
                    "r"
                ],
                "docstring": "Updates a given referral in the database. \t  @param r The referral to update. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "referralLoader"
        ],
        "docstring": "Used to update referrals, and fetch lists of referrals sent to and   from HCPs.     DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs."
    },
    {
        "class_name": "RemoteMonitoringDAO",
        "methods": [
            {
                "method_name": "getPatientsData",
                "parameters": [
                    "loggedInMID"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getPatientDataByDate",
                "parameters": [
                    "patientMID",
                    "lower",
                    "upper"
                ],
                "docstring": "Returns patient data for a given HCP \t   \t  @return \t  @throws DBException"
            },
            {
                "method_name": "storePatientData",
                "parameters": [
                    "patientMID",
                    "systolicBloodPressure",
                    "diastolicBloodPressure",
                    "glucoseLevel",
                    "reporterRole",
                    "reporterMID"
                ],
                "docstring": "Store data for a given patient in the RemoteMonitoringData table \t   \t  @param patientMID The MID of the patient \t  @param systolicBloodPressure The systolic blood pressure of the patient \t  @param diastolicBloodPressure The diastolic blood pressure of the patient \t  @param glucoseLevel The glucose level of the patient \t  @param reporterRole  The role of the person that reported these monitoring stats \t  @param reporterMID  The MID of the person that reported these monitoring stats \t  @throws DBException"
            },
            {
                "method_name": "storePatientData",
                "parameters": [
                    "patientMID",
                    "glucoseLevel",
                    "reporterRole",
                    "reporterMID"
                ],
                "docstring": "Store data for a given patient in the RemoteMonitoringData table \t   \t  @param patientMID The MID of the patient \t  @param systolicBloodPressure The systolic blood pressure of the patient \t  @param diastolicBloodPressure The diastolic blood pressure of the patient \t  @param glucoseLevel The glucose level of the patient \t  @param reporterRole  The role of the person that reported these monitoring stats \t  @param reporterMID  The MID of the person that reported these monitoring stats \t  @throws DBException"
            },
            {
                "method_name": "storePatientData",
                "parameters": [
                    "patientMID",
                    "systolicBloodPressure",
                    "diastolicBloodPressure",
                    "reporterRole",
                    "reporterMID"
                ],
                "docstring": "Store data for a given patient in the RemoteMonitoringData table \t   \t  @param patientMID The MID of the patient \t  @param systolicBloodPressure The systolic blood pressure of the patient \t  @param diastolicBloodPressure The diastolic blood pressure of the patient \t  @param glucoseLevel The glucose level of the patient \t  @param reporterRole  The role of the person that reported these monitoring stats \t  @param reporterMID  The MID of the person that reported these monitoring stats \t  @throws DBException"
            },
            {
                "method_name": "getNumberOfDailyEntries",
                "parameters": [
                    "patientMID"
                ],
                "docstring": "Private method to get the number of entries for a certain patientID for today. \t  @param patientMID \t  @return the number of entries \t  @throws DBException"
            },
            {
                "method_name": "validatePR",
                "parameters": [
                    "representativeMID",
                    "patientMID"
                ],
                "docstring": "Add a patient to the list of HCPs' monitoring lists of Patients \t   \t  @param patientMID The MID of the patient \t  @param HCPMID The MID of the HCP \t  @return true if added successfully, false if already in list"
            },
            {
                "method_name": "addPatientToList",
                "parameters": [
                    "patientMID",
                    "HCPMID"
                ],
                "docstring": "Remove a patient from the list of HCPs' monitoring lists of Patients \t   \t  @param patientMID The MID of the patient \t  @param HCPMID The MID of the HCP \t  @return true if removed successfully, false if not in list"
            },
            {
                "method_name": "removePatientFromList",
                "parameters": [
                    "patientMID",
                    "HCPMID"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory",
            "loader"
        ],
        "docstring": "Used for the keeping track of remote monitoring data.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs."
    },
    {
        "class_name": "ReportRequestDAO",
        "methods": [
            {
                "method_name": "getReportRequest",
                "parameters": [
                    "id"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getAllReportRequestsForRequester",
                "parameters": [
                    "mid"
                ],
                "docstring": "Returns a full bean describing a given report request. \t   \t  @param id The unique ID of the bean in the database. \t  @return The bean describing this report request. \t  @throws DBException"
            },
            {
                "method_name": "getAllReportRequestsForPatient",
                "parameters": [
                    "pid"
                ],
                "docstring": "Returns all report requests associated with a given requester. \t   \t  @param mid The MID of the personnel in question. \t  @return A java.util.List of report requests. \t  @throws DBException"
            },
            {
                "method_name": "addReportRequest",
                "parameters": [
                    "requesterMID",
                    "patientMID",
                    "date"
                ],
                "docstring": "Returns all of the report requests associated with a specific patient. \t   \t  @param pid The MID of the patient in question. \t  @return A java.util.List of report requests. \t  @throws DBException"
            },
            {
                "method_name": "setViewed",
                "parameters": [
                    "ID",
                    "date"
                ],
                "docstring": "//\t  Returns every report request in the database. //\t  @return A java.util.List of report requests. //\t  @throws DBException //"
            }
        ],
        "attributes": [
            "factory",
            "loader"
        ],
        "docstring": "Used for handling data related to report requests.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs."
    },
    {
        "class_name": "RiskDAO",
        "methods": [
            {
                "method_name": "hasFamilyHistory",
                "parameters": [
                    "patientID",
                    "icdLower",
                    "icdUpper"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getFamilyMembers",
                "parameters": [
                    "patientID"
                ],
                "docstring": "This method is implemented using {@link FamilyDAO} for 2 reasons: (a) definitions of family members \t  might change, so it's better to centralize that code and (2) to make this code a little bit \"nicer\" \t  even though it executes one query per family member. If this method gets slow, then you will need to \t  refactor. Otherwise, let's just keep it simple... \t   \t  @param patientID The MID of the patient in question. \t  @param icdLower A double of the lower bound for the codes. \t  @param icdUpper A double of the upper bound for the codes. \t  @return A boolean indicating whether a family member had a match in this range. \t  @throws DBException"
            },
            {
                "method_name": "hadChildhoodInfection",
                "parameters": [
                    "patientID",
                    "icdCodes"
                ],
                "docstring": "Returns whether or not a patient had a childhood infection for the exact, given ICD codes. \t   \t  @param patientID The MID of the patient in question. \t  @param icdCodes A parameter list of the ICD codes to match. \t  @return A boolean indicating whether this patient had all the listed ICD codes. \t  @throws DBException"
            },
            {
                "method_name": "createPrepared",
                "parameters": [
                    "length"
                ],
                "docstring": "Returns if the patient has ever smoked in their life \t   \t  @param patientID The MID of the patient in question. \t  @return A boolean indicating whether the patient smoked. \t  @throws DBException"
            },
            {
                "method_name": "setICDs",
                "parameters": [
                    "start",
                    "ps",
                    "icdCodes"
                ],
                "docstring": "Returns if a patient has ever been diagnosed with the given ICD code, in the range [lower,upper) \t   \t  @param patientID The MID of the patient in question. \t  @param lowerICDCode A double of the lower ICD code. \t  @param upperICDCode A double of the upper ICD code. \t  @return A boolean indicating whether there was a match in the given range. \t  @throws DBException"
            },
            {
                "method_name": "hasSmoked",
                "parameters": [
                    "patientID"
                ],
                "docstring": null
            },
            {
                "method_name": "hadPriorDiagnoses",
                "parameters": [
                    "patientID",
                    "lowerICDCode",
                    "upperICDCode"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "factory"
        ],
        "docstring": "Used for finding risk factors for a given patient.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "SurveyDAO",
        "methods": [
            {
                "method_name": "addCompletedSurvey",
                "parameters": [
                    "surveyBean",
                    "date"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getSurveyData",
                "parameters": [
                    "id"
                ],
                "docstring": "Insert survey data into database. \t  @param surveyBean The Bean representing the user's responses which will be inserted. \t  @param date The date the survey was completed."
            },
            {
                "method_name": "isSurveyCompleted",
                "parameters": [
                    "visitID"
                ],
                "docstring": "Gets survey data from the database by the office visit id. Creates an instance of an \t  SurveyBean with data and returns it. \t   \t  @param id The unique ID of the survey in question. \t  @return A bean containing the SurveyBean. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "surveyLoader"
        ],
        "docstring": "A DAO for handling all Survey data.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs."
    },
    {
        "class_name": "SurveyResultDAO",
        "methods": [
            {
                "method_name": "getSurveyResultsForZip",
                "parameters": [
                    "zip",
                    "specialty"
                ],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "getSurveyResultsForHospital",
                "parameters": [
                    "hospitalID",
                    "specialty"
                ],
                "docstring": "Returns all the survey results in the database that correspond to a particular zip code. \t   \t  @param zip The zipcode we are interested in as a String. \t  @param specialty The specialty we are interested in as a String. \t  @return A java.util.List of SurveyResultBeans. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "loader"
        ],
        "docstring": "A DAO for handling all Survey results.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs."
    },
    {
        "class_name": "TransactionDAO",
        "methods": [
            {
                "method_name": "getAllTransactions",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc."
            },
            {
                "method_name": "logTransaction",
                "parameters": [
                    "type",
                    "loggedInMID"
                ],
                "docstring": "Returns the whole transaction log \t   \t  @return \t  @throws DBException"
            },
            {
                "method_name": "logTransaction",
                "parameters": [
                    "type",
                    "loggedInMID",
                    "secondaryMID",
                    "addedInfo"
                ],
                "docstring": "Log a transaction, just giving it the person who is logged in and the type \t   \t  @param type The {@link TransactionType} enum representing the type this transaction is. \t  @param loggedInMID The MID of the user who is logged in. \t  @throws DBException"
            },
            {
                "method_name": "getAllRecordAccesses",
                "parameters": [
                    "patientID",
                    "getByRole"
                ],
                "docstring": "Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on \t  the transaction type. \t   \t  @param type The {@link TransactionType} enum representing the type this transaction is. \t  @param loggedInMID The MID of the user who is logged in. \t  @param secondaryMID Typically, the MID of the user who is being acted upon. \t  @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity). \t  @throws DBException"
            },
            {
                "method_name": "getTransactionsFor",
                "parameters": [
                    "loggedInRole",
                    "secondaryRole",
                    "begin",
                    "end",
                    "type"
                ],
                "docstring": "Return a list of all transactions in which an HCP accessed the given patient's record \t   \t  @param patientID The MID of the patient in question. \t  @return A java.util.List of transactions. \t  @throws DBException"
            },
            {
                "method_name": "getRecordAccesses",
                "parameters": [
                    "patientID",
                    "lower",
                    "upper",
                    "getByRole"
                ],
                "docstring": "The Most Thorough Fetch  \t  @param loggedInRole Role of loggedIn \t  @param secondaryRole Role of secondary \t  @param begin Beginning of date range \t  @param end End of date range \t  @param type Type of transaction \t  @return \t  @throws DBException"
            },
            {
                "method_name": "getOperationalProfile",
                "parameters": [],
                "docstring": "Return a list of all transactions in which an HCP accessed the given patient's record, within the dates \t   \t  @param patientID The MID of the patient in question. \t  @param lower The starting date as a java.util.Date \t  @param upper The ending date as a java.util.Date \t  @return A java.util.List of transactions. \t  @throws DBException"
            },
            {
                "method_name": "addAndSortRoles",
                "parameters": [
                    "tbList",
                    "patientID",
                    "sortByRole"
                ],
                "docstring": "Returns the operation profile \t   \t  @return The OperationalProfile as a bean. \t  @throws DBException"
            }
        ],
        "attributes": [
            "factory",
            "loader",
            "operationalProfileLoader"
        ],
        "docstring": "Used for the logging mechanism.      DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,   one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are   added. DAOs can assume that all data has been validated and is correct.      DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be   accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC   connections and/or accessing other DAOs.      @author Andy"
    },
    {
        "class_name": "BloodType",
        "methods": [],
        "attributes": [],
        "docstring": "All possible blood types      @author Andy"
    },
    {
        "class_name": "Ethnicity",
        "methods": [],
        "attributes": [],
        "docstring": "All possible ethnicities represented in iTrust."
    },
    {
        "class_name": "Gender",
        "methods": [],
        "attributes": [],
        "docstring": "Male or Female.  Not specified is provided as well, for incomplete forms or patient's discretion."
    },
    {
        "class_name": "PrescriptionAlerts",
        "methods": [],
        "attributes": [],
        "docstring": "Every prescription that should be alerted for emergency reports - in the future, this should be abstracted   out to a database table so it can be changed at runtime.      @author Andy"
    },
    {
        "class_name": "Role",
        "methods": [],
        "attributes": [],
        "docstring": "The iTrust user roles: Patient, ER, HCP, UAP, PHA, Administrator and Tester.   Consult the requirements for the contextual meanings of these individual choices."
    },
    {
        "class_name": "State",
        "methods": [],
        "attributes": [],
        "docstring": "All of our wonderful states.      @author Andy"
    },
    {
        "class_name": "TransactionType",
        "methods": [],
        "attributes": [],
        "docstring": "All of the possible transaction types, in no particular order, used in producing the operational profile."
    },
    {
        "class_name": "DBException",
        "methods": [
            {
                "method_name": "getSQLException",
                "parameters": [],
                "docstring": "@return The SQL Exception that was responsible for this error."
            },
            {
                "method_name": "getExtendedMessage",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "serialVersionUID",
            "sqlException"
        ],
        "docstring": "The reasoning behind this wrapper exception is security. When an SQL Exception gets thrown all the way back   to the JSP, we begin to reveal details about our database (even knowing that it's MySQL is bad!) So, we   make a wrapper exception with a vague description, but we also keep track of the SQL Exception for   debugging and testing purposes.      @author Andy"
    },
    {
        "class_name": "ErrorList",
        "methods": [
            {
                "method_name": "addIfNotNull",
                "parameters": [
                    "errorMessage"
                ],
                "docstring": "Adds a message to the list if it's not a Java null or empty string. \t   \t  @param errorMessage"
            },
            {
                "method_name": "getMessageList",
                "parameters": [],
                "docstring": "Returns the list of error messages \t   \t  @return"
            },
            {
                "method_name": "hasErrors",
                "parameters": [],
                "docstring": "Returns true if the list has any errors \t   \t  @return"
            },
            {
                "method_name": "toString",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "iterator",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "errorList"
        ],
        "docstring": "Used by the validators to create a list of error messages.      @author Andy"
    },
    {
        "class_name": "FormValidationException",
        "methods": [
            {
                "method_name": "getErrorList",
                "parameters": [],
                "docstring": "Constructor with error messages passed as a list of parameters to the method. \t  @param errorMessages The list of error messages to be returned in the special form validation box."
            },
            {
                "method_name": "getMessage",
                "parameters": [],
                "docstring": "Constructor with error messages as a special ErrorList data type. \t  @param errorList An ErrorList object which contains the list of error messages."
            },
            {
                "method_name": "printHTML",
                "parameters": [
                    "out"
                ],
                "docstring": "Returns the error list as a java.util.List of Strings. \t  @return The error list"
            }
        ],
        "attributes": [
            "serialVersionUID",
            "errorList"
        ],
        "docstring": "This exception is used specifically for when an action involves the correct   and proper submission of a web form.  Form Validation is handled by a series of   other classes, but when form validation is incorrect or incomplete, this exception   is thrown."
    },
    {
        "class_name": "iTrustException",
        "methods": [
            {
                "method_name": "getMessage",
                "parameters": [],
                "docstring": "The typical constructor. \t  @param message A message to be displayed to the screen."
            },
            {
                "method_name": "getExtendedMessage",
                "parameters": [],
                "docstring": "For messages which are displayed to the user. Usually, this is a very general message for security \t  reasons."
            }
        ],
        "attributes": [
            "serialVersionUID",
            "message"
        ],
        "docstring": "A specialized exception class for displaying iTrust error messages.   This exception is handled by the default iTrust exception handler."
    },
    {
        "class_name": "NoHealthRecordsException",
        "methods": [],
        "attributes": [
            "MESSAGE",
            "serialVersionUID"
        ],
        "docstring": "This error message is thrown when checking for health risk indicators and the   patient has had no health records entered.  It is a separate case than an iTrustException   because the error handling is slightly different."
    },
    {
        "class_name": "ChronicDiseaseMediator",
        "methods": [
            {
                "method_name": "getDiseaseAtRisk",
                "parameters": [],
                "docstring": "Given a factory and patient ID, and sets up a list of all risk checkers \t   \t  @param factory The DAOFactory to be used in creating the necessary DAOs to perform the checks. \t  @param pid The MID of the patient in question. \t  @throws DBException \t  @throws NoHealthRecordsException"
            }
        ],
        "attributes": [
            "riskCheckers"
        ],
        "docstring": "Figures out which risk checker strategy to use      @author Andy"
    },
    {
        "class_name": "HeartDiseaseRisks",
        "methods": [
            {
                "method_name": "qualifiesForDisease",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDiseaseRiskFactors",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getName",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Checks to see if the given patient is at risk for Heart Disease   For details on what each method does, see {@link RiskChecker}   @author Andy"
    },
    {
        "class_name": "RiskChecker",
        "methods": [
            {
                "method_name": "getName",
                "parameters": [],
                "docstring": "@return The name of the disease being checked."
            },
            {
                "method_name": "getDiseaseRiskFactors",
                "parameters": [],
                "docstring": "@return A java.util.List of the risk factors increasing this patients disease risk."
            },
            {
                "method_name": "qualifiesForDisease",
                "parameters": [],
                "docstring": "@return A boolean indicating whether the patient is at increased risk."
            },
            {
                "method_name": "isAtRisk",
                "parameters": [],
                "docstring": "This method exists purely for performance - just stop once you hit the threshold. <br /> \t  <br /> \t  Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there \t  should be no double-querying \t   \t  @return isAtRisk"
            },
            {
                "method_name": "getPatientRiskFactors",
                "parameters": [],
                "docstring": "@return A java.util.List of patient risk factors associated with this disease."
            }
        ],
        "attributes": [
            "RISK_THRESHOLD",
            "patient",
            "currentHealthRecord",
            "factory"
        ],
        "docstring": "An abstract class which has a number of utlity methods for checking risks.      When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk   and getPatientRiskFactors to get the actual risks. See the known subclasses for an example      @author Andy"
    },
    {
        "class_name": "Type1DiabetesRisks",
        "methods": [
            {
                "method_name": "qualifiesForDisease",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDiseaseRiskFactors",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getName",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Checks to see if the given patient is at risk for Type 1 Diabetes.   For details on what each method does, see {@link RiskChecker}      @author Andy"
    },
    {
        "class_name": "Type2DiabetesRisks",
        "methods": [
            {
                "method_name": "qualifiesForDisease",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getDiseaseRiskFactors",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getName",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Checks to see if the given patient is at risk for Type II Diabetes.   For details on what each method does, see {@link RiskChecker}      @author Andy"
    },
    {
        "class_name": "AgeFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "patient",
            "age"
        ],
        "docstring": "The risk factor associated with checking if a person is over a particular age   See {@link PatientRiskFactor} for details on what each method typically does.   @author Andy"
    },
    {
        "class_name": "ChildhoodInfectionFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "icdCodes",
            "patientID",
            "factory"
        ],
        "docstring": "Checks if the patient had the given diagnoses during childhood.   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "CholesterolFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "hdlThreshold",
            "ldlThreshold",
            "triThreshold",
            "record"
        ],
        "docstring": "Checks if cholesterol is over a given threshold for a given patient   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "EthnicityFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "atRisk",
            "patient"
        ],
        "docstring": "Checks if the ethnicity of a patient matches the one at risk   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "FamilyHistoryFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "patientID",
            "factory",
            "icdUpper",
            "icdLower"
        ],
        "docstring": "Checks if a patient has a family history of a given diagnosis range. Delegates straight to the DAO.   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "GenderFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "patient",
            "gender"
        ],
        "docstring": "Checks if the patient's gender matches the given at-risk one.   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "HypertensionFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "systolicThreshold",
            "diastolicThreshold",
            "record"
        ],
        "docstring": "Checks if the patient's blood pressure is above a given threshold.   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "PatientRiskFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": "@return A textual description of what the patient's status is that's causing the risk."
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": "@return A boolean indicating whether the patient has the increased risk."
            },
            {
                "method_name": "hasRiskFactor",
                "parameters": [],
                "docstring": "@return A boolean indicating whether the patient has the increased risk."
            }
        ],
        "attributes": [
            "hasRisk"
        ],
        "docstring": "Abstract class for risk factors, the hasRiskFactor delegates to the protected version. Caches the result in   case it gets checked more than once.      @author Andy"
    },
    {
        "class_name": "PriorDiagnosisFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "patientID",
            "factory",
            "lowerICDCode",
            "upperICDCode"
        ],
        "docstring": "Checks for prior diagnoses by delegatin to the DAO   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "SmokingFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "patientID",
            "factory"
        ],
        "docstring": "Risk factor delegates to the DAO to see if a patient has ever smoked in their life   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "WeightFactor",
        "methods": [
            {
                "method_name": "getDescription",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "hasFactor",
                "parameters": [],
                "docstring": null
            }
        ],
        "attributes": [
            "currentHealthRecord",
            "bmiThreshold"
        ],
        "docstring": "Checks the patient's body mass index over the given threshold   See {@link PatientRiskFactor} for details on what each method typically does.      @author Andy"
    },
    {
        "class_name": "SessionTimeoutListener",
        "methods": [
            {
                "method_name": "sessionCreated",
                "parameters": [
                    "arg0"
                ],
                "docstring": "The default constructor."
            },
            {
                "method_name": "sessionDestroyed",
                "parameters": [
                    "arg0"
                ],
                "docstring": "The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified \t  timeout limit. \t  @param factory The DAOFactory to be used."
            }
        ],
        "attributes": [
            "factory"
        ],
        "docstring": "A listener which will time the user out after a pre-specified time limit."
    },
    {
        "class_name": "ICD9CMLink",
        "methods": [
            {
                "method_name": "doStartTag",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "doEndTag",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "release",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPageContext",
                "parameters": [
                    "pageContext"
                ],
                "docstring": null
            },
            {
                "method_name": "setParent",
                "parameters": [
                    "parent"
                ],
                "docstring": null
            },
            {
                "method_name": "getParent",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getCode",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setCode",
                "parameters": [
                    "code"
                ],
                "docstring": null
            },
            {
                "method_name": "setCode",
                "parameters": [
                    "code"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "pageContext",
            "parent",
            "code"
        ],
        "docstring": "JSP tag used as a utility to link to the actual ICD9CM site      @author Andy"
    },
    {
        "class_name": "PatientNavigation",
        "methods": [
            {
                "method_name": "doStartTag",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "doEndTag",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "release",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPageContext",
                "parameters": [
                    "pageContext"
                ],
                "docstring": null
            },
            {
                "method_name": "setParent",
                "parameters": [
                    "parent"
                ],
                "docstring": null
            },
            {
                "method_name": "getParent",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getThisTitle",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setThisTitle",
                "parameters": [
                    "thisPage"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "pageContext",
            "parent",
            "pageTitles",
            "pageURLs",
            "thisTitle"
        ],
        "docstring": "JSP tag that is used as the patient navigation bar at the bottom of the screen.      To add a new page, add to the two arrays, and make sure that the page accepts PID      @author Andy"
    },
    {
        "class_name": "StateSelect",
        "methods": [
            {
                "method_name": "doStartTag",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "doEndTag",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "release",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setPageContext",
                "parameters": [
                    "pageContext"
                ],
                "docstring": null
            },
            {
                "method_name": "setParent",
                "parameters": [
                    "parent"
                ],
                "docstring": null
            },
            {
                "method_name": "getParent",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "getName",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setName",
                "parameters": [
                    "name"
                ],
                "docstring": null
            },
            {
                "method_name": "getValue",
                "parameters": [],
                "docstring": null
            },
            {
                "method_name": "setValue",
                "parameters": [
                    "value"
                ],
                "docstring": null
            }
        ],
        "attributes": [
            "pageContext",
            "parent",
            "name",
            "value"
        ],
        "docstring": "JSP tag that adds an HTML select for states, from the enum.      @see {@link State}      Also selects the current state   @author Andy"
    },
    {
        "class_name": "AddPatientValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "p"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "The validator used by {@link AddPatientAction}. Only checks first name, last name, and email      @author Andy"
    },
    {
        "class_name": "AddPersonnelValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "p"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "The validator used by {@link AddPatientAction}. Only checks first name, last name, and email      @author Andy"
    },
    {
        "class_name": "AdverseEventValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "b"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates an adverse event bean, from {@link AdverseEventAction}"
    },
    {
        "class_name": "AllergyBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "m"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validator used to validate adding a new allergy in {@link EditOfficeVisitAction}      @author Andy"
    },
    {
        "class_name": "ApptBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "bean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": null
    },
    {
        "class_name": "ApptTypeBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "a"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": null
    },
    {
        "class_name": "BeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "bean"
                ],
                "docstring": "Check the format against the given enum. isNullable will check if the string is empty or a Java null. \t  Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}. \t   \t  @param name \t  @param value \t  @param format \t  @param isNullable \t  @return"
            },
            {
                "method_name": "checkFormat",
                "parameters": [
                    "name",
                    "value",
                    "format",
                    "isNullable"
                ],
                "docstring": "Check a long value against a particular format. isNullable will check if it is empty or a Java null. \t  Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}. \t   \t  @param name \t  @param longValue \t  @param format \t  @param isNullable \t  @return"
            },
            {
                "method_name": "checkFormat",
                "parameters": [
                    "name",
                    "longValue",
                    "format",
                    "isNullable"
                ],
                "docstring": "Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an \t  error message will be returned. Use this in conjunction with {@link ErrorList}. \t   \t  @param name \t  @param doubleValue \t  @param format \t  @param isNullable \t  @return"
            },
            {
                "method_name": "checkFormat",
                "parameters": [
                    "name",
                    "doubleValue",
                    "format",
                    "isNullable"
                ],
                "docstring": "Check against the proper gender \t   \t  @param name \t  @param gen \t  @param format \t  @param isNullable \t  @return"
            },
            {
                "method_name": "checkGender",
                "parameters": [
                    "name",
                    "gen",
                    "format",
                    "isNullable"
                ],
                "docstring": "The that an integer is the proper format, and is in the correct range \t   \t  @param name \t  @param value \t  @param lower \t  @param upper \t  @param isNullable \t  @return"
            },
            {
                "method_name": "checkInt",
                "parameters": [
                    "name",
                    "value",
                    "lower",
                    "upper",
                    "isNullable"
                ],
                "docstring": "Check that a double is in the proper format and is in the correct range \t   \t  @param name \t  @param value \t  @param lower \t  @param upper \t  @return"
            },
            {
                "method_name": "checkDouble",
                "parameters": [
                    "name",
                    "value",
                    "lower",
                    "upper"
                ],
                "docstring": "Check that the value fits the \"true\" or \"false\" \t   \t  @param name \t  @param value \t  @return"
            },
            {
                "method_name": "checkBoolean",
                "parameters": [
                    "name",
                    "value"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Abstract class used by all validators that provides utility methods for checking formatting of a particular   field. Specify the Bean to be validated      @author Andy      @param <T>              The bean type to be validated"
    },
    {
        "class_name": "DiagnosisBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "d"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates an ICD9CM code      @author Andy"
    },
    {
        "class_name": "DrugInteractionValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "d"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates a drug interaction bean, from {@link DrugInteractionAction}"
    },
    {
        "class_name": "EditOfficeVisitValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "form"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [
            "validatePrescription"
        ],
        "docstring": "Used to validate updating an office visit, by {@link EditOfficeVisitAction}      @author Andy"
    },
    {
        "class_name": "EMailValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "m"
                ],
                "docstring": "Performs the act of validating the bean in question, which varies depending on the \t  type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown. \t   \t  @param m A bean of the type to be validated."
            }
        ],
        "attributes": [],
        "docstring": "The default constructor."
    },
    {
        "class_name": "HealthRecordFormValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "bean"
                ],
                "docstring": "Performs the act of validating the bean in question, which varies depending on the \t  type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown. \t   \t  @param p A bean of the type to be validated."
            }
        ],
        "attributes": [],
        "docstring": "Validator used in adding health information on Basic Health History, {@link EditHealthHistoryAction}      @author Andy"
    },
    {
        "class_name": "HospitalBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "h"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates the input for hospital beans, {@link UpdateHospitalListAction}      @author Andy"
    },
    {
        "class_name": "LabProcedureValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "b"
                ],
                "docstring": null
            },
            {
                "method_name": "checkFormat",
                "parameters": [
                    "name",
                    "value",
                    "format",
                    "isNullable"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Performs the act of validating the bean in question, which varies depending on the \t  type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown. \t   \t  @param p A bean of the type to be validated."
    },
    {
        "class_name": "LOINCBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "m"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validator used to validate LOINCbean"
    },
    {
        "class_name": "MailValidator",
        "methods": [
            {
                "method_name": "validateEmail",
                "parameters": [
                    "email"
                ],
                "docstring": "Performs the act of validating the bean in question, which varies depending on the \t  type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown. \t   \t  @param p A bean of the type to be validated."
            }
        ],
        "attributes": [],
        "docstring": "The default constructor."
    },
    {
        "class_name": "MedicationBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "m"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates ND code beans, from {@link UpdateNDCodeListAction}      @author Andy"
    },
    {
        "class_name": "MessageValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "mBean"
                ],
                "docstring": null
            }
        ],
        "attributes": [],
        "docstring": "Used to validate updating an office visit, by {@link EditOfficeVisitAction}      @author Andy"
    },
    {
        "class_name": "PatientValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "p"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates a patient bean, from {@link EditPatientAction}      @author Andy"
    },
    {
        "class_name": "PersonnelValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "p"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates a personnel bean, from {@link EditPersonnelAction}      @author Andy"
    },
    {
        "class_name": "ProcedureBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "p"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validates an ND code, from {@link UpdateNDCodeListAction}      @author Andy"
    },
    {
        "class_name": "RemoteMonitoringDataBeanValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "m"
                ],
                "docstring": "The default constructor."
            }
        ],
        "attributes": [],
        "docstring": "Validator used to validate adding new remote monitoring data in {@link AddRemoteMonitoringDataAction}"
    },
    {
        "class_name": "SecurityQAValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "bean"
                ],
                "docstring": "Performs the act of validating the bean in question, which varies depending on the \t  type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown. \t   \t  @param p A bean of the type to be validated."
            }
        ],
        "attributes": [],
        "docstring": "Validates the security question and answer. This doesn't follow the same format as the others because this   validator is used for the various states of reset password, {@link SetSecurityQuestionAction}      @author Andy"
    },
    {
        "class_name": "SurveySearchValidator",
        "methods": [
            {
                "method_name": "validate",
                "parameters": [
                    "bean"
                ],
                "docstring": "Performs the act of validating the bean in question, which varies depending on the \t  type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown. \t   \t  @param p A bean of the type to be validated."
            }
        ],
        "attributes": [],
        "docstring": "Validator for zip code that is entered when a user searches for HCP survey results."
    },
    {
        "class_name": "ValidationFormat",
        "methods": [],
        "attributes": [],
        "docstring": "Enum with all of the validation formats that fit into a regex.      @author Andy"
    }
]